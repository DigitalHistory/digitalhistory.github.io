[
{
	"uri": "http://digitalhistory.github.io/syllabus/",
	"title": "Course Docs",
	"tags": [],
	"description": "",
	"content": " Syllabus   "
},
{
	"uri": "http://digitalhistory.github.io/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Digital History This is the website for His 393, Digital History, at the University of Toronto. All of the course materials are described in detail in the links on the sidebar; you probably want to start with the syllabus. Tables of contents for long pages can be access via the odd list icon at the top left of the page menu.\nEnjoy the class!\n"
},
{
	"uri": "http://digitalhistory.github.io/tags/assignment/",
	"title": "assignment",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://digitalhistory.github.io/assignment/01-html-css/",
	"title": "Assignment 01: Zero to Blog Post",
	"tags": ["assignment"],
	"description": "",
	"content": " Due Date: Sept. 26 (2 days later than original deadline)\nGeneral Description You do not have to become a coder to do well in this course. However, you will have to be willing to explore technical skills that you might not otherwise develop as a humanities scholar. In this second assignment, we\u0026rsquo;ll use one of the web\u0026rsquo;s many excellent self-education platforms to learn the very basics of how web pages work. We\u0026rsquo;ll then extend that knowledge with a set of slightly more advanced programming exercises.\nWeb pages are composed of three components: HTML, CSS, and Javascript. HTML provides the structure and content of a web page; CSS controls the style of presentation; and Javascript permits dynamic modification of both. To explore the web from the inside, you need to be a little bit comfortable in all three.\nIn this assignment you will be introduced to HTML and CSS. The detailed assignment README leads you through a series of skill-building exercises, and provides links to comprehensive tutorial resources. As always, ask for help on Slack; use the new #blog-assignment channel for support/collaboration.\nhere is the assignment repo-creation link!!\nRubric Passes General Tests Passes Reflection Tests -  -\n"
},
{
	"uri": "http://digitalhistory.github.io/assignment/",
	"title": "Assignments",
	"tags": [],
	"description": "",
	"content": " Participation   Assignment 00: Your Class Profile   Assignment 01: Zero to Blog Post   "
},
{
	"uri": "http://digitalhistory.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://digitalhistory.github.io/syllabus/his393syllabus/",
	"title": "Syllabus",
	"tags": [],
	"description": "",
	"content": " Logistics    Instructor: Matt Price     Email: matt.price@utoronto.ca   Meeting Times T Th 2-3, SS 1070   Web: http://digitalhistory.github.io/   Slack: https://digitalhistoryuoft.slack.com/   New!! Youtube: https://www.youtube.com/channel/UC59evpoPsmdKhmB9YeqXMPg   Office Hrs: T Th 3-3:30, SS 3077    In general, online communication should take place via Slack. In the case of questions having to do with official University business (requests for extensions, discussion of accommodations, any message involving sensitive personal data) please use my University email, being sure to put \u0026ldquo;HIS393\u0026rdquo; in the subject line.\nIntroduction We all know \u0026#x2013; it is so commonplace that we barely even notice it! \u0026#x2013; that we are living through a revolutionary period in the history of communication. In the year of your birth, the World Wide Web was a scrawny, hand-powered frontier of hand-coded sites and Internet startups. Amazon and Google were infants. The University of Toronto Library website looked something like this:\n and many students and faculty still used the card catalog to find books in Robarts.\nToday, the processes of research, writing and reading are all dramatically transformed by information technology. Instead of painstakingly discovering rare books and manuscript artifacts, we can do full-text searches on a vast corpus. Our writing is mediated by immensely powerful computing machines, and our creations need not be limited exclusively to the linear texts around which all the humanities initially took shape. Readers encounter our writing, not as a few precious drops of information in a desert of ignorance, but as part of an endless stream of information that assaults them all day long.\nHow should history respond to these new conditions of our existence? In this class we explore foundational topics in the \u0026ldquo;digital humanities\u0026rdquo; and ask what we can learn from them about how we should be doing history \u0026#x2013; in particular, how we should be collecting, analyzing, synthesizing and presenting knowledge.\n How do the digital media developed in the last two decades change the way we understand history? Can the fundamental goal of interpreting the past survive? What, if any, new technical skills do we need to acquire? Can we use the new media to ask (and answer!) new kinds of questions? Can they help us improve our answers to the old questions? Perhaps most powerfully: how do the new digital conditions of existence relate to the question of \u0026ldquo;engaged\u0026rdquo; scholarship? What new opportunities, constraints, and dangers does digital production call forth when we mix scholarship and citizenship?  Objectives At the end of this course, you should:\n be able to describe to others what the phrase \u0026ldquo;digital humanities\u0026rdquo; means to you. be able to frame a coherent and nuanced argument of your own about the value of DH methods to the field of history be able to clearly state and defend a position regarding \u0026ldquo;engaged scholarship\u0026rdquo;, and articulate the relationship of your argument to the contemporary media landscape have a basic understanding of markup languages and their use in DH be able to make compelling use of media materials such as audio, video, and animation in historical arguments understand how to create simple historical maps, and have an opinion about the value of GIS in historical argument  Method There are many approaches to the digital humanities, all of them involving tools that are under rapid and iterative development. A given project is likely to require a substantial training period in the particular tools chosen by the principal investigators. It is therefore not possible for this course to provide an effective survey of \u0026ldquo;the\u0026rdquo; digital humanities toolkit. But learning tools is an essential skill for the digital humanist. So what should we do?\nAlmost every digital humanist will, at some point, need to do the following:\n read and edit HTML, CSS and Javascript debug running web pages using the browser\u0026rsquo;s built-in tools use a text editor to write code in any of several languages collaborate with peers using version control software, almost always git  Our emphasis is therefore on simple coding taught using standard tools that are available almost everywhere. Almost all of the software we use is Free or Open Source. You will learn very basic web development skills and slowly come to apply them to increasingly sophisticated (but still pretty simple!) historical questions. These baby steps will give you some sense of what skills a \u0026ldquo;real\u0026rdquo; digital history project requires, and give you the tools you\u0026rsquo;ll need to teach yourself when you encounter new tools in the course of a project.\nPolicies Accessibility The University provides academic accommodations for students with disabilities in accordance with the terms of the Ontario Human Rights Code. For information on services and resources, see http://www.studentlife.utoronto.ca/as\nRespecting Diversity Diverse backgrounds, embodiments, and experiences are essential to the critical thinking endeavor at the heart of higher education. We expect you to be respectful of the many social and cultural differences among us, which may include, but are not limited to: age, cultural background, disability, ethnicity, technical ability, gender identity and presentation, citizenship and immigration status, national origin, race, religious and political beliefs, sex, sexual orientation, and socioeconomic status. Please talk with me right away if you experience disrespect in this class—from any source, including myself—and I will active work to address it.\nCorrespondence As noted above, most communication should take place via Slack. In the case of questions having to do with official University business (requests for extensions, discussion of accommodations, any message involving sensitive personal data) please use my University email, being sure to put \u0026ldquo;HIS393\u0026rdquo; in the subject line. I\u0026rsquo;ll do my best to reply within two working days, though occasionally the delay may be slightly longer. Please allow the full 48 hours to elapse before sending a repeat email.\nAlso: I have an injury-related difficulty co-ordinating action between my left and right hands, which leads to very frequent \u0026amp; distinctive typographical errors (and is also one of the many reasons you don\u0026rsquo;t want to hear me play a musical instrument). In my course materials, assignment comments, and announcements, I strive to eliminate those errors, but in instant messaging I am less attentive, as typing corrections approximately triples my composition time. So\u0026#x2026; please bear with me.\nAttendance Make every effort to attend each class meeting (including lab sections)! Class will begin and (usually) end on time. Please do your best to get to class before the start of the session. Students are expected to attend all meetings, with exceptions permitted in case of illness and family emergencies.\nPlease silence all cell phones/pagers/etc. before the beginning of each class. You should bring your laptop for in-class work, but please don\u0026rsquo;t use class time (lecture or lab) to check your email, update your Facebook, read reddit, watch YouTube, make dank memes, seize the means of production (well, that may be allowed under certain circumstances), etc. Such usage is distracting and interferes with learning both for you and for all the other students around you. If I notice you doing this, I will call you out in public. Spend class time on class materials. If another student\u0026rsquo;s activity is distracting, please ask them to stop it (or let me know outside of class).\nTools Course assignments will require you to install software. All of the software we use is free, but it requires a laptop to run. A Chromebook unfortunately will not be sufficient. While it is in principle possible to do all of your assignments on the web or using a very basic text editor, I do not recommend that method, and will not offer technical support. If you don\u0026rsquo;t own a laptop, you should find a way to borrow one, or buy a cheap model on College St to use for the duration of the semester.\nI can offer help with the following\n   Tool On Mac On Windows On Linux     Real Web Browser Firefox and/or Chrome Firefox and/or Chrome Firefox and/or Chrome   Text Editor VSCode VSCode VSCode   Bash Shell Environment Terminal (Built in) Git for Windows or Windows Subsystem for Linux gnome-terminal, qterm, etc   Git Version Control Git for OSX Git for Windows apt-get install git   Github Org Membership Sign up here Sign up here Sign up here   Git Visualization (optional!) gitKraken gitKraken gitKraken   Node and NPM Node Website (guide) Node Website (guide) Node Website (distro instructions)    Please see the Setup page for more details about the particular tools we will be using. YOU WILL ABSOLUTEY NEED TO HAVE THESE TOOLS IN ORDER TO TAKE THE COURSE\nCourse Requirements \u0026amp; Grading The assignments in this course take a wide variety of forms, and for the most part, differ significantly from what you\u0026rsquo;re likely to have encountered in other History courses. If you have little technical experience, or have perhaps ended up in this course by accident (!), you may find some of the work daunting at first. I have done my very best to make the assignments feasible for beginners, but you will likely encounter some difficult moments. I therefore strongly urge you to (1) start early! and (2) persevere through the difficult initial stages. The frustration you experience is, in fact, part of pedagogical method here. You are not expected to become a coding ninja, but learning how to learn is a major component of work in the Digital Humanities.\nBe warned! Marking in this course is unusual!\nGrading in this course is done using a modified point system. The system may seem odd at first, but it has definite advantages for both students and teachers, so don\u0026rsquo;t be intimidated. Instead of receiving a number or letter grade for each assignment, and then getting a weighted sum of those grades as your final mark, you will choose what final mark to try for and then complete the assignments required for that mark. A certain set of assignments is required for a D; for a C, you must complete all of the \u0026ldquo;D\u0026rdquo; assignments plus another set; for a B, all of the C assignments plus some more; and the same goes for an A.\nHere are some more details:\n All Assignments Are Graded Pass/Fail Each assignment you get will include a careful explanation of my expectations. If your work meets those expectations, you get full credit; if not you get no credit. A \u0026lsquo;Passing\u0026rsquo; Mark on Assignments is a B+ In order to get credit for an assignment, you will have to demonstrate a high level of mastery \u0026#x2013; about the level normally required for a B+. Each Higher Grade Represents a quantum level of additional achievement As you move up the ladder, assignments test more advanced and difficult concepts from the course. If you fail, you can try again You start the semester with 5 \u0026lsquo;retry\u0026rsquo; chits, which you can use to resubmit assignments that have not succeeded. If necessary, you can use all of those chits on a single assignment! Resubmission process must be completed withing 1 week of the return date of the original version. A late assignment costs one \u0026lsquo;retry\u0026rsquo; chit There is no percentage penalty for late work; instead, a late paper will cost you one of your retry opportunities. Second and third tries get fewer comments I will give substantial comments on first tries; additional tries will get less and less fulsome commentary. Pluses and Minuses are determined by participation The only part of your grade which is not determined on a pass/fail basis is the \u0026ldquo;+\u0026rdquo; or \u0026ldquo;-\u0026rdquo; part, which is assigned based on your on and offline participation. See the participation grade sheet for more details.  I know there will be questions! Please don\u0026rsquo;t hesitate to ask them. And here, finally, is the list of assignments. Detailed assignments will be handed out with adequate time to permit completion.\n   Assignment Due Date Skills/Aims A B C D     Class Profile Sep. 17 version control and collaboration \u0026#10004; \u0026#10004; \u0026#10004; \u0026#10004;   G \u0026amp; GH Extras   \u0026#10004;      Zero to Blog Post Sep. 24 web markup and presentation \u0026#10004; \u0026#10004; \u0026#10004; \u0026#10004;   Z2B Extras   \u0026#10004;      A Feast of Ministers Oct. 08 Programming Concepts: abstraction, loops, data types \u0026#10004; \u0026#10004; \u0026#10004; \u0026#10004;   Ministers Extras   \u0026#10004;      DOM and Data Oct. 25 Programming Concepts: Object structure, substitution, text as data \u0026#10004; \u0026#10004; \u0026#10004;    DOM and Data Extras   \u0026#10004;      Spatial History Nov. 14 API\u0026rsquo;s, GIS \u0026#10004; \u0026#10004;     Oral History Dec. 05 API\u0026rsquo;s, Multimedia Narratives \u0026#10004; \u0026#10004; \u0026#10004; \u0026#10004;   Project Proposal Dec. 06 Imagine a Digital History Project \u0026#10004;                Texts While all our readings are online, the following texts are heavily used \u0026amp; may be of interest. They are available in the library or via various online booksellers:\n Moretti, Franco. Graphs, Maps, Trees: Abstract Models for a Literary History Verso, 2005. (Online Access) Geddes et al Toward Spatial Humanities Bloomington: Indiana University Press, 2014. Perks, et al. The Oral History Reader. 2016 (Online Access)  Course Outline Text, Code, and the Web Introducing Digital History (Sep. 05) Class Synopsis: Introduction to the course\nReadings: You may want to read some of these as general preparation for this and other history classes:\n W. Caleb McDaniel. “How to Read for History.” W. Caleb McDaniel. Accessed June 27, 2015. http://wcm1.web.rice.edu/howtoread.html. William Cronon, \u0026ldquo;Why the Past Matters\u0026rdquo; Cohen, Daniel J, and Roy Rosenzweig. “Becoming Digital.” In Digital History: A Guide to Gathering, Preserving, and Presenting the Past on the Web. Philadelphia: University of Pennsylvania Press, 2006. http://chnm.gmu.edu/digitalhistory/digitizing/.  In-Class Activity: Collaboration on Github, Markdown (Sep. 10)  Also, consider watching the VSCode videos in the class YouTube channel  What the Web Signifies (Sep. 12) We all live with the web, but that doesn\u0026rsquo;t mean we think much about how it works and what it\u0026rsquo;s changed. This week\u0026rsquo;s lecture presents some thoughts on the changing nature of the public sphere and the significance of the web\u0026rsquo;s digital and machine-readable nature.\nReadings:\n Juergen Habermas, \u0026ldquo;The Public Sphere: An Encyclopedia Article\u0026rdquo; (1964) Cohen, Daniel J. “Interchange: The Promise of Digital History” 95, no. 2 (September 1, 2008): 452–91. http://jah.oxfordjournals.org.myaccess.library.utoronto.ca/content/95/2/452.short  In-Class Activity: HTML + CSS (Sep. 17) Resources: These Mozilla Developer Network guides are inter-related, and the structure is easy to get lost in. Still, this is among the best resources on the web.\n MDN: HTML Basics. Start here. MDN: Getting Started with the Web (HTML Basics, above, is part of this progression. You can skip this for now, but we\u0026rsquo;ll come back to several of these topics later.) MDN: Intro to HTML. This is a great, systematic introduction to the most important HTML elements. There are some interactive exercises, and you can also copy code into files to experiment with in VSCode using the Live Server Preview functionality. MDN: Learn HTML Pathway . There\u0026rsquo;s a ton more here; we will use some of it later on. MDN Reference. Complete reference for all HTML elements, These pages are often very technical, but can be useful when you find yourself stumped    Blogstarter: simple tutorial (one of a zillion alternatives to the MDN pages)  Abundance and Openness (Sep. 19) One of the key features of the web is its immenseness. We will discuss how this genuinely new circumstance transforms the work of the historian.\n W. Caleb McDaniel. “How to Read for History.” W. Caleb McDaniel. Accessed June 27, 2015. http://wcm1.web.rice.edu/howtoread.html. Council. “Many More than a Million: Building the Digital Environment for the Age of Abundance.” Council on Library and Information Resources. Accessed June 7, 2011. http://www.clir.org/activities/digitalscholar/index.html. Turkel, William J. “Going Digital.” Accessed October 12, 2011. http://williamjturkel.net/2011/03/15/going-digital/.\n “Learn How Google Works: In Gory Detail.” PPCBlog. Accessed June 30, 2015. http://www.ppcblog.com/how-google-works/.\n  In-Class Activity: More HTML + CSS (Sep. 24) Data Driven History Distant Reading 1 (Sep. 26) Franco Moretti\u0026rsquo;s Graphs, Maps, Trees was a manifesto of sorts for a data-driven literary history. We\u0026rsquo;ll discuss the first 2/3s of this book before turning to some practical skills\nReadings:\n Moretti, Franco. Graphs, Maps, Trees: Abstract Models for a Literary History. Verso, 2005 through p. 64, or Moretti, Franco. “Graphs, Maps, Trees.” New Left Review 24 (November 1, 2003): 67–93m and Moretti, Franco. “Graphs, Maps, Trees - 2.” New Left Review 26 (March 1, 2004): 79–103 \u0026ldquo;Basic Text Mining\u0026rdquo; in The Historian\u0026rsquo;s Macroscope: http://www.themacroscope.org/?page%5Fid=362  In-Class Activity: Javascript variables \u0026amp; functions (Oct. 01) Distant Reading 2: Are Texts Data? (Oct. 03) More Moretti, and some criticisms\nReadings:\n Moretti, Franco. Graphs, Maps, Trees: Abstract Models for a Literary History. Verso, 2005, ch. 3 to end, or “Graphs, Maps, Trees - 3.” New Left Review 28 (July 1, 2004): 43–63. . Stephen Ramsay, \u0026ldquo;The Hermeneutics of Screwing Around\u0026ldquo; Gibbs, Fred. “Hermeneutics of Data and Historical Writing” Writing History in the Digital Age, March 14, 2012. http://writinghistory.trincoll.edu/data/gibbs-owens-2012-spring/. Marc Dunkelman. “What Data Can\u0026rsquo;t Convey.” Blog. The Chronicle of Higher Education, 19 2014.  In-Class Activity: Javascript objects and DOM manipulation (Oct. 08) Text as Data, History as Algorithm (Oct. 10) Note: we may need to push this up We\u0026rsquo;ll explore \u0026ldquo;topic modelling\u0026rdquo; \u0026#x2013; one of the most popular DH methods \u0026#x2013; as well as some critiques of it, and some more playful extrapolations about the future of data-driven history.\nReadings:\n Gibbs, Fred. “Hermeneutics of Data and Historical Writing.” Writing History in the Digital Age, March 14, 2012. Seth van Hooland, Ruben Verborgh, and Max De Wilde. “Cleaning Data with OpenRefine.” The Programming Historian.  In-Class Activity: Javascript questions (Oct. 15) Computing Concepts Catch-up day (Oct. 17) More JS, and Trees.\nAssignment Help Day (Oct. 22) Maps, Visualization, and History Spatial History (Oct. 24) Contemporary \u0026ldquo;Historical GIS\u0026rdquo; and web-based geohistory projects descend from an illustrious lineage of qualitative and quantitative \u0026ldquo;spatial histories\u0026rdquo;. In class today we explore what happens when \u0026ldquo;place\u0026rdquo; takes centre stage in a historical analysis.\nReadings:\n Mark Monmonier, \u0026ldquo;Lying with Maps\u0026rdquo; Statistical Science 20:3, 2005. 215-222. Ben Schmidt, \u0026ldquo;Data narratives and structural histories: Melville, Maury, and American whaling  In-Class Activity: Mapping with Google (Oct. 29) Maps Online (Oct. 31) Maps and visiaulizations are neat and all, but contemporary web-based geohistory allows historical maps to interact powerfully with other data sources. We\u0026rsquo;ll explore some possibilities!\nReadings:\n \u0026ldquo;Railways and Agriculture in France and Great Britain\u0026rdquo; in Toward Spatial Humanities \u0026ldquo;The Development, Persistence, and Change of Racial Segregation in U.S. Urban Areas, 1880-2010\u0026rdquo; in Toward Spatial Humanities google earth tutorial: https://geospatialhistorian.wordpress.com/lessons/lesson-1/  READING WEEK \u0026#x2013; NO CLASS Nov. 05 and Nov. 07 In-Class Activity: GIS (Nov. 12) Visualization (Nov. 14) Of course, maps and graphs are in a certain sense part of a much broader field of rhetorical visualizations: attempts to convey quantitative information through pictures in an effort to convince the reader.\nReadings:\n Jefferson Bailey and Lily Pregill, ‘Speak to the Eyes: The History and Practice of Information Visualization’, Art Documentation: Journal of the Art Libraries Society of North America, vol. 33 (2014). Kostiantyn Kucher and Andreas Kerren, ‘Text Visualization Browser: A Visual Survey of Text Visualization Techniques’, (2014) Andy Kirk, 298 Data Visualisation Resources, Visualising Data, (2015).  In-Class Activity: Reading visualizations (Nov. 19) Oral History, Crowdsourcing, and the Promise of the Public Sphere What\u0026rsquo;s Special about Oral History (Nov. 21) Oral History has a long tradition; we explore its roots and peculiarities, and\nReadings:\n \u0026ldquo;The Voice of the Past\u0026rdquo; and \u0026ldquo;What makes Oral History Different\u0026rdquo; in The Oral History Reader Listen to some part of \u0026ldquo;I can almost see the lights of home\u0026rdquo; http://www.albany.edu/jmmh/vol2no1/lightssoundessay.html  In-Class Activity: Popcorn.js (Nov. 26) Project Planning \u0026amp; Citizen History (Nov. 28) We\u0026rsquo;ll discuss some project management techniques that should help you with your final proposal\n http://publichistorycommons.org/where-are-the-citizen-historians/  Oral History \u0026amp; Remix Culture (Dec. 03) Once oral histories migrate to the web, they, like maps, can interact with other kinds of data.\nIf we\u0026rsquo;re ahead of schedule, we\u0026rsquo;ll watch Harlan County USA in class.\nReadings:\n \u0026ldquo;Oral History and the Digital Revolution\u0026rdquo; and \u0026ldquo;Authoring in Sound\u0026rdquo; in The Oral History Reader Gunkel, David J. “Rethinking the Digital Remix: Mash‐ups and the Metaphysics of Sound Recording.” Popular Music and Society 31, no. 4 (October 1, 2008): 489–510. http://resolver.scholarsportal.info/resolve/03007766/v31i0004/489%5Frtdrmatmosr.xml.  Acknowledgments Thanks to Joel Wrossley of the University of Washington and Thomas J Bradley of Algonquin Collegee for help and inspiration in assignments and grading strategy. The \u0026ldquo;Policies\u0026rdquo; section above is taken almost verbatim from Joel\u0026rsquo;s web development course. Various pieces of the course have been inspired by other teachers over the year, and I hope to do a better job of document theft and inspiration from here on in.\n"
},
{
	"uri": "http://digitalhistory.github.io/assignment/00-git/",
	"title": "Assignment 00: Your Class Profile",
	"tags": ["assignment"],
	"description": "",
	"content": " General Description If you\u0026rsquo;re looking for History, Please, follow that link! Your job in this assignment is to tell the class a few things about yourself. In the process we\u0026rsquo;ll think about a few issues related to digital storage of information, including privacy, interpretation of sources, and data vs. knowledge.\nOne of the hardest parts of this course for many people is setting up their working environment. In this assignment you will be need to set up your working environment and then use Git, much as we did in class, but this time manipulating the command line.\nThis may take longer than you think, and it\u0026rsquo;s due soon. Please get started soon by:\n clicking on this link to get access to the assignment following the instructions in the file README.org in your new repository.  Rubric Passes General Tests Passes Reflection Tests   Grade :\nComments:\n"
},
{
	"uri": "http://digitalhistory.github.io/assignment/participation/",
	"title": "Participation",
	"tags": [],
	"description": "",
	"content": " As described in the syllabus, I use your participation mark to determine the \u0026ldquo;-/null/+\u0026rdquo; part of your grade. Let me explain a little more explicitly how this works.\nThe System It\u0026rsquo;s simple. Suppose you successfully complete all the main assignments, but decide not to write a Project Proposal. Congratulations! You have qualified for a B. But what kind of a B?\n   If your class participation was: You get a: Which ROSI will show as:     Poor B- 72   Satisfactory B 75   Excellent B+ 78    Similarly, perhaps you were only able to complete the Git \u0026amp; Github, HTML \u0026amp; CSS, Javascript and Oral History. Oops! You\u0026rsquo;re going to get a C. Like your somewhat happier classmate, your final grade will be assigned thus:\n   If your class participation was: You get a: Which ROSI will show as:     Poor C- 62   Satisfactory C 65   Excellent C+ 68    But Note!\nA+ is a special grade. Suppose you complete all the assignments satisfactorily, including the additional \u0026ldquo;A only\u0026rdquo; sections of the relevant assignments. Wow! You get an A, great. But\u0026#x2026; do you get an A+?\n   If your class participation was: You get an: Which ROSI will show as:     Poor A- 83   Satisfactory A 88   Excellent DEPENDS DEPENDS    Even if your participation was excellent, you will only receive an A+ if your work was consistently excellent and occasionally brilliant. So, if you successfully complete all the assignments (great!), and also are a great class participant (thanks!), then I\u0026rsquo;ll look over all your work and make a value judgment about whether you deserve this rare and precious grade.\nFinal Note for 2018 \u0026#x2013; this year, there isn\u0026rsquo;t really a \u0026ldquo;D\u0026rdquo; grade. To pass the course you basically have to get a C. In rare cases I will consider lowering the grading criteria for the \u0026ldquo;Oral History\u0026rdquo; assignment to permit a student to scrape through the course.\nParticipation Criteria Your participation mark is a combination of in-class and online participation.\nIn the Classroom But what makes for good class participation? You might want to start by reading How to discuss a book for history, which has lots of helpful suggestions. Really, please read it \u0026#x2013; it\u0026rsquo;s illuminating. But, meanwhile, here are some hints:\n Show up for class It\u0026rsquo;s hard to discuss when you\u0026rsquo;re not here. Do the Readings It\u0026rsquo;s hard to discuss what you haven\u0026rsquo;t read. I will try hard not to assign too much reading; in return, please try to read it. Be Courteous Treat your classmates with respect, even when your opinions differ fiercely. Refrain from interrupting others, notice when others have been waiting \u0026amp; let them speak first, and so on. Don\u0026rsquo;t shut other people down, and frame your comments in a way that invites further discussion. Listen Pay careful attention when your classmates are speaking; if their ideas seem a little unclear, try to fill in the gaps, either by thinking silently, or by asking friendly, clarifying questions. Try to think about how their positions relate to yours, and, especially, whether you should perhaps change your mind a little based on what they have to say. Be Clear think about the readings before you come to class, so that your opinions are well-formed. Be Brave It can be intimidating to speak in class, especially if you have found the readings or the lecture confusing. But you will almost never be alone. If one person is confused, others likely are too. Have the courage to speak up \u0026#x2013; everyone in the room is likely to thank you. If you are extremely shy in person, then come speak to me and we can try to work out a solution for you. Participate in Group work Occasionally we will break up into small groups. The same princples apply to group work \u0026#x2013; I\u0026rsquo;ll be paying attention.  Online Our Slack workspace is also a great way to participate. Contribute to the class in Slack by asking good questions, helping out your classmates, and correcting any professorial errors from lecture!\nFinally If you can do all of these things consistently, you\u0026rsquo;re likely to earn a \u0026ldquo;+\u0026rdquo;. If you\u0026rsquo;re not sure how you\u0026rsquo;re doing, come ask me in a couple of weeks and I\u0026rsquo;ll give you some feedback.\n"
},
{
	"uri": "http://digitalhistory.github.io/tools/setup/",
	"title": "Setup",
	"tags": [],
	"description": "",
	"content": " For the duration of this course, you will need to set up a \u0026ldquo;development environment\u0026rdquo; to do your work. You\u0026rsquo;ll need to download,install, and interact with a group of programs and services that make it possible to do your work. Setting your environment up can be difficult, so be sure to budget some time to do so! Also be aware that these tools will take up significant spae on your laptop and may cause your laptop to slow down somewhat if run simultaneously with\nPlatform Notes I run Arch Linux on my laptop, and have experience with Ubuntu as well. For the purposes of this class, I have installed Windows 10 Education Edition (available free to U of T students here). I wil also attempt to support MacOS as best I can.\n if you have an earlier edition of Windows, some of our tools may not work properly. I encourage you to upgrade to Windows 10 Education Edition, which has good support for modern tools. if you have a Chromebook, you will need to install a full Linux OS in order to do the coursework. Gallium OS and Crouton are the two recommended tools for this, and you can find some instructions here. Newer Chromebooks may support the new Linux Apps Beta installation, but I can\u0026rsquo;t test them. In the bast, Linux on a chromebook has not been easy, and I won\u0026rsquo;t be able to help you. If this seems hard, you may want to think about buying an inexpensive, older laptop and installing an ordinary Linux distribution. Here are two lists of distributions, but the choice is up to you. .  Details Here\u0026rsquo;s the table of tools from the syllabus:\n   Tool On Mac On Windows On Linux     Real Web Browser Firefox and/or Chrome Firefox and/or Chrome Firefox and/or Chrome   Text Editor VSCode VSCode VSCode   Bash Shell Environment Terminal (Built in) Git for Windows or Windows Subsystem for Linux gnome-terminal, qterm, etc   Git Version Control Git for OSX Git for Windows apt-get install git   Slack Community Client Download, Signup Link Client Download, Signup Link Client Download, Signup Link   Github Org Membership Sign up here Sign up here Sign up here   Node and NPM Node Website (guide) Node Website (guide) Node Website (distro instructions)    If you\u0026rsquo;re comfortable exploring and installing software, you can probably get set up quickly by following the links above. Please nonetheless read the detailed instructions below. Things will go smoother if you do!\nWeb browser All of our work will involve interacting with the World Wide Web. Firefox and Chrome are head and shoulders above all other web browsers, and you should install one (or preferably both) of them. In class, I will use Firefox almost exclusively. If you haven\u0026rsquo;t tried Firefox for a while, give the new Quantum version a try\u0026rsquo; it is much, much faster and more stable than its predecessors.\nBoth have highly sophisticated developer tools with which you should familiarize yourself. As you learn more about web design, you\u0026rsquo;ll come to rely on these tools more and more. Follow these links for more about Firefox Dev Tools and Chrome\u0026rsquo;s version.\nOf particular value in both Chrome and Firefox is the \u0026ldquo;Javascript Consoles,\u0026rdquo; accessible from the developer tools: Tools \\rightarrow Web Developer \\rightarrow Console or Menu \\rightarrow More Tools \\rightarrow Developer \\rightarrow Console\nThe Firefox console is a little awkward to use for multi-line programming, so they have also provided a \u0026ldquo;Scratchpad\u0026rdquo; tool (Shift-F4), which I find helpful, though I now use VSCode\u0026rsquo;s Javascript console instead (see \u0026ldquo;Text Editor\u0026rdquo;, below).\nThe other tool I use all the time is \u0026ldquo;inspect element\u0026rdquo;, available by right-clicking on any part of a web page. Both of these tools will prove essential for figuring out why your code isn\u0026rsquo;t working right!\nText Editor If you want to code, you have to write like a coder. This means using a powerful text editor. In this class we use Visual Studio Code. Please follow the download links and install to your computer. There\u0026rsquo;s a separate post about using VSCode \u0026#x2013; once you\u0026rsquo;ve installed it, navigate there!\nCommand Line Web developers and digital humanists spend a lot of their time in the command-line environment, interacting with their computers through text-based commands instead of a mouse or voice interface. It takes some time to learn to use the command-line, but it\u0026rsquo;s a very powerful and effective way to work once you get used to it. One goal of this course is to help you get comfortable in this environment and learn to take advantage of its power.\nThere are actually many different command-line environments; in this class we use bash, the most popular.\nOn Mac and Linux, bash is built in to the system. In Mac, open the Terminal app to find the bash prompt; in Linux you may have any of several terminal emulators installed, search your program list for \u0026ldquo;term\u0026rdquo; to find yours.\nIn Windows, bash comes with the Git installation \u0026#x2013; follow the instructions below. Note that very recent editions of Windows 10 come with the \u0026ldquo;Windows Subsystem for Linux (WSL)\u0026rdquo;, which you can use instead of the Git Bash method.\nIMPORTANT UPDATE: VSCode has an integrated terminal, and it\u0026rsquo;s extremely useful. Windows users will have to do a little bit of work in order to use bash in the integrated terminal. See the excellent terminal configuration instructions online, and be sure to follow the link explaining how to access the user settings screen in VSCode.\nGit, Github, and optionaly GitKraken Software development is made vastly easier by \u0026ldquo;version control\u0026rdquo; systems: specialized software that keeps track of the history and current state of files and directories. In the past there were many such systems, but now almost the whole user uses git, and we\u0026rsquo;re all grateful for it.\nInstall Git To install git, follow the download links on the website (see the table above for OS-specific links and instructions). We\u0026rsquo;ll come back to the Git command-line in a minute.\nSign up for Github For many developers \u0026#x2013; maybe even most of them \u0026#x2013; using Git is intimately tied to the Github code-sharing website. We\u0026rsquo;ll be using Github for almost all of our work this semester, so it\u0026rsquo;s important that you get familiar with it. If you were present for the first class, you\u0026rsquo;ve already done this. If not, you\u0026rsquo;ll need to sign Up for a Github account. Once you\u0026rsquo;ve done that, you have two choices:\n practice working at the command line go straight to a GUI (\u0026ldquo;Graphical User Interface\u0026rdquo;) that will make working with git a little more comfortable.  I recommend at least trying the command line first.\nCommand-line Setup You need to tell git a little bit about yourself. Start with your email address and your user name. Open your bash shell (Terminal in Mac, git-bash in Windows) and type:\ngit config --global user.name \u0026quot;Your Name\u0026quot; git config --global user.email \u0026quot;youraddress@ mail.utoronto.ca\u0026quot; git config --global github.user YourGithubId  Great \u0026#x2013; now git knows who you are. If you\u0026rsquo;re feeling ambitious, you can also set up SSH keys so you don\u0026rsquo;t have to type in your password every time you commit to Git.\nVSCode Git VSCode also has an interface to Git and Github. It\u0026rsquo;s pretty powerful and intuitive, so I recommend trying it before installing GitKraken. The instructions are here.\nUsing the GitKraken GUI client Sometimes it\u0026rsquo;s nice to have a backp. GitKraken is an impressive visual tool that also makes it easy to configure all of your information. They have a nice video about SSH integration, which you can watch if you like.\nLearn more There is a somewhat more wordy Git tutorial on this website, which you should read. For now, Install the Github Desktop App which also includes the command-line version of git. You can follow the excellent tutorial in the downloadable git-it application, as well as the Github Desktop documentation. There is also a quite helpful tutorial on The Programming Historian. We\u0026rsquo;ll be discussing Git and Github further in our first class.\nNode and NPM \u0026#x2013; This is the hardest part! Right now it looks like the drag and drop tool we wanted to make will NOT be ready for this semester :frowning_face:\nInstalling Node is not strictly necessary for the first assignment. If you are having trouble, put this off till next week.\nMost of our programming work will involve Javascript, which runs most of the web. The Node.js environment and its \u0026ldquo;package manager,\u0026rdquo; NPM, are an incredible resource for Javascript development. In fact, Slack, VSCode, and gitKraken are all written as Node applications themselves! Installing the \u0026ldquo;bare\u0026rdquo; versions of node and NPM lets us access some of that power while we work.\nYou can survive this class without installing Node, but without it, you won\u0026rsquo;t be able to run the test suites that accompany all of the assignments. You\u0026rsquo;ll therefore be at a disadvantage in the class, because the tests offer hints about what\u0026rsquo;s wrong with your code.\n In Mac and Linux, the instructions linked to in the table above are probably good enough. In Windows, you may follow all the instructions and then find yourself getting an error (\u0026rdquo;Command not found\u0026rdquo;). If that happens, you may want to try the instructions laid out here, or if you\u0026rsquo;re on Windows 10, you could go crazy and install the amazing Windows Subsystem for Linux, which allows you to work as if your computer had a real Unix operating system like everyone else.  The details of Node and NPM are a little outside the scope of our class, but a colleague at the University of Washington has an excellent introduction in one of his courses.\nSlack Slack is not strictly necessary to do your work, but it is the principal means of conversation for the class. Your activity in our Slack team is part of your participation assessment. So, please sign up for the team using the signup links above, and if you\u0026rsquo;re not familiar with Slack already, read some of the Slack documentation.\n"
},
{
	"uri": "http://digitalhistory.github.io/tools/",
	"title": "Tools and Tricks",
	"tags": [],
	"description": "",
	"content": " Installing Node Dependencies   Navigating at the Command Line   using vscode   Setup   "
},
{
	"uri": "http://digitalhistory.github.io/tools/using-vscode/",
	"title": "using vscode",
	"tags": [],
	"description": "",
	"content": " Microsoft\u0026rsquo;s Visual Studio Code is an amazing general-purpose code editor. Most people I collaborate with use it as their primary editor, and that will be true in most professional settings you enter. This is the first year we\u0026rsquo;re using it in the class, and I have some high hopes for it.\nAs with any powerful tool, it can take a little while to get comfortable with VSCode. The documentation is excellent, but may sometimes assume more advanced programming skills than you have. The videos are also excellent and recommended.\nI will mostly let you explore on your own, but here are a few important starting points.\nEditor Basics   The editor has 4 main parts. Since each part can itself have lots of parts, this is not as simple as it sounds! From left to right, here are the main areas:\n the activity bar provides you with various tools and ways to switch views the side bar content changes depending on what you\u0026rsquo;ve selected in the activity bar. By default, it shows a file tree listing, like you would find in windows explorer or the Apple Finder. But it can also provide a list of extensions, information about your git status, or information about project tests, among other things. the editor groups are clusters of tabs. Usually a tab will contain a file, but things like the VSCode preferences and live HTML previews also show up in this area the panels near the bottom include the built-in terminal, a list of errors VSCode has found in your files, and other important tools  Also, the blue status bar on the bottom has clickable areas that let you interact with other editor features.\nFinally, it\u0026rsquo;s important to mention the Command Palette. This is a magic bar that opens up in the top center of the screen when you type F1 or Control-Shift-P (Command-Shift-P on a Mac). This gives you rapid access to many, many commands, and we\u0026rsquo;ll use it a lot.\nRead more about the user interface here.\nExtensions There are many, many amazing extensions to VSCode. I\u0026rsquo;ve chose a small number of them and bundled them into an extension pack. Install it by clicking on the extensions button in the activity bar and typing searching for History Hack Pack. Follow the links in the documentation to learn more about the individual extensions.\n"
},
{
	"uri": "http://digitalhistory.github.io/tools/navigating-command-line/",
	"title": "Navigating at the Command Line",
	"tags": [],
	"description": "",
	"content": " The Programming Historian link below is excellent. Having some trouble with screenshots ATM, will fix soon as I can reload my desktop \u0026#x2013; but for next few hours pls refer to the PH link for images!\nOne common issue for people new to the command line is that it can be tough to understand the notion of location in the filesystem. Most ordinary users interact with their filesystems through the so-called GUI layer \u0026#x2013; the graphical interface of windows. Often the user-accessible files are more or less restyricted to special directories (or \u0026ldquo;folders\u0026rdquo;) with meaningful names like Desktop, MyDocuments, etc. However, once you start working at the command line this convenient feature can become something of a curse. It\u0026rsquo;s important to recognize that these special locations are just part of a complex, hierarchical filesystem \u0026#x2013; a branching tree of directories and files, on which your operating system relies in many ways. You will need to learn to navigate that filesystem, not from the GUI, but from the command line.\nWhen you first start using the command line, it often feels (a) confusing and (b) somehow primitive or over-simple. The command line is, in fact, a sophisticated and incredibly efficient way to interact with the filesystem \u0026#x2013; but you need to learn your way around it first. In this class we won\u0026rsquo;t discuss the wonderful world of shell scripting (see below for guides to scripting); instead, I just want you to learn a few very basic commands to help you move around.\nNavigation The file system is a \u0026ldquo;branching tree\u0026rdquo; of files and folders. At the top (or bottom, depending on how you imagine things) of the tree is the \u0026ldquo;root\u0026rdquo;. In bash, we represent this as /. Every folder has a path that starts with / and proceeds down the file hierarchy. So, for instance, my global git configuration is located at /home/matt/.gitconfig. / is the root. /home/ is where all user files can be found. /home/matt/ contains all my user files. /home/matt/.gitconfig identifies the specific file I\u0026rsquo;m looking for.\nYour file explorer will represent this tree for you visually; you can also picture it schematically, as is done e.g. in the following image: We can also explore from the command line. Here are a few basic commands to learn for this purpose. [ Note: in the screenshots below, my command prompt is heavily customized and includes some extra information. Most notably, it tells me when I am in a git repository and gives me the name of the current git branch. You can experiment with changing your bash prompt in the ~/.bashrc file that controls many features of the\npwd pwd is short for \u0026ldquo;print working directory\u0026rdquo;, and will show you where you are in the file system. ls ls will list the contents of a directory. With no further arguments it will list the directory you\u0026rsquo;re currently in, but you can ask it to list some other directory too. Here are some examples. Note the \u0026ldquo;switches\u0026rdquo; -l and -la. Switches give further instructions to the command. In this case -l means \u0026ldquo;long\u0026rdquo; while -a is short for \u0026ldquo;all\u0026rdquo;. You can see in the screenshot below what the effect is. cd Short for \u0026ldquo;change directory\u0026rdquo;, cd allows you to move through the filesystem.\n cd someDirectoryName will move you into the subdirectory \u0026ldquo;someDirectoryName\u0026rdquo; of your current directory. cd with no arguments, or \u0026ldquo;cd ~ \u0026ldquo;, will drop you back into your home directory (this is helpful if you get lost somehow). At the command line, the tilde (~) is short for \u0026ldquo;home directory\u0026rdquo;, so you can use it anywhere instead of typing out your whole whome directory name. cd .. or cd ../ will move you \u0026ldquo;up\u0026rdquo; one level in the filesystem \u0026#x2013; so if you are currently in /home/matt/digitalHistory, executing cd .. will move you to /home/matt/.    cat and less Sometimes you want to look at the contents of a file. cat and less are two ways to do so. cat will print the contents of the file directly to your terminal window. less will create a simple interface that you can use to scroll through a longer file using a keyboard interface. mkdir and touch mkdir will create a new directory, while touch will create a new (empty) file.\nmkdir some-directory-name touch some-directory-name/somefile.txt  These commands will create the file somefile.txt in the folder some-directory-name, inside the current working directory.\nArrow Keys and Tab Expansion often we make mistakes typing or are unsure of spelling, etc. Two kinds of shortcuts make for huge time savings:\n arrow keys can be used to navigate through your previous commands \u0026#x2013; typing ↑ will reproduce your previous command, allowing you to correct any errors you might have made the last time you typed out some complex command and made a small error. Each time you type an ↑, you will move one command up in the command history. To get back down, type ↓. you can type TAB part way through a command to get a list of possible completions. If there\u0026rsquo;s only one possible command that starts with what you\u0026rsquo;ve typed so far, bash will complete it for you. Similarly, typing part of a file or directory name after a command has been entered will usually get you a list of possible completions. Try it a few times and you\u0026rsquo;ll see how much time it saves.  Learn More OK, that\u0026rsquo;s all for now, hopefully this helps you navigate around your projects. I may add to this guide as we go through the semester, but here are some further guides.\n this introduction is quite clear and simple the programming historian has a great guide too the TLDP guide introduced generations of programmers to bash scripting, and is still a useful reference point  "
},
{
	"uri": "http://digitalhistory.github.io/tools/node-dependencies/",
	"title": "Installing Node Dependencies",
	"tags": [],
	"description": "",
	"content": "Node.js is an exquisite piece of programming infrastructure. One of its main features is support for developer-defined dependencies. As a programmer \u0026#x2013; or in my case, as a teacher \u0026#x2013; you can inform the underlying node package manager (npm) that your project \u0026ldquo;depends\u0026rdquo; on some group of other projects. This allows programmers to build constantly on each other\u0026rsquo;s work.\nIn our assignments, node dependencies are mostly used to enable the tests, whose main function is to help you figure out whether you\u0026rsquo;ve done the assignments correctly. Installing node dependencies is pretty simple, but can be confusing if you\u0026rsquo;re completely new to node, the command line, and programming in general. Here are the (very simple!) instructions:\n Install Node and NPM as per this section of the \u0026ldquo;Setup\u0026rdquo; instructions From the command line, navigate to the root directory of your repository using cd as per the navigation help page From the root directory of your repository,type the following command into the terminal/git-bash prompt: npm install  You should see some complex output from the command, after which your node dependencies will be installed. You can actually see the installed files by browsing the contents of the node_modules directory, which should now be present in your working directory.\nOnce the dependencies are installed, you should be able to run the node tests with npm test (issued from the same directory, that is, the root directory of your repository). If you\u0026rsquo;ve installed the VSCode extentions, ou\nI hope that helps!\n"
},
{
	"uri": "http://digitalhistory.github.io/_header/",
	"title": "header",
	"tags": [],
	"description": "",
	"content": "HIS 393 Digital History\n"
},
{
	"uri": "http://digitalhistory.github.io/slides/01-02-git/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " 01-02: Git and Github .underline { text-decoration: underline; }   /* Position computations of klipse get confused by reveal.js's scaling. Hence, scaling should be disabled with this code. Fix height of code area with scrollbar (use overflow instead of overflow-y to restore CodeMirror setting afterwards): */ .reveal section pre { max-height: 70vh; height: auto; overflow: auto; } /* Reset some reveal.js and oer-reveal settings: */ .reveal section pre .CodeMirror pre { font-size: 2em; box-shadow: none; width: auto; padding: 0.4em; display: block; overflow: visible; } /* Enlarge cursor: */ .CodeMirror-cursor { border-left: 3px solid black; }   window.klipse_settings = { selector: '.language-klipse', selector_eval_html: '.language-klipse-html', selector_eval_js: '.language-klipse-javascript', selector_eval_js: '.language-klipse-js', selector_eval_php: '.language-klipse-php', selector_eval_python_client: '.language-klipse-python', selector_eval_ruby: '.language-klipse-ruby', selector_eval_scheme: '.language-klipse-scheme', selector_sql: '.language-klipse-sql' };   if( window.location.search.match( /print-pdf/gi ) ) { var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = '../../vendor/reveal//css/print/pdf.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); }    01-02: Git and Github Matt Price  (view this presentation in another theme: Black (default) - White - League - Sky - Beige - Simple Serif - Blood - Night - Moon - Solarized )\t--   Git!    \"Track Changes\" on steroids \"Version Control\" software optimized for collaboration essential infrastructure for almost all programming projects     Github!    git-based code-sharing site largest in history owned by Microsoft ☹ where we (and most open-source projects) work!     Today  fun git practice git concepts ensure setup is going well assignment/process overview If you don't have a github account yet, get one now!     Git Practice: History, Please!  simple command-line/graphical application crowd-sourced by students from this class many problems to fix \u0026amp; improvements to make we'll try to make some progress   History, Please  Take out your Laptop!  Navigate to the History-Please repository Let's explore code, issues, and pulls   Activity  Divide into groups:  trends page adders events page adders copyeditors issue triagers  Find at least one partner (if you're very confident, help someone else) Scroll down to the contributing instructions Additional tips:  reference issues \u0026amp; pull requests by number, e.g. #58. Do this whenever you create a pull that fixes an issue, especially. Give your PR's meaningful titles and helpful,extensive descriptions @mention me (@titaniumbones) when you think you have fixed an issue, or want my input (won't get back to you today though!)      Git Concepts  In this section  collaboration remotes branches commits worktree vs. repository   Collaboration    Concepts: Remote    Classroom Network              Branches     git history is a tree, not a straight line nothing is ever lost!! can be hard to figure out!       Concepts: Commit    changes aren't saved automatically; manually “commit” every commit can be revisited later a branch is really just a “pointer” to a specific commit (complicated)   Activity Commits    Concept: Worktree and Repository  what you see   what's underneath     Git Workflows  In this section  merging pulling pushing   Concepts: Merge    when we “merge” two branches, the changes from one are brought over into the other      if work has progressed on both branches, then there might be incompatible changes these are called \"merge conflicts\" they suck!    Concepts: Pull and Push Changes            Concepts: Pull and Push collaboratively             Assignment  The assignment is now up on Github Classroom, Quercus, and the course website. We'll discuss it, and further setup questions, on Thursday.        // Full list of configuration options available here: // https://github.com/hakimel/reveal.js#configuration Reveal.initialize({ controls: true, progress: true, history: true, center: false, slideNumber: 'c', rollingLinks: false, keyboard: true, mouseWheel: false, fragmentInURL: false, hashOneBasedIndex: false, pdfSeparateFragments: true, overview: true, width: \"100%\", height: \"100%\", margin: 0.10, minScale: 1.00, maxScale: 1.00, theme: Reveal.getQueryHash().theme, // available themes are in /css/theme transition: Reveal.getQueryHash().transition || 'convex', // see README of reveal.js for options transitionSpeed: 'default', // Optional libraries used to extend reveal.js dependencies: [ {src: '../../vendor/reveal//plugin/klipse_reveal.js'}, { src: '../../vendor/reveal//lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../vendor/reveal//plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../vendor/reveal//plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '../../vendor/reveal//plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }] });    /* Recompute layout upon changes by klipse. Code fragment from asciidoctor-revealjs-klipse by Timothy Pratley under GPLv3: https://github.com/timothypratley/asciidoctor-revealjs-klipse/blob/master/docs/docinfo-footer.html */ Reveal.addEventListener( 'slidechanged', function( event ) { window.dispatchEvent( new Event('resize') ); } );    "
},
{
	"uri": "http://digitalhistory.github.io/slides/01-intro-digital-history/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Introduction to Digital History .underline { text-decoration: underline; }   if( window.location.search.match( /print-pdf/gi ) ) { var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = '../../vendor/reveal//css/print/pdf.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); }    Introduction to Digital History Matt Price  (view this presentation in another theme: Black (default) - White - League - Sky - Beige - Simple Serif - Blood - Night - Moon - Solarized )\t--   About Me    Historian of Science \u0026amp; Technology Interdisciplinary Background Interest in \u0026ldquo;Engaged\u0026rdquo; scholarship     Why Care about History? Why care about the Digital Age?  The World Out of Which We Come   The past is the world out of which we have come, the multitude of events and experiences that have shaped our conscious selves and the social worlds we inhabit. To understand how and why we live as we do, we cannot avoid appealing to the past to explain how andwhy we got to be this way. ([CrononWhyMatters2000], p. 4)    Not just Fact but Story   It is remembering and storytelling we care about, not the raw past, because only by being perennially resurrected in the mind of each ne generation does the past become meaningful. Only this does it become a living memory which in turn gives meaning to our present lives by reminding us ho we are\u0026#x2013;as individuals, as a state and nation, as a people. (Ibid., p. 13)    A Digital Age  Opportunity  masses of data tremendous participation    Challenge  filtering data trusting writers lack of collective experience    Our Project  Understand how to write history for a digital age!   what can we preserve? what opportunities are there for change? what has been done already?      Method  For most of us, this is experimental.  no canon minimal technical background unknown professional plans    Systematic inquiry won\u0026rsquo;t get us there  Hackers not Computer scientists! Basic Concepts \u0026amp; Practical Tools, as a foundation for self-guided further learning Trial \u0026amp; Error, frustration management   (cf. constructivist pedagogy, e.g.)   Intro to toolbox but tools keep changing therefore: simple coding, basic plumbing: code editors,version control, web dev absolute basics      Syllabus  Some Highlights  Participate  come to class join Slack ask questions help your classmates    Be Willing to Try  get outside your comfort zone if you don\u0026rsquo;t get it right, try again read the assignments \u0026amp; follow instructions \u0026amp; feedback carefully    Bring your Laptop  we will code almost every class but not chat/social media    Find the Fun  every challenge is an opportunity    4 blocks!  Text and Code  Aims:  understand how the web works and what it changes about the practice of history Intro to our tools \u0026amp; infrastructure (code editor, version control, build tools) Intro to HTML and CSS (web page structure and appearance)     Data Driven History  Aims:  understand \u0026ldquo;Distant Reading\u0026rdquo; and the problems of textual abundance experiment with treating texts as data distinguish between \u0026ldquo;meaning\u0026rdquo; and \u0026ldquo;information\u0026rdquo; introduction to Javascript (variables, functions, control structures)     Maps \u0026amp; Visualization  Aims:  understanding geohistory GIS basics work with web-based GIS     Oral History \u0026amp; Crowdsourcing  Aims:  work with non-textual media appreciate the power and perils of crowdsourced \u0026amp; amateur history plan your own professional or independent fuutre as a digital historian     Objectives  At the end of this course, you should:  be able to describe to others what the phrase \u0026ldquo;digital humanities\u0026rdquo; means to you. be able to frame a coherent and nuanced argument of your own about the value of DH methods to the field of history be able to clearly state and defend a position regarding \u0026ldquo;engaged scholarship\u0026rdquo;, and articulate the relationship of your argument to the contemporary media landscape have a basic understanding of markup languages and their use in DH be able to read and navigate basic Javascript programs be able to make compelling use of media materials such as audio, video, and animation in historical arguments understand how to create simple historical maps, and have an opinion about the value of GIS in historical argument   About that Land Acknowledgment  History of Life on this shore Dish with One Spoon Continuity and Disjuncture         We would like to acknowledge this sacred land on which the University of Toronto operates. It has been a site of human activity for 15,000 years. This land is the territory of the Huron-Wendat and Petun First Nations, the Seneca, and most recently, the Mississaugas of the Credit River. The territory was the subject of the Dish with One Spoon Wampum Belt Covenant, an agreement between the Iroquois Confederacy and Confederacy of the Ojibwe and allied nations to peaceably share and care for the resources around the Great Lakes. Today, the meeting place of Toronto is still the home to many Indigenous people from across Turtle Island and we are grateful to have the opportunity to work in the community, on this territory.   Weird Grading Method  you choose what grade you want to get do the assignments required for that grade to \u0026ldquo;pass\u0026rdquo; an assignment, you need to achieve a high standard \u0026#x2013; approx. B+ if you fail the first time, you have a chance to try again +/- set by participation   Assignments      Assignment Due Date Skills/Aims A B C D     Class Profile 2019-09-12 Thu version control and collaboration \u0026#10004; \u0026#10004; \u0026#10004; \u0026#10004;   G \u0026amp; GH Extras \u0026#xa0; \u0026#xa0; \u0026#10004; \u0026#xa0; \u0026#xa0; \u0026#xa0;   Zero to Blog Post 2019-09-24 Tue web markup and presentation \u0026#10004; \u0026#10004; \u0026#10004; \u0026#10004;   Z2B Extras \u0026#xa0; \u0026#xa0; \u0026#10004; \u0026#xa0; \u0026#xa0; \u0026#xa0;   A Feast of Ministers 2019-10-08 Tue abstraction, loops, data types \u0026#10004; \u0026#10004; \u0026#10004; \u0026#10004;   Ministers Extras \u0026#xa0; \u0026#xa0; \u0026#10004; \u0026#xa0; \u0026#xa0; \u0026#xa0;   DOM and Data 2019-10-25 Fri Objects, substitution, text as data \u0026#10004; \u0026#10004; \u0026#10004; \u0026#xa0;   DOM and Data Extras \u0026#xa0; \u0026#xa0; \u0026#10004; \u0026#xa0; \u0026#xa0; \u0026#xa0;   Spatial History 2019-11-14 Thu Simple GIS Web Project \u0026#10004; \u0026#10004; \u0026#xa0; \u0026#xa0;   Oral History 2019-12-05 Thu Multimedia We Project \u0026#10004; \u0026#10004; \u0026#10004; \u0026#10004;   Project Proposal 2019-12-06 Fri Imagine a Digital History Project \u0026#10004; \u0026#xa0; \u0026#xa0; \u0026#xa0;     Assignments, put another way  To Pass  Class Profile Zero to Blog Post A Feast of Ministers Oral History    To Get a C  Class Profile Zero to Blog Post A Feast of Ministers DOM and Data Oral History    To Get a B  Class Profile Zero to Blog Post A Feast of Ministers DOM and Data Spatial History Oral History    To Get an A  Class Profile Zero to Blog Post A Feast of Ministers DOM and Data Spatial History Oral History Project Proposal All Reflection Questions    Participation  come every time! pay attention and ask questions! no email/youtube/reddit/facebook etc etc etc etc participate in Slack!   Assignments 0 and 1!  available early next week. Assignment 0 due in a week and a half!     Intros 1  Find someone you don\u0026rsquo;t know in 3 minutes, find out: Name; Year; Interest in the class; something else of interest Present yr classmate to the people around you     Intros 2  find a different stranger spend no more than 8 minutes imagining a DH project present to another pair     Before next class  Get yourself a Github user account Join the \u0026ldquo;Github Classroom\u0026rdquo; Begin working your way through the [[     Bibliography [CrononWhyMatters2000] Cronon, Why the Past Matters, The Wisconsin Magazine of History, 84(1), 2-13 .         // Full list of configuration options available here: // https://github.com/hakimel/reveal.js#configuration Reveal.initialize({ controls: true, progress: true, history: true, center: false, slideNumber: 'c', rollingLinks: false, keyboard: true, mouseWheel: false, fragmentInURL: false, pdfSeparateFragments: true, overview: true, width: \"100%\", height: \"100%\", margin: 0.10, minScale: 1.00, maxScale: 1.00, theme: Reveal.getQueryHash().theme, // available themes are in /css/theme transition: Reveal.getQueryHash().transition || 'convex', // see README of reveal.js for options transitionSpeed: 'default', // Optional libraries used to extend on reveal.js dependencies: [ {src: '../../vendor/reveal//plugin/klipse_reveal.js'}, { src: '../../vendor/reveal//lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../vendor/reveal//plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../vendor/reveal//plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '../../vendor/reveal//plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }] });    "
},
{
	"uri": "http://digitalhistory.github.io/slides/02-02-more-git/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " 2-2: More Git, Some Markdown, a Tiny Bit of HTML .underline { text-decoration: underline; }   /* Position computations of klipse get confused by reveal.js's scaling. Hence, scaling should be disabled with this code. Fix height of code area with scrollbar (use overflow instead of overflow-y to restore CodeMirror setting afterwards): */ .reveal section pre { max-height: 70vh; height: auto; overflow: auto; } /* Reset some reveal.js and oer-reveal settings: */ .reveal section pre .CodeMirror pre { font-size: 2em; box-shadow: none; width: auto; padding: 0.4em; display: block; overflow: visible; } /* Enlarge cursor: */ .CodeMirror-cursor { border-left: 3px solid black; }   window.klipse_settings = { selector: '.language-klipse', selector_eval_html: '.language-klipse-html', selector_eval_js: '.language-klipse-javascript', selector_eval_js: '.language-klipse-js', selector_eval_php: '.language-klipse-php', selector_eval_python_client: '.language-klipse-python', selector_eval_ruby: '.language-klipse-ruby', selector_eval_scheme: '.language-klipse-scheme', selector_sql: '.language-klipse-sql' };   if( window.location.search.match( /print-pdf/gi ) ) { var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = '../../vendor/reveal//css/print/pdf.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); }    2-2: More Git, Some Markdown, a Tiny Bit of HTML Matt Price  (view this presentation in another theme: Black (default) - White - League - Sky - Beige - Simple Serif - Blood - Night - Moon - Solarized )\t--   Review  4 blocks Git intro \u0026amp; practice Assignment 0 is online     Today  more Git Assignment and setup questions Brief HTML explication HTML Exercise   Phrase \"Technical Affordance\"     Git: what we didn't get to   Review: Branches     git history is a tree, not a straight line nothing is ever lost!! can be hard to figure out!       Review: Commit    changes aren't saved automatically; manually “commit” every commit can be revisited later a branch is really just a “pointer” to a specific commit (complicated)       Concept: Worktree and Repository  what you see   what's underneath  these are the \"real\" repo of which the worktree is just one partialrepresentation.      Pointers and objects     5e7ed7e34f9a8b34d26f98275a21afdcac171b83        x\u0001��AN�0\u000cEY�\u0014\u0026gt;��j�I� �8\u0000H�\u0011\u000b�q;]4�Rw��I9\u0002�'�_�}*۶\nX㞤2C\n���n�\u0014]�CJv2����q�1 ��#{�c�,0\u0012�1N\u0018(Xm#�3\u0018��~\u0026amp;v�Nn4ɠ\u001e\u0015��(\u0015\u0026gt;P\u0004\u0026gt;�J\u000c/[�~����RK��\u0013��v����5t�}\u0018\u0014�I\n�3�ޙ��|��.π)A������*��B�PvYK\u0026gt;np�\t���@�ܜ͠cT�(\u001b\u00035˶�\u0006����a�\u000b�\u0003��\u0005\u0013Vjn\n  Review: Pull and Push Changes            Pull and Push, the repo, and the worktree  pulling attempts to impose changes from a branch in one repo onto a branch in another repo. first it adds the commit objects from the remote object into its own store of objects then it tries to update the pointer at the tip the branch if it succeds, yay! if not \u0026#x2013; conflict, and new commits will be created after conflicts are resolved.     The Missing Markdown Cheatsheet  _emphasis and __strong__single \"_\" or \"* \" surrounding words for ital, double for bold, triple for bold ital \u0026gt; for blockquotesjust preface your paragraph with an angle bracket and one space to get a quote block Separate paragraphs with an empty line(otherwise they'll run together) headings start with one or more \"#\" and a spacedon't ofrget the space!! horizontal lines with ----but be sure to keep one empty line above and below, or will be interpreted differently links with [Link Text](http://link.address) images with ![Alt Text](http://path.to.image \"title\")   You'll need these for your assignment!    Assignment Intro/questions  install VSCode install extension install npm follow assingment link get clone link link start working.     HTML: Machine-readable Text  HTML and some consequences This is the top-level heading  This is a paragraph. It can contain further markup and also more complex content.  Sometimes you'll see semantic tags, like \"aside\", \"header\", \"footer\", \"article\", or \"section\".    On the web, text is \"Marked up\" \u0026lt;h1\u0026gt;This is a top-level heading\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;  This is a paragraph. It can contain \u0026lt;i\u0026gt;further markup\u0026lt;/i\u0026gt; and also   \u0026lt;a href=\"http:/some.where.com\"\u0026gt;more complex content\u0026lt;/a\u0026gt;. \u0026lt;/p\u0026gt; \u0026lt;aside\u0026gt;  Sometimes you'll see \u0026lt;i\u0026gt;semantic\u0026lt;/i\u0026gt; tags, like \"aside\",  \"header\", \"footer\", \"article\", or \"section\".  \u0026lt;/aside\u0026gt;      Programs can scan this text, interpret it\u0026#x2026; then treat it as data which can be combined, analyzed, etc.  point of learning HTML is  Understand how to achieve a certain \"look\" Understand how a complex computer algorithm might treat it as \"data\".    Tag Structure \u0026lt;tag att1=\"value1\" att2=\"value2\"\u0026gt;content\u0026lt;/tag\u0026gt; \u0026lt;p class=\"normal\" align=\"right\"\u0026gt;Paragraph Content\u0026lt;/p\u0026gt; \u0026lt;a href=\"http://www.google.com\"\u0026gt;Link to google\u0026lt;/a\u0026gt; \u0026lt;img src=\"http://1.bp.blogspot.com/-CzqzzBV2tMk/TxBM3ar18MI/AAAAAAAAPm0/6faLPO9BM8w/s1600/i-can-has-cheezburger.jpg\" title=\"I can Haz Cheezburger?\" alt=\"greedy cat saying 'I can haz cheezburger?'\" /\u0026gt;    tags:  tag identifier attributes content    content Paragraph Content\nLink to google   A Few HTML tags you should know  Page Structure:  \u0026lt;html\u0026gt;\u0026lt;/html\u0026gt;Opens/closes every page \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; and \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt;two main sections for metadata and display \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;often-invisible tag that divides page into \"divisions\" \u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;, \u0026lt;article\u0026gt;\u0026lt;/article\u0026gt;, \u0026lt;header\u0026gt;\u0026lt;/header\u0026gt; \u0026lt;footer\u0026gt;\u0026lt;/footer\u0026gt;also invisible-by-default \"semantic\" tags that create divisions in page \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;basic paragraph unit \u0026lt;blockquote\u0026gt;\u0026lt;/blockquote\u0026gt;semantic tag distinguishing quoted text \u0026lt;table\u0026gt;, \u0026lt;tr\u0026gt;, \u0026lt;th\u0026gt;, \u0026lt;td\u0026gt;building tables (don't overuse!)    Found inside structural elements:  \u0026lt;a href=\"http://link.address\"\u0026gt;\u0026lt;/a\u0026gt;The essential hyperlink tag that makes the web what it is \u0026lt;img src=\"http://file.location\" alt=\"text to display for non-visual browsers/viewers\"/\u0026gt;\"self-closing\" image display tag \u0026lt;em\u0026gt;\u0026lt;/em\u0026gt; \u0026lt;strong\u0026gt;\u0026lt;/strong\u0026gt;, \u0026lt;i\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;b\u0026gt;\u0026lt;/b\u0026gt;emphasized and strong text \u0026lt;ol\u0026gt;, \u0026lt;ul\u0026gt;, \u0026lt;li\u0026gt;building \"ordered\" and \"unordered\" lists    Group Work 2: HTML, continued  Let's continue our introduction to HTML via JSBin:  click here: http://jsbin.com/utinoz/27/edit?html,output You can also download the excercse at the Github Repository   Here you can see the all parts of the page in different panes. try to add:  images lists real links anything else you can think of   Try to keep it \"real\", and work as teams, with one person driving, and the other person looking stuff up on another computer.   HTML to Markdown  Writing in HTML is distracting and time-consuming!  HTML for publication, but Markdown for writing  convenient shorthand for HTML which we will often use in class    Markdown cheatsheet  _emphasis and __strong__single \"_\" or \"\" surrounding words for ital, double for *bold, triple for bold ital \u0026gt; for blockquotesjust preface your paragraph with an angle bracket and one space to get a quote Separate paragraphs with an empty line headings start with one or more \"#\" horizontal lines with ----but be sure to keep one empty line above and below, or will be interpreted differently links with [Link Text](http://link.address) images with ![Alt Text](http://path.to.image)   Practice Markdown on this similar but subtly different page, or edit `index.md` in atom.        // Full list of configuration options available here: // https://github.com/hakimel/reveal.js#configuration Reveal.initialize({ controls: true, progress: true, history: true, center: false, slideNumber: 'c', rollingLinks: false, keyboard: true, mouseWheel: false, fragmentInURL: false, hashOneBasedIndex: false, pdfSeparateFragments: true, overview: true, width: \"100%\", height: \"100%\", margin: 0.10, minScale: 1.00, maxScale: 1.00, theme: Reveal.getQueryHash().theme, // available themes are in /css/theme transition: Reveal.getQueryHash().transition || 'convex', // see README of reveal.js for options transitionSpeed: 'default', // Optional libraries used to extend reveal.js dependencies: [ {src: '../../vendor/reveal//plugin/klipse_reveal.js'}, { src: '../../vendor/reveal//lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../vendor/reveal//plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../vendor/reveal//plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '../../vendor/reveal//plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }] });    /* Recompute layout upon changes by klipse. Code fragment from asciidoctor-revealjs-klipse by Timothy Pratley under GPLv3: https://github.com/timothypratley/asciidoctor-revealjs-klipse/blob/master/docs/docinfo-footer.html */ Reveal.addEventListener( 'slidechanged', function( event ) { window.dispatchEvent( new Event('resize') ); } );    "
},
{
	"uri": "http://digitalhistory.github.io/slides/03-01-html-backlog/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " HTML: Machine-readable Text .underline { text-decoration: underline; }   if( window.location.search.match( /print-pdf/gi ) ) { var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = '../../vendor/reveal//css/print/pdf.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); }    HTML: Machine-readable Text Matt Price  (view this presentation in another theme: Black (default) - White - League - Sky - Beige - Simple Serif - Blood - Night - Moon - Solarized )\t--   HTML and some consequences This is the top-level heading  This is a paragraph. It can contain further markup and also more complex content.  Sometimes you'll see semantic tags, like \"aside\", \"header\", \"footer\", \"article\", or \"section\".    On the web, text is \"Marked up\" \u0026lt;h1\u0026gt;This is a top-level heading\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; This is a paragraph. It can contain \u0026lt;i\u0026gt;further markup\u0026lt;/i\u0026gt; and also \u0026lt;a href=\"http:/some.where.com\"\u0026gt;more complex content\u0026lt;/a\u0026gt;. \u0026lt;/p\u0026gt; \u0026lt;aside\u0026gt; Sometimes you'll see \u0026lt;i\u0026gt;semantic\u0026lt;/i\u0026gt; tags, like \"aside\", \"header\", \"footer\", \"article\", or \"section\". \u0026lt;/aside\u0026gt;     Programs can scan this text, interpret it\u0026#x2026; then treat it as data which can be combined, analyzed, etc.  point of learning HTML is  Understand how to achieve a certain \"look\" Understand how a complex computer algorithm might treat it as \"data\".      Tag Structure \u0026lt;tag att1=\"value1\" att2=\"value2\"\u0026gt;content\u0026lt;/tag\u0026gt; \u0026lt;p class=\"normal\" align=\"right\"\u0026gt;Paragraph Content\u0026lt;/p\u0026gt; \u0026lt;a href=\"http://www.google.com\"\u0026gt;Link to google\u0026lt;/a\u0026gt; \u0026lt;img src=\"http://1.bp.blogspot.com/-CzqzzBV2tMk/TxBM3ar18MI/AAAAAAAAPm0/6faLPO9BM8w/s1600/i-can-has-cheezburger.jpg\" title=\"I can Haz Cheezburger?\" alt=\"greedy cat saying 'I can haz cheezburger?'\" /\u0026gt;    tags:  tag identifier attributes content    content Paragraph Content\nLink to google     A Few HTML tags you should know  Page Structure:  \u0026lt;html\u0026gt;\u0026lt;/html\u0026gt;Opens/closes every page \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; and \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt;two main sections for metadata and display \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;often-invisible tag that divides page into \"divisions\" \u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;, \u0026lt;article\u0026gt;\u0026lt;/article\u0026gt;, \u0026lt;header\u0026gt;\u0026lt;/header\u0026gt; \u0026lt;footer\u0026gt;\u0026lt;/footer\u0026gt;also invisible-by-default \"semantic\" tags that create divisions in page \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;basic paragraph unit \u0026lt;blockquote\u0026gt;\u0026lt;/blockquote\u0026gt;semantic tag distinguishing quoted text \u0026lt;table\u0026gt;, \u0026lt;tr\u0026gt;, \u0026lt;th\u0026gt;, \u0026lt;td\u0026gt;building tables (don't overuse!)    Found inside structural elements:  \u0026lt;a href=\"http://link.address\"\u0026gt;\u0026lt;/a\u0026gt;The essential hyperlink tag that makes the web what it is \u0026lt;img src=\"http://file.location\" alt=\"text to display for non-visual browsers/viewers\"/\u0026gt;\"self-closing\" image display tag \u0026lt;em\u0026gt;\u0026lt;/em\u0026gt; \u0026lt;strong\u0026gt;\u0026lt;/strong\u0026gt;, \u0026lt;i\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;b\u0026gt;\u0026lt;/b\u0026gt;emphasized and strong text \u0026lt;ol\u0026gt;, \u0026lt;ul\u0026gt;, \u0026lt;li\u0026gt;building \"ordered\" and \"unordered\" lists      Group Work: HTML  Let's continue our introduction to HTML in VSCode  Clone the excercse at the Github Repository   Here you can see the all parts of the page in different panes. try to add:  images lists real links anything else you can think of   Try to keep it \"real\", and work as teams, with one person driving, and the other person looking stuff up on another computer.     Assignment  The assignment is online. Let's talk about it.        // Full list of configuration options available here: // https://github.com/hakimel/reveal.js#configuration Reveal.initialize({ controls: true, progress: true, history: true, center: false, slideNumber: 'c', rollingLinks: false, keyboard: true, mouseWheel: false, fragmentInURL: false, hashOneBasedIndex: false, pdfSeparateFragments: true, overview: true, width: \"100%\", height: \"100%\", margin: 0.10, minScale: 1.00, maxScale: 1.00, theme: Reveal.getQueryHash().theme, // available themes are in /css/theme transition: Reveal.getQueryHash().transition || 'convex', // see README of reveal.js for options transitionSpeed: 'default', // Optional libraries used to extend reveal.js dependencies: [ {src: '../../vendor/reveal//plugin/klipse_reveal.js'}, { src: '../../vendor/reveal//lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../vendor/reveal//plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../vendor/reveal//plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '../../vendor/reveal//plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }] });    "
},
{
	"uri": "http://digitalhistory.github.io/slides/03-2-css/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " And Now: CSS! .underline { text-decoration: underline; }   if( window.location.search.match( /print-pdf/gi ) ) { var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = '../../vendor/reveal//css/print/pdf.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); }    And Now: CSS! Matt Price  (view this presentation in another theme: Black (default) - White - League - Sky - Beige - Simple Serif - Blood - Night - Moon - Solarized )\t--   Reminder  HTML for structure/content; CSS for presentation Resources: Codeacademy CSS offerings; Learn Layout; Mozilla Developer Network; many other cool sites     What you Need to Learn Today  syntax: selectors, rules, punctuation; jargon: colors, sizes where to look stuff up (!)     CSS Basics  \"Cascading Style Sheets\" Style sheet that \"cascades\" = overrides prior values     two \"dimensions\" to cascade (source order and specificity)  specificity is the hard/important one.      With and without CSS        CSS Selectors   h1 { color:blue; font-family:serif; font-size:24px; } div { border: 1px solid black; } div.main p { color:red; } #specialid { float:left; }    When you look at a CSS file, you will see it is divided into a bunch of stanzas, like this. Each of these stanzas is called a \"selector statement\": They all follow the same pattern:  first, a selector that identifies the elements to which these instructions will apply then an open brace \"{\" which marks the start of the actual instructions then a series of property-value pairs. Each of these sets the value of a particular property (duh). Note that at the end of a property, there is always a semi-colon! finally, a closing brace that ends the selector declaration.    Selector Anatomy  h1#anatomy1 { display: inline-flex; padding: 15px; background-color: rgb(30,30,30,0.1); font-size: 1.4em; border: 2px gray solid; } h1#anatomy1 span {padding: 4px;border: 2px black solid; background-color: rgba(10,70,10,0.6);} h1#anatomy1 span.selector {background-color: rgba(150, 20, 20, 0.4);} h1#anatomy1 span.rule {background-color: rgba(70, 10,70, 0.4);} h1#anatomy1 span.value {background-color: rgba(10,150, 150, 0.4);}  selector.has  #funny:stuff { rule: value in (approved); }   Selector types \u0026lt;style\u0026gt; h1 { font-size: 2em; color: red; } p { font-size:5em} .coolpara { color:green; } #myfave { color:yellow; background-color: black; } \u0026lt;/style\u0026gt; \u0026lt;h1\u0026gt; Heading\u0026lt;/h1\u0026gt; \u0026lt;p class=\"coolpara\"\u0026gt;Some Content\u0026lt;/p\u0026gt; \u0026lt;p id=\"myfave\"\u0026gt;Some Content\u0026lt;/p\u0026gt;    Though simple in principle, CSS selectors can be confusing. Here are some basic selector types:  Element selectors: these just give the element (like h1, p, div, span, etc.). they apply to all elements of this type. Class selectors: these give the name of a class attribute that an HTML element may have. This selector will always begin with a period (\".\"). So for instance: ID selector: this addresses the element with a particular ID:    Selector types  div#cssdemo h1 { font-size: 3em; color: red; } div#cssdemo p { font-size:5em} .coolpara { color:green; } div#cssdemo #myfave { color:yellow; background-color: black; }   Heading Some Content\nSome Content\n  More Selectors div.main p { color:red; } div.main \u0026gt; p.blue { color: blue; }    Finally, we have many more complex selectors. This one here is a descendant selector   It addresses every p that is contained inside a div of class \"main.\"   More Selectors  div#cssmain p { color:red; } div#cssmain  p.blue { color: blue; }   regular (red) paragraph\nnot a regular paragraph (blue)     Selectors and the Cascade  Priority: inline \u0026rarr; id \u0026rarr; class \u0026rarr; element/tag fine gradations within this the awful !important rule     Color Values  Various representations:  ul#color-rules {font-size 1.5rem;} ul#color-rules li span.red {color: #FF0000} ul#color-rules li span.green {color: #00FF00} ul#color-rules li span.blue {color: #0000FF}   color: # 00 7F FF ;   color: rgb( 00, 127, 255 );   color: rgba( 00, 127, 255, 0.6);    (also hsl, hsla)  Fonts, colors and borders div.main { color: rgb(150,150,150); background-color: (#b0c4ee); text-align: center; text-decoration:underline; font-family: \"Times New Roman\", Times, Serif; font-style:italic; font-size:1.25em; border: 4px green solid; border-radius:20%; }    A lot of what we do with CSS is to set fonts and colors. Here are some examples: There are plenty of other properties that can be set, in much the same way.   Fonts and Colors in Action  div#maincss2 { color: rgb(150,150,150); background-color: (#b0c4ee); text-align: center; text-decoration:underline; font-family: \"Times New Roman\", Times, Serif; font-style:italic; font-size:1.25em; border: 4px green solid; border-radius:20%; }   here is a sample paragraph doing all of this stuff...\n   Sizes \u0026lt;style\u0026gt; p.fixed { font-size: 20px; background-color: gray; } p.em-small { font-size: 0.4em; background-color: blue; } p.em-big { font-size: 2.5em; background-color: red; } div.pixel-box { width: 50px; height: 50px; border: 1px solid black; } div.percent-box { width: 20%; height: 20px; border: 1px solid black; } div.viewport-box { width: 30vw; height: 30vh; border: 1px solid black; } \u0026lt;/style\u0026gt; \u0026lt;p class=\"fixed\"\u0026gt;This paragraph will be syled differently from its peers\u0026lt;/p\u0026gt; \u0026lt;p class=\"em-small\"\u0026gt;This paragraph will be syled differently from its peers\u0026lt;/p\u0026gt; \u0026lt;p class=\"em-big\"\u0026gt;This paragraph will be syled differently from its peers\u0026lt;/p\u0026gt; \u0026lt;div class=\"pixel-box\"\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\"percent-box\"\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\"viewport-box\"\u0026gt;\u0026lt;/div\u0026gt;      Sizes  p.fixed { font-size: 20px; background-color: gray; } p.em-small { font-size: 0.4em; background-color: blue; } p.em-big { font-size: 2.5em; background-color: red; } div.pixel-box { width: 50px; height: 50px; border: 1px solid black; } div.percent-box { width: 20%; height: 20px; border: 1px solid black; } div.viewport-box { width: 30vw; height: 30vh; border: 1px solid black; }  This paragraph will be syled differently from its peers\nThis paragraph will be syled differently from its peers\nThis paragraph will be syled differently from its peers\n      Group Work: HTML  Let's continue our introduction to HTML in VSCode  Clone the excercse at the Github Repository   Here you can see the all parts of the page in different panes. try to add:  images lists real links anything else you can think of   Try to keep it \"real\", and work as teams, with one person driving, and the other person looking stuff up on another computer.     Simple Exercise  https://github.com/DigitalHistory/css-styling/\n       // Full list of configuration options available here: // https://github.com/hakimel/reveal.js#configuration Reveal.initialize({ controls: true, progress: true, history: true, center: false, slideNumber: 'c', rollingLinks: false, keyboard: true, mouseWheel: false, fragmentInURL: false, hashOneBasedIndex: false, pdfSeparateFragments: true, overview: true, width: \"100%\", height: \"100%\", margin: 0.10, minScale: 1.00, maxScale: 1.00, theme: Reveal.getQueryHash().theme, // available themes are in /css/theme transition: Reveal.getQueryHash().transition || 'convex', // see README of reveal.js for options transitionSpeed: 'default', // Optional libraries used to extend reveal.js dependencies: [ {src: '../../vendor/reveal//plugin/klipse_reveal.js'}, { src: '../../vendor/reveal//lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../vendor/reveal//plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../vendor/reveal//plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '../../vendor/reveal//plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }] });    "
},
{
	"uri": "http://digitalhistory.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://digitalhistory.github.io/slides/",
	"title": "Lecture Slides",
	"tags": [],
	"description": "",
	"content": "Here are the lecture slides. When you click on one of the links below, a set of lecture slides will appear in the browswer window. You may want to right-click and open in a new tab. Navigate through the slides with the following keys:\n n: next slide p: previous slide arrow keys: left, right, up, down (the slide deck is 2-dimensional) escape: slide deck overview f: activate fullscreen mode (escape exits) s: open a separate window with speaker notes. This view shows current slide, upcoming slide, and any off-slide speaker notes  Technical note: these slides are composed as text in Org Mode, exported o reveal.js-compatible HTML by org-re-reveal, and rendered in a grid layout by a custom theme.\nEnjoy!\n"
}]