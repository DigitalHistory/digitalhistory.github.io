[
{
	"uri": "http://digitalhistory.github.io/syllabus/",
	"title": "Course Docs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://digitalhistory.github.io/tools/javascript-operators/",
	"title": "Quick JS Operator review",
	"tags": [],
	"description": "",
	"content": "   Operator Meaning     = sets the left hand variable equal to the right hand expression   == tests whether the two sides of the the expression are equal   === tests whether they are both the same value and the same type (generally we won\u0026rsquo;t worry about this)   != tests whether the two sides are not equal   \u0026gt;,\u0026lt;,\u0026gt;=,\u0026lt;= exactly what you expect   += adds the right-hand expression to the left-hand variable    Asa bonus here are a couple of string tricks:\n   \u0026ldquo;\\n\u0026rdquo; prints a carriage return/new line     \u0026ldquo;\\\u0026rdquo;\u0026rdquo; prints a quotation mark directly   \u0026ldquo;someletters\u0026rdquo;.repeat(4) This is a built-in method of every string – it allows you to repeat the string easily without some kind of for loop (sorry guys! Didn\u0026rsquo;t think of this initially!). prints \u0026ldquo;someletterssomeletterssomeletterssomeletters\u0026rdquo;    Loops "
},
{
	"uri": "http://digitalhistory.github.io/tools/",
	"title": "Tools and Tricks",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://digitalhistory.github.io/tools/js-cheat-sheet/",
	"title": "JS DOM Modification Cheatsheet",
	"tags": [],
	"description": "",
	"content": "Jquery and Vanilla JS equivalents:\n   Task jQuery \u0026ldquo;Vanilla\u0026rdquo; JS     Get all matching elements $('selector') document.querySelectorAll('selector')   Get first matching element $('selector').first() document.querySelector('selector')   Change CSS prop $('selector').css('property-name', 'value') document.querySelector('selector').style.property-name = 'value'     const matches = document.querySelectorAll('selector')     for (const m of matches) {m.style.property-name='value';}   Change Text Value $('selector').text('new text here'); document.querySelector('selector').textContent = 'new text here';     const matches = document.querySelectorAll('selector');     for (const m of matches) {m.textContent ='new text here';}   Set inner HTML $('selector').html('\u0026lt;tag\u0026gt;valid HTML here\u0026lt;/tag\u0026gt;') document.querySelector('selector').innerHTML = '\u0026lt;tag\u0026gt;valid HTML here\u0026lt;/tag\u0026gt;'     const matches = document.querySelectorAll('selector')     for (const m of matches) {m.textContent ='\u0026lt;tag\u0026gt;valid HTML here\u0026lt;/tag\u0026gt;'   Append to an element $('selector').append('\u0026lt;tag\u0026gt;valid HTML here\u0026lt;/tag\u0026gt;') document.querySelector('selector').innerHTML += '\u0026lt;tag\u0026gt;valid HTML here\u0026lt;/tag\u0026gt;' risky!   Remove a node $('selector').remove() let el = document.querySelector('selector'); el.parentNode.removeChild(el);    "
},
{
	"uri": "http://digitalhistory.github.io/tags/assignment/",
	"title": "assignment",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://digitalhistory.github.io/assignment/03-dom-data/",
	"title": "Assignment 03: DOM and Data",
	"tags": ["assignment"],
	"description": "",
	"content": "Due Date: May 29\nIn this assignment, you will slowly work your way up to manipulation of real web pages via Javascript. This can be a difficult transition, so be prepared for some teeth-gnashing.\nDue at end of the day on the due date, you can find the asssignment link on Github, and please be sure to create your own copy and clone the resultant repository to your laptop. (Don\u0026rsquo;t search out and fork the parent repository!)\nRubric   Passes General Tests\n  Passes Reflection Tests\n     "
},
{
	"uri": "http://digitalhistory.github.io/assignment/",
	"title": "Assignments",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://digitalhistory.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://digitalhistory.github.io/assignment/02-js-basics/",
	"title": "Assignment 02: Javascript Basics",
	"tags": ["assignment"],
	"description": "",
	"content": "Due Date: May 23\nThis assignment introduces you to the third and most interesting pillar of basic web development: Javascript.\nDue at end of the day on the due date, you can find the asssignment on Github and clone the resultant repository to your laptop.\nRubric   Passes General Tests\n  Passes Reflection Tests\n     "
},
{
	"uri": "http://digitalhistory.github.io/syllabus/his393syllabus/",
	"title": "Syllabus",
	"tags": [],
	"description": "",
	"content": "Logistics    Instructor: Matt Price     Email: matt.price@utoronto.ca   Meeting Times T Th 10-12 EDT via BB Collaborate   Web: http://digitalhistory.github.io/   Slack: https://digitalhistoryuoft.slack.com/   Youtube: https://www.youtube.com/channel/UC59evpoPsmdKhmB9YeqXMPg   Office Hrs: T Th 3-3:30, SS 3077    In general, online communication should take place via Slack. In the case of questions having to do with official University business (requests for extensions, discussion of accommodations, any message involving sensitive personal data) please use my University email, being sure to put \u0026ldquo;HIS393\u0026rdquo; in the subject line.\nIntroduction We all know – it is so commonplace that we barely even notice it! – that we are living through a revolutionary period in the history of communication. In the year of your birth, the World Wide Web was a scrawny, hand-powered frontier of hand-coded sites and Internet startups. Amazon and Google were infants. The University of Toronto Library website looked something like this:\n and many students and faculty still used the card catalog to find books in Robarts.\nToday, the processes of research, writing and reading are all dramatically transformed by information technology. Instead of painstakingly discovering rare books and manuscript artifacts, we can do full-text searches on a vast corpus. Our writing is mediated by immensely powerful computing machines, and our creations need not be limited exclusively to the linear texts around which all the humanities initially took shape. Readers encounter our writing, not as a few precious drops of information in a desert of ignorance, but as part of an endless stream of information that assaults them all day long.\nHow should history respond to these new conditions of our existence? In this class we explore foundational topics in the \u0026ldquo;digital humanities\u0026rdquo; and ask what we can learn from them about how we should be doing history – in particular, how we should be collecting, analyzing, synthesizing and presenting knowledge.\n How do the digital media developed in the last two decades change the way we understand history? Can the fundamental goal of interpreting the past survive? What, if any, new technical skills do we need to acquire? Can we use the new media to ask (and answer!) new kinds of questions? Can they help us improve our answers to the old questions? Perhaps most powerfully: how do the new digital conditions of existence relate to the question of \u0026ldquo;engaged\u0026rdquo; scholarship? What new opportunities, constraints, and dangers does digital production call forth when we mix scholarship and citizenship?  Objectives At the end of this course, you should:\n be able to describe to others what the phrase \u0026ldquo;digital humanities\u0026rdquo; means to you. be able to frame a coherent and nuanced argument of your own about the value of DH methods to the field of history be able to clearly state and defend a position regarding \u0026ldquo;engaged scholarship\u0026rdquo;, and articulate the relationship of your argument to the contemporary media landscape have a basic understanding of markup languages and their use in DH be able to make compelling use of media materials such as audio, video, and animation in historical arguments understand how to create simple historical maps, and have an opinion about the value of GIS in historical argument  Method There are many approaches to the digital humanities, all of them involving tools that are under rapid and iterative development. A given project is likely to require a substantial training period in the particular tools chosen by the principal investigators. It is therefore not possible for this course to provide an effective survey of \u0026ldquo;the\u0026rdquo; digital humanities toolkit. But learning tools is an essential skill for the digital humanist. So what should we do?\nAlmost every digital humanist will, at some point, need to do the following:\n read and edit HTML, CSS and Javascript debug running web pages using the browser\u0026rsquo;s built-in tools use a text editor to write code in any of several languages collaborate with peers using version control software, almost always git  Our emphasis is therefore on simple coding taught using standard tools that are available almost everywhere. Almost all of the software we use is Free or Open Source. You will learn very basic web development skills and slowly come to apply them to increasingly sophisticated (but still pretty simple!) historical questions. These baby steps will give you some sense of what skills a \u0026ldquo;real\u0026rdquo; digital history project requires, and give you the tools you\u0026rsquo;ll need to teach yourself when you encounter new tools in the course of a project.\nCourse Format (CoViD edition) This class is being taught online and largely asynchronously for the first time during lockdown in May/June 2020. Despite being organized around Digital History,the class has, ironically, traditionally relied heavily on face to face interactions. This term, lectures will all be delivered asynchronously, and scheduled classtime – 4 hours per week – will be devoted to practical coding and writing problems. Essentially, this is a flipped classroom approach, but one in which we never meet IRL. If you\u0026rsquo;re not able to come to the live sessions, help will also be available through Slack and other async channels.\nEach week, I will post a series of short lectures online. You will be expected to watch them in advance of our class meetings, and we will use the meeting time to practice skills you\u0026rsquo;ll need for the assignments.\nPlease use this BB Collab to join our class meetings. This first week is a trial run – we will see if BB Collaborate works for us, and reassess if necessary.\nPolicies Accessibility The University provides academic accommodations for students with disabilities in accordance with the terms of the Ontario Human Rights Code. For information on services and resources, see http://www.studentlife.utoronto.ca/as\nRespecting Diversity Diverse backgrounds, embodiments, and experiences are essential to the critical thinking endeavor at the heart of higher education. We expect you to be respectful of the many social and cultural differences among us, which may include, but are not limited to: age, cultural background, disability, ethnicity, technical ability, gender identity and presentation, citizenship and immigration status, national origin, race, religious and political beliefs, sex, sexual orientation, and socioeconomic status. Please talk with me right away if you experience disrespect in this class—from any source, including myself—and I will active work to address it.\nCorrespondence As noted above, most communication should take place via Slack. In the case of questions having to do with official University business (requests for extensions, discussion of accommodations, any message involving sensitive personal data) please use my University email, being sure to put \u0026ldquo;HIS393\u0026rdquo; in the subject line. I\u0026rsquo;ll do my best to reply within two working days, though occasionally the delay may be slightly longer. Please allow the full 48 hours to elapse before sending a repeat email.\nAlso: I have an injury-related difficulty co-ordinating action between my left and right hands, which leads to very frequent \u0026amp; distinctive typographical errors (and is also one of the many reasons you don\u0026rsquo;t want to hear me play a musical instrument). In my course materials, assignment comments, and announcements, I strive to eliminate those errors, but in instant messaging I am less attentive, as typing corrections approximately triples my composition time. So… please bear with me.\nAttendance Make every effort to attend each class meeting if you can! Class will begin and (usually) end on time. Please do your best to get to class before the start of the session. Students are expected to attend all meetings unless lockdown-related scheduling issues prevent you. Please let me know in advance if you need to skip class either once or in general.\nPlease silence notirications on your devices during class, so you can focus. Please don\u0026rsquo;t use class time (lecture or lab) to check your email, update your Facebook, read reddit, watch YouTube, make dank memes, seize the means of production (well, that may be allowed under certain circumstances), etc. Such usage is distracting and interferes with learning both for you and for all the other students around you. If I notice you doing this, I will call you out in public. Spend class time on class materials. If another student\u0026rsquo;s activity is distracting, please ask them to stop it (or let me know outside of class).\nTools Course assignments will require you to install software. All of the software we use is free, but it requires a laptop to run. A Chromebook unfortunately will not be sufficient. While it is in principle possible to do all of your assignments on the web or using a very basic text editor, I do not recommend that method, and will not offer technical support. If you don\u0026rsquo;t own a laptop, you should find a way to borrow one, or buy a cheap model on College St to use for the duration of the semester.\nI can offer help with the following\n   Tool On Mac On Windows On Linux     Real Web Browser Firefox and/or Chrome Firefox and/or Chrome Firefox and/or Chrome   Text Editor VSCode VSCode VSCode   Bash Shell Environment Terminal (Built in) Git for Windows or Windows Subsystem for Linux gnome-terminal, qterm, etc   Git Version Control Git for OSX Git for Windows apt-get install git   Github Org Membership Sign up here Sign up here Sign up here   Git Visualization (optional!) gitKraken gitKraken gitKraken   Node and NPM Node Website (guide) Node Website (guide) Node Website (distro instructions)    Please see the Setup page for more details about the particular tools we will be using. YOU WILL ABSOLUTEY NEED TO HAVE THESE TOOLS IN ORDER TO TAKE THE COURSE\nCourse Requirements \u0026amp; Grading The assignments in this course take a wide variety of forms, and for the most part, differ significantly from what you\u0026rsquo;re likely to have encountered in other History courses. If you have little technical experience, or have perhaps ended up in this course by accident (!), you may find some of the work daunting at first. I have done my very best to make the assignments feasible for beginners, but you will likely encounter some difficult moments. I therefore strongly urge you to (1) start early! and (2) persevere through the difficult initial stages. The frustration you experience is, in fact, part of pedagogical method here. You are not expected to become a coding ninja, but learning how to learn is a major component of work in the Digital Humanities.\nBe warned! Marking in this course is unusual!\nGrading in this course is done using a modified point system. The system may seem odd at first, but it has definite advantages for both students and teachers, so don\u0026rsquo;t be intimidated. Instead of receiving a number or letter grade for each assignment, and then getting a weighted sum of those grades as your final mark, you will choose what final mark to try for and then complete the assignments required for that mark. A certain set of assignments is required for a D; for a C, you must complete all of the \u0026ldquo;D\u0026rdquo; assignments plus another set; for a B, all of the C assignments plus some more; and the same goes for an A.\nHere are some more details:\n All Assignments Are Graded Pass/Fail Each assignment you get will include a careful explanation of my expectations. If your work meets those expectations, you get full credit; if not you get no credit. A \u0026lsquo;Passing\u0026rsquo; Mark on Assignments is a B+ In order to get credit for an assignment, you will have to demonstrate a high level of mastery – about the level normally required for a B+. Each Higher Grade Represents a quantum level of additional achievement As you move up the ladder, assignments test more advanced and difficult concepts from the course. If you fail, you can try again You start the semester with 5 \u0026lsquo;retry\u0026rsquo; chits, which you can use to resubmit assignments that have not succeeded. If necessary, you can use all of those chits on a single assignment! Resubmission process must be completed withing 1 week of the return date of the original version. A late assignment costs one \u0026lsquo;retry\u0026rsquo; chit There is no percentage penalty for late work; instead, a late paper will cost you one of your retry opportunities. Second and third tries get fewer comments I will give substantial comments on first tries; additional tries will get less and less fulsome commentary. Pluses and Minuses are determined by participation The only part of your grade which is not determined on a pass/fail basis is the \u0026ldquo;+\u0026rdquo; or \u0026ldquo;-\u0026rdquo; part, which is assigned based on your on and offline participation. See the participation grade sheet for more details.  I know there will be questions! Please don\u0026rsquo;t hesitate to ask them. And here, finally, is the list of assignments. Detailed assignments will be handed out with adequate time to permit completion.\n   Assignment Due Date Skills/Aims A B C D     Class Profile May. 07 version control and collaboration ✔ ✔ ✔ ✔   G \u0026amp; GH Extras   ✔      Zero to Blog Post May. 15 web markup and presentation ✔ ✔ ✔ ✔   Z2B Extras   ✔      A Feast of Ministers May. 22 Programming Concepts: abstraction, loops, data types ✔ ✔ ✔ ✔   Ministers Extras   ✔      DOM and Data May. 29 Programming Concepts: Object structure, substitution, text as data ✔ ✔ ✔    DOM and Data Extras   ✔      Spatial History Jun. 03 API\u0026rsquo;s, GIS ✔ ✔     Oral History Jun. 12 API\u0026rsquo;s, Multimedia Narratives ✔ ✔ ✔ ✔   Project Proposal Jun. 17 Imagine a Digital History Project ✔                Texts While all our readings are online, the following texts are heavily used \u0026amp; may be of interest. They are available in the library or via various online booksellers:\n Moretti, Franco. Graphs, Maps, Trees: Abstract Models for a Literary History Verso, 2005. (Online Access) Geddes et al Toward Spatial Humanities Bloomington: Indiana University Press, 2014. Perks, et al. The Oral History Reader. 2016 (Online Access)  Course Outline Text, Code, and the Web (May. 05) Introducing Digital History, Github, and Markdown Class Synopsis: Introduction to the course\nLecture Videos:\n Playlist for this lecture  Readings: You may want to read some of these as general preparation for this and other history classes:\n W. Caleb McDaniel. “How to Read for History.” W. Caleb McDaniel. Accessed June 27, 2015. http://wcm1.web.rice.edu/howtoread.html. William Cronon, \u0026ldquo;Why the Past Matters\u0026rdquo; Cohen, Daniel J, and Roy Rosenzweig. “Becoming Digital.” In Digital History: A Guide to Gathering, Preserving, and Presenting the Past on the Web. Philadelphia: University of Pennsylvania Press, 2006. http://chnm.gmu.edu/digitalhistory/digitizing/. Also, consider watching the VSCode videos in the class YouTube channel  In-Class Activity: Collaboration on Github, Markdown (May. 07) What the Web Signifies + HTML and CSS Class Synopsis: we all live with the web, but that doesn\u0026rsquo;t mean we think much about how it works and what it\u0026rsquo;s changed. This week\u0026rsquo;s lecture presents some thoughts on the changing nature of the public sphere and the significance of the web\u0026rsquo;s digital and machine-readable nature.\nLecture Videos:\n What the Web signifies HTML 1: Tags and Structures CSS 1: Colors, sizes, Styles VSCode: Intro  Readings:\n Juergen Habermas, \u0026ldquo;The Public Sphere: An Encyclopedia Article\u0026rdquo; (1964) Cohen, Daniel J. “Interchange: The Promise of Digital History” 95, no. 2 (September 1, 2008): 452–91.  In-Class Activity: HTML + CSS Resources: These Mozilla Developer Network guides are inter-related, and the structure is easy to get lost in. Still, this is among the best resources on the web.\n MDN: HTML Basics. Start here. MDN: Getting Started with the Web (HTML Basics, above, is part of this progression. You can skip this for now, but we\u0026rsquo;ll come back to several of these topics later.) MDN: Intro to HTML. This is a great, systematic introduction to the most important HTML elements. There are some interactive exercises, and you can also copy code into files to experiment with in VSCode using the Live Server Preview functionality. MDN: Learn HTML Pathway . There\u0026rsquo;s a ton more here; we will use some of it later on. MDN Reference. Complete reference for all HTML elements, These pages are often very technical, but can be useful when you find yourself stumped   Blogstarter: simple tutorial (one of a zillion alternatives to the MDN pages)  (May. 12) Abundance and Openness One of the key features of the web is its immenseness. We will discuss how this genuinely new circumstance transforms the work of the historian.\nLecture Videos:\n Abundance and Openness CSS 2: The Box Model CSS 3: Layouts with Flex and Grid  Readings:\n  W. Caleb McDaniel. “How to Read for History.” W. Caleb McDaniel. Accessed June 27, 2015. http://wcm1.web.rice.edu/howtoread.html.\n  Council. “Many More than a Million: Building the Digital Environment for the Age of Abundance.” Council on Library and Information Resources. Accessed June 7, 2011. http://www.clir.org/activities/digitalscholar/index.html.\n  Turkel, William J. “Going Digital.” Accessed October 12, 2011. http://williamjturkel.net/2011/03/15/going-digital/.\n  “Learn How Google Works: In Gory Detail.” PPCBlog. Accessed June 30, 2015. http://www.ppcblog.com/how-google-works/.\n  In-Class Activity: More HTML + CSS Data Driven History (May. 14) Distant Reading 1 Franco Moretti\u0026rsquo;s Graphs, Maps, Trees was a manifesto of sorts for a data-driven literary history. We\u0026rsquo;ll discuss the first 2/3s of this book before turning to some practical skills\nReadings:\n Moretti, Franco. Graphs, Maps, Trees: Abstract Models for a Literary History. Verso, 2005 through p. 64, or Moretti, Franco. “Graphs, Maps, Trees.” New Left Review 24 (November 1, 2003): 67–93m and Moretti, Franco. “Graphs, Maps, Trees - 2.” New Left Review 26 (March 1, 2004): 79–103 \u0026ldquo;Basic Text Mining\u0026rdquo; in The Historian\u0026rsquo;s Macroscope: http://www.themacroscope.org/?page%5Fid=362  In-Class Activity: Javascript variables \u0026amp; functions (May. 19) Distant Reading 2: Are Texts Data? More Moretti, and some criticisms\nReadings:\n Moretti, Franco. Graphs, Maps, Trees: Abstract Models for a Literary History. Verso, 2005, ch. 3 to end, or “Graphs, Maps, Trees - 3.” New Left Review 28 (July 1, 2004): 43–63. . Stephen Ramsay, \u0026ldquo;The Hermeneutics of Screwing Around\u0026rdquo; Gibbs, Fred. “Hermeneutics of Data and Historical Writing” Writing History in the Digital Age, March 14, 2012. http://writinghistory.trincoll.edu/data/gibbs-owens-2012-spring/. Marc Dunkelman. “What Data Can\u0026rsquo;t Convey.” Blog. The Chronicle of Higher Education, 19 2014.  In-Class Activity: Javascript objects and DOM manipulation (May. 21) Text as Data, History as Algorithm Note: we may need to push this up We\u0026rsquo;ll explore some more playful extrapolations about the future of data-driven history.\nReadings:\n Gibbs, Fred. “Hermeneutics of Data and Historical Writing.” Writing History in the Digital Age, March 14, 2012. Ramsay, S., \u0026ldquo;The Hermeneutics of Screwing Around\u0026quot;, In K. Kee (Eds.), Pastplay: Teaching and Learning History with Technology (pp. 110-141).  Recommended Readings:\n Seth van Hooland, Ruben Verborgh, and Max De Wilde. “Cleaning Data with OpenRefine.” The Programming Historian.  In-Class Activity: Javascript and the DOM (May. 26) Computing Concepts \u0026amp; Assignment Help Catch-up day Maps, Visualization, and History (May. 28) Spatial History Contemporary \u0026ldquo;Historical GIS\u0026rdquo; and web-based geohistory projects descend from an illustrious lineage of qualitative and quantitative \u0026ldquo;spatial histories\u0026rdquo;. In class today we explore what happens when \u0026ldquo;place\u0026rdquo; takes centre stage in a historical analysis.\nReadings:\n Mark Monmonier, \u0026ldquo;Lying with Maps\u0026rdquo; Statistical Science 20:3, 2005. 215-222. Ben Schmidt, \u0026ldquo;Data narratives and structural histories: Melville, Maury, and American whaling  In-Class Activity: Mapping with Google (Jun. 02) Maps Online Maps and visiaulizations are neat and all, but contemporary web-based geohistory allows historical maps to interact powerfully with other data sources. We\u0026rsquo;ll explore some possibilities!\nReadings:\n \u0026ldquo;Railways and Agriculture in France and Great Britain\u0026rdquo; in Toward Spatial Humanities \u0026ldquo;The Development, Persistence, and Change of Racial Segregation in U.S. Urban Areas, 1880-2010\u0026rdquo; in Toward Spatial Humanities google earth tutorial: https://geospatialhistorian.wordpress.com/lessons/lesson-1/  In-Class Activity: GIS (Jun. 04) Visualization Of course, maps and graphs are in a certain sense part of a much broader field of rhetorical visualizations: attempts to convey quantitative information through pictures in an effort to convince the reader.\nReadings:\n Jefferson Bailey and Lily Pregill, ‘Speak to the Eyes: The History and Practice of Information Visualization’, Art Documentation: Journal of the Art Libraries Society of North America, vol. 33 (2014). Kostiantyn Kucher and Andreas Kerren, ‘Text Visualization Browser: A Visual Survey of Text Visualization Techniques’, (2014) Andy Kirk, 298 Data Visualisation Resources, Visualising Data, (2015).  In-Class Activity: Reading visualizations Oral History, Crowdsourcing, and the Promise of the Public Sphere (Jun. 09) What\u0026rsquo;s Special about Oral History Oral History has a long tradition; we explore its roots and peculiarities, and\nReadings:\n \u0026ldquo;The Voice of the Past\u0026rdquo; and \u0026ldquo;What makes Oral History Different\u0026rdquo; in The Oral History Reader Listen to some part of \u0026ldquo;I can almost see the lights of home\u0026rdquo; http://www.albany.edu/jmmh/vol2no1/lightssoundessay.html  In-Class Activity: Popcorn.js (Jun. 11) Project Planning \u0026amp; Citizen History We\u0026rsquo;ll discuss some project management techniques that should help you with your final proposal\n http://publichistorycommons.org/where-are-the-citizen-historians/  Oral History \u0026amp; Remix Culture Once oral histories migrate to the web, they, like maps, can interact with other kinds of data.\nIf we\u0026rsquo;re ahead of schedule, we\u0026rsquo;ll watch Harlan County USA in class.\nReadings:\n \u0026ldquo;Oral History and the Digital Revolution\u0026rdquo; and \u0026ldquo;Authoring in Sound\u0026rdquo; in The Oral History Reader Gunkel, David J. “Rethinking the Digital Remix: Mash‐ups and the Metaphysics of Sound Recording.” Popular Music and Society 31, no. 4 (October 1, 2008): 489–510. http://resolver.scholarsportal.info/resolve/03007766/v31i0004/489%5Frtdrmatmosr.xml.  Acknowledgments Thanks to Joel Wrossley of the University of Washington and Thomas J Bradley of Algonquin Collegee for help and inspiration in assignments and grading strategy. The \u0026ldquo;Policies\u0026rdquo; section above is taken almost verbatim from Joel\u0026rsquo;s web development course. Various pieces of the course have been inspired by other teachers over the year, and have benefited from feedback within the Github Education Community.\n"
},
{
	"uri": "http://digitalhistory.github.io/assignment/01-html-css/",
	"title": "Assignment 01: Zero to Blog Post",
	"tags": ["assignment"],
	"description": "",
	"content": "Due Date: May 15\nGeneral Description You do not have to become a coder to do well in this course. However, you will have to be willing to explore technical skills that you might not otherwise develop as a humanities scholar. In this second assignment, we\u0026rsquo;ll use one of the web\u0026rsquo;s many excellent self-education platforms to learn the very basics of how web pages work. We\u0026rsquo;ll then extend that knowledge with a set of slightly more advanced programming exercises.\nWeb pages are composed of three components: HTML, CSS, and Javascript. HTML provides the structure and content of a web page; CSS controls the style of presentation; and Javascript permits dynamic modification of both. To explore the web from the inside, you need to be a little bit comfortable in all three.\nIn this assignment you will be introduced to HTML and CSS. The detailed assignment README leads you through a series of skill-building exercises, and provides links to comprehensive tutorial resources. As always, ask for help on Slack; use the new #blog-assignment channel for support/collaboration.\nhere is the assignment repo-creation link!!\nRubric   Passes General Tests\n  Passes Reflection Tests\n    "
},
{
	"uri": "http://digitalhistory.github.io/tools/json-tips/",
	"title": "Quick JSON tips",
	"tags": [],
	"description": "",
	"content": "Just a few words about JSON format. The format of the assignments JSON file will make more sense after we\u0026rsquo;ve learned a little bit of JavaScript (in the next 3 weeks). For this assignment I\u0026rsquo;m not really asking you to understand the format, but you do have to obey the syntax rules or the assignment tests will fail. JSON is a portable data format used for moving data from one source to another. It is what is called a \u0026ldquo;key-value datastore\u0026rdquo; – a JSON file consists of \u0026ldquo;keys\u0026rdquo;, or names, and associated \u0026ldquo;values\u0026rdquo;. The relationship is represented by a : – os a single key-value pair is written as key: value.\nWhat I wrote above is almost true. However, there are a few more rules to follow:\n in JSON, the key name must be enclosed in double quotation marks the value must be either a plain number, the special words true or false, or any sequence of characters surrounded by quotation marks (actually, it\u0026rsquo;s more complicated than that, but for this assignment let\u0026rsquo;s not say any more) key-value pairs are separated from each other by commas the whole JSON object must be surrounded by curly braces  So a real JSON file – the model for what you must produce – will look like this:\n{ \u0026#34;firstName\u0026#34;: \u0026#34;Korra\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;nickName\u0026#34;: \u0026#34;Avatar\u0026#34;, \u0026#34;privateName\u0026#34;: false, \u0026#34;picture\u0026#34;: \u0026#34;https://upload.wikimedia.org/wikipedia/en/d/db/Korra_The_Legend_of_Korra.jpg\u0026#34;, \u0026#34;privatePicture\u0026#34;: false, \u0026#34;email\u0026#34;: \u0026#34;korra_avatar@@utoronto.ca\u0026#34;, \u0026#34;privateEmail\u0026#34;: true, \u0026#34;github\u0026#34;: \u0026#34;korra\u0026#34;, \u0026#34;privateGithub\u0026#34;: false, \u0026#34;superpower\u0026#34; : \u0026#34;Master of All Four Elements\u0026#34;, \u0026#34;academicinterests\u0026#34;: \u0026#34;Comparative Ancient Greek and Chinese Cosmology; Conservation Principles in Physical and Religious Systems\u0026#34; } MOST STUDENTS MAKE SYNTAX ERRORS WHEN THEY ARE STARTING OUT. Please don\u0026rsquo;t be discouraged by this. Just keep on plugging away.\n"
},
{
	"uri": "http://digitalhistory.github.io/tools/setup/",
	"title": "Setup",
	"tags": [],
	"description": "",
	"content": "For the duration of this course, you will need to set up a \u0026ldquo;development environment\u0026rdquo; to do your work. You\u0026rsquo;ll need to download, install, and interact with a group of programs and services that make it possible to do your work. Setting your environment up can be difficult, so be sure to budget some time to do so! Also be aware that these tools will take up significant spae on your laptop and may cause your laptop to slow down somewhat if run simultaneously with\nPlatform Notes I run Arch Linux on my laptop, and have experience with Ubuntu as well. For the purposes of this class, I have installed Windows 10 Education Edition (available free to U of T students here). I wil also attempt to support MacOS as best I can.\n if you have an earlier edition of Windows, some of our tools may not work properly. I encourage you to upgrade to Windows 10 Education Edition, which has good support for modern tools. if you have a Chromebook, you will need to install a full Linux OS in order to do the coursework. Gallium OS and Crouton are the two recommended tools for this, and you can find some instructions here. Newer Chromebooks may support the new Linux Apps Beta installation, but I can\u0026rsquo;t test them. In the bast, Linux on a chromebook has not been easy, and I won\u0026rsquo;t be able to help you. If this seems hard, you may want to think about buying an inexpensive, older laptop and installing an ordinary Linux distribution. Here are two lists of distributions, but the choice is up to you. .  Details Here\u0026rsquo;s the table of tools from the syllabus:\n   Tool On Mac On Windows On Linux     Real Web Browser Firefox and/or Chrome Firefox and/or Chrome Firefox and/or Chrome   Text Editor VSCode VSCode VSCode   Bash Shell Environment Terminal (Built in) Git for Windows or Windows Subsystem for Linux gnome-terminal, qterm, etc   Git Version Control Git for OSX Git for Windows apt-get install git   Slack Community Client Download, Signup Link Client Download, Signup Link Client Download, Signup Link   Github Org Membership Sign up here Sign up here Sign up here   Node and NPM Node Website (guide) Node Website (guide) Node Website (distro instructions)    If you\u0026rsquo;re comfortable exploring and installing software, you can probably get set up quickly by following the links above. Please nonetheless read the detailed instructions below. Things will go smoother if you do!\nWeb browser All of our work will involve interacting with the World Wide Web. Firefox and Chrome are head and shoulders above all other web browsers, and you should install one (or preferably both) of them. In class, I will use Firefox almost exclusively. If you haven\u0026rsquo;t tried Firefox for a while, give the new Quantum version a try\u0026rsquo; it is much, much faster and more stable than its predecessors.\nBoth have highly sophisticated developer tools with which you should familiarize yourself. As you learn more about web design, you\u0026rsquo;ll come to rely on these tools more and more. Follow these links for more about Firefox Dev Tools and Chrome\u0026rsquo;s version.\nOf particular value in both Chrome and Firefox is the \u0026ldquo;Javascript Consoles,\u0026rdquo; accessible from the developer tools: Tools \\rightarrow Web Developer \\rightarrow Console or Menu \\rightarrow More Tools \\rightarrow Developer \\rightarrow Console\nThe Firefox console is a little awkward to use for multi-line programming, so they have also provided a \u0026ldquo;Scratchpad\u0026rdquo; tool (Shift-F4), which I find helpful, though I now use VSCode\u0026rsquo;s Javascript console instead (see \u0026ldquo;Text Editor\u0026rdquo;, below).\nThe other tool I use all the time is \u0026ldquo;inspect element\u0026rdquo;, available by right-clicking on any part of a web page. Both of these tools will prove essential for figuring out why your code isn\u0026rsquo;t working right!\nText Editor If you want to code, you have to write like a coder. This means using a powerful text editor. In this class we use Visual Studio Code. Please follow the download links and install to your computer. There\u0026rsquo;s a separate post about using VSCode – once you\u0026rsquo;ve installed it, navigate there!\nCommand Line Web developers and digital humanists spend a lot of their time in the command-line environment, interacting with their computers through text-based commands instead of a mouse or voice interface. It takes some time to learn to use the command-line, but it\u0026rsquo;s a very powerful and effective way to work once you get used to it. One goal of this course is to help you get comfortable in this environment and learn to take advantage of its power.\nThere are actually many different command-line environments; in this class we use bash, the most popular.\nOn Mac and Linux, bash is built in to the system. In Mac, open the Terminal app to find the bash prompt; in Linux you may have any of several terminal emulators installed, search your program list for \u0026ldquo;term\u0026rdquo; to find yours.\nIn Windows, bash comes with the Git installation – follow the instructions below. Note that very recent editions of Windows 10 come with the \u0026ldquo;Windows Subsystem for Linux (WSL)\u0026quot;, which you can use instead of the Git Bash method.\nIMPORTANT UPDATE: VSCode has an integrated terminal, and it\u0026rsquo;s extremely useful. Windows users will have to do a little bit of work in order to use bash in the integrated terminal. See the excellent terminal configuration instructions online, and be sure to follow the link explaining how to access the user settings screen in VSCode.\nGit, Github, and optionally GitKraken Software development is made vastly easier by \u0026ldquo;version control\u0026rdquo; systems: specialized software that keeps track of the history and current state of files and directories. In the past there were many such systems, but now almost the whole user uses git, and we\u0026rsquo;re all grateful for it.\nInstall Git To install git, follow the download links on the website (see the table above for OS-specific links and instructions). We\u0026rsquo;ll come back to the Git command-line in a minute.\nSign up for Github For many developers – maybe even most of them – using Git is intimately tied to the Github code-sharing website. We\u0026rsquo;ll be using Github for almost all of our work this semester, so it\u0026rsquo;s important that you get familiar with it. If you were present for the first class, you\u0026rsquo;ve already done this. If not, you\u0026rsquo;ll need to sign Up for a Github account. Once you\u0026rsquo;ve done that, you have two choices:\n practice working at the command line go straight to a GUI (\u0026ldquo;Graphical User Interface\u0026rdquo;) that will make working with git a little more comfortable.  I recommend at least trying the command line first.\nCommand-line Setup You need to tell git a little bit about yourself. Start with your email address and your user name. Open your bash shell (Terminal in Mac, git-bash in Windows) and type:\ngit config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;youraddress@ mail.utoronto.ca\u0026#34; git config --global github.user YourGithubId Great – now git knows who you are. If you\u0026rsquo;re feeling ambitious, you can also set up SSH keys so you don\u0026rsquo;t have to type in your password every time you commit to Git.\nVSCode Git VSCode also has an interface to Git and Github. It\u0026rsquo;s pretty powerful and intuitive, so I recommend trying it before installing GitKraken. The instructions are here.\nUsing the GitKraken GUI client Sometimes it\u0026rsquo;s nice to have a backp. GitKraken is an impressive visual tool that also makes it easy to configure all of your information. They have a nice video about SSH integration, which you can watch if you like.\nLearn more There is a somewhat more wordy Git tutorial on this website, which you should read. For now, Install the Github Desktop App which also includes the command-line version of git. You can follow the excellent tutorial in the downloadable git-it application, as well as the Github Desktop documentation. There is also a quite helpful tutorial on The Programming Historian. We\u0026rsquo;ll be discussing Git and Github further in our first class.\nNode and NPM – This is the hardest part! Right now it looks like the drag and drop tool we wanted to make will NOT be ready for this semester :frowning_face:\nInstalling Node is not strictly necessary for the first assignment. If you are having trouble, put this off till next week.\nMost of our programming work will involve Javascript, which runs most of the web. The Node.js environment and its \u0026ldquo;package manager,\u0026rdquo; NPM, are an incredible resource for Javascript development. In fact, Slack, VSCode, and gitKraken are all written as Node applications themselves! Installing the \u0026ldquo;bare\u0026rdquo; versions of node and NPM lets us access some of that power while we work.\nYou can survive this class without installing Node, but without it, you won\u0026rsquo;t be able to run the test suites that accompany all of the assignments. You\u0026rsquo;ll therefore be at a disadvantage in the class, because the tests offer hints about what\u0026rsquo;s wrong with your code.\n In Mac and Linux, the instructions linked to in the table above are probably good enough. In Windows, you may follow all the instructions and then find yourself getting an error (\u0026ldquo;Command not found\u0026rdquo;). If that happens, you may want to try the instructions laid out here, or if you\u0026rsquo;re on Windows 10, you could go crazy and install the amazing Windows Subsystem for Linux, which allows you to work as if your computer had a real Unix operating system like everyone else.  The details of Node and NPM are a little outside the scope of our class, but a colleague at the University of Washington has an excellent introduction in one of his courses.\nSlack Slack is not strictly necessary to do your work, but it is the principal means of conversation for the class. Your activity in our Slack team is part of your participation assessment. So, please sign up for the team using the signup links above, and if you\u0026rsquo;re not familiar with Slack already, read some of the Slack documentation.\n"
},
{
	"uri": "http://digitalhistory.github.io/assignment/00-git/",
	"title": "Assignment 00: Your Class Profile",
	"tags": ["assignment"],
	"description": "",
	"content": "General Description If you\u0026rsquo;re looking for History, Please, follow that link! Your job in this assignment is to tell the class a few things about yourself. In the process we\u0026rsquo;ll think about a few issues related to digital storage of information, including privacy, interpretation of sources, and data vs. knowledge.\nOne of the hardest parts of this course for many people is setting up their working environment. In this assignment you will be need to set up your working environment and then use Git, much as we did in class, but this time manipulating the command line.\nThis may take longer than you think, and it\u0026rsquo;s due soon. Please get started soon by:\n clicking on this link to get access to the assignment following the instructions in the file README.org in your new repository.  "
},
{
	"uri": "http://digitalhistory.github.io/tools/using-vscode/",
	"title": "Using VSCode",
	"tags": [],
	"description": "",
	"content": "Microsoft\u0026rsquo;s Visual Studio Code is an amazing general-purpose code editor. Most people I collaborate with use it as their primary editor, and that will be true in most professional settings you enter. This is the first year we\u0026rsquo;re using it in the class, and I have some high hopes for it.\nAs with any powerful tool, it can take a little while to get comfortable with VSCode. The documentation is excellent, but may sometimes assume more advanced programming skills than you have. The videos are also excellent and recommended.\nI will mostly let you explore on your own, but here are a few important starting points.\nEditor Basics   The editor has 4 main parts. Since each part can itself have lots of parts, this is not as simple as it sounds! From left to right, here are the main areas:\n the activity bar provides you with various tools and ways to switch views the side bar content changes depending on what you\u0026rsquo;ve selected in the activity bar. By default, it shows a file tree listing, like you would find in windows explorer or the Apple Finder. But it can also provide a list of extensions, information about your git status, or information about project tests, among other things. the editor groups are clusters of tabs. Usually a tab will contain a file, but things like the VSCode preferences and live HTML previews also show up in this area the panels near the bottom include the built-in terminal, a list of errors VSCode has found in your files, and other important tools  Also, the blue status bar on the bottom has clickable areas that let you interact with other editor features.\nFinally, it\u0026rsquo;s important to mention the Command Palette. This is a magic bar that opens up in the top center of the screen when you type F1 or Control-Shift-P (Command-Shift-P on a Mac). This gives you rapid access to many, many commands, and we\u0026rsquo;ll use it a lot.\nRead more about the user interface here.\nExtensions There are many, many amazing extensions to VSCode. I\u0026rsquo;ve chosen a small number of them and bundled them into an extension pack. Install it by clicking on the extensions button in the activity bar and typing searching for History Hack Pack. Follow the links in the documentation to learn more about the individual extensions.\n"
},
{
	"uri": "http://digitalhistory.github.io/tools/understanding-popcorn/",
	"title": "Understanding Popcorn",
	"tags": [],
	"description": "",
	"content": "You may find it useful, as you prepare for the next assignment, to read the following post!\nWhat is Popcorn Popcorn is a Javascript \u0026ldquo;library\u0026rdquo; – a small collection of programs – that lets web designers key events in a web page to a time-code in a media file. So essentially, popcorn lets you \u0026ldquo;cue up\u0026rdquo; content ad display it only during fixed periods, while a media element is playing. If you then pause or manually rewind/fast-forward the media element (audio or video), the events will also reset to the appropriate time.\nHTML5 \u0026amp; new possibilities Popcorn works because of new (actually, not so new!) functionality that is provided by the HTML5 standard, and in particular the and  tags. This standard lets you manipulate audio and video directly with HTML and Javascript – something that wasn\u0026rsquo;t possible until about five years ago.\nmulti-media swiss-army knife Popcorn is a sort of Swiss army knife for doing multi-media work in HTML5. There\u0026rsquo;s a main framework – the popcorn library – that provides a simple Javascript interface for talking directly to the media elements. Doing that directly can be hard, so the Popcorn \u0026ldquo;layer\u0026rdquo; makes this work quite a bit easier. This underlying library is used by the Popcorn plugins, which are the elements you will actually be working with. These plugins are fairly simple Javascript programs (the mapping ones are actually kinda complex, and some of the things one wants to do with maps – especially smoothly animate a pan from one location to another – aren\u0026rsquo;t available yet, which is too bad and a bit of a disappointment). It\u0026rsquo;s the plugins that you will actually be working with.\nUsing Popcorn To use popcorn in a web page, you need to define a variable – usually named \u0026lsquo;pop\u0026rsquo; – that creates a popcorn \u0026lsquo;instance\u0026rsquo; on your web page. Then you wrap the variable definition in a simple function that makes sure it gets run when the web page loads.\nPopcorn Plugins Inside the variable definition, you \u0026ldquo;call\u0026rdquo; the plugin function for each event you want to create. The process is very similar to creating timeline events in your timeline – there\u0026rsquo;s a simple syntax that defines a couple of \u0026ldquo;parameters\u0026rdquo; – variables that get \u0026ldquo;passed\u0026rdquo; to the plugin function. The example file defines a bunch of popcorn events; essentially you\u0026rsquo;ll just change the values of these parameters to create your own events. So for instance, here\u0026rsquo;s an example plugin definition:\nlet pop=Popcorn(\u0026#39;#media\u0026#39;) // the leading \u0026#34;.\u0026#34; says \u0026#34;call the `footnote` method of the new `pop` object\u0026#34; .footnote({\u0026#34;id\u0026#34;:\u0026#34;intro\u0026#34;,\u0026#34;start\u0026#34;:6,\u0026#34;end\u0026#34;:16,\u0026#34;target\u0026#34;:\u0026#34;popcorn-container\u0026#34;,\u0026#34;text\u0026#34;:\u0026#34;Edna begins by talking about her father, Daniel Kelly (1861-1953). The US census of 1880 for Elgin, IL, gives Daniel’s occupation as blacksmith. In the 1900 census of Port Angeles his occupation is bridge builder; in the 1920 census of Eden Valley it is general farming; in the 1920 census of Eden Valley it is dairy farming. In the 1930 census of Port Angeles he is retired.\u0026#34;}) This is one of the plugins you can use if you like – the footnote plugin. It has just five parameters:\n id – this is for your benefit so you can keep track of what you\u0026rsquo;re doing. Use it, but don\u0026rsquo;t worry about it too much start – when to start playing the element. This is in SECONDS – so forinstance if you want to it to start playing at 6:34, the value would be 394. Keep a calculator on hand. Note that the value is not in quotation marks – that\u0026rsquo;s significant. end – the end time target – where to pop up the event. Don\u0026rsquo;t change this, or your events will show up in the wrong place. With popcorn you can put the new events anywhere on the page, and change any existing element. It\u0026rsquo;s really powerful; we\u0026rsquo;re just brushing the tip of the iceberg. text – this is the text you\u0026rsquo;re going to make appear. This is where your own contribution really comes in.  Available plugins I\u0026rsquo;ve provided examples for as many plugins as I could. All should work as-is:\n Footnote you\u0026rsquo;ve just seen Figure lets you display an image. This adds a new parameter – \u0026lsquo;src\u0026rsquo; – which let you select an image and also link that image to another location, if you so wish. (I haven\u0026rsquo;t tested the linking os it may not be implemented yet). Google Maps Creates a google map. There are a bunch of new parameters here, see our source code for more info. Leaflet Maps offers a slightly more familiar interface, though the problem with slow tile loading still persists. Markdown allows you to add markdown annotations Wikipedia will add the first few paragraphs from a Wikipedia page. Webpage will embed a webpage in an iframe  (The links in this section take you to the plugin sourcecode, which will usually be a directory with 4 files. The html file contains a working example of the plugin code. The js file is the sourcecode itself, and usually starts off with a useful explanation of how the plugin works. The last two files are provided for testing purposes, you shouldn\u0026rsquo;t need to have use them.)\nYou can explore the rest of the plugins as you wish; you may need to add some extra columns to your spreadsheet to get them to work. In particular, Timeline adds some interesting options, and I like wordirver, but it isn\u0026rsquo;t currently behaving properly and needs to be rewritten (don\u0026rsquo;t have time right now!)\nMedia Elements Popcorn works by keying commands to a media element – that is, an HTML tag \u0026lt;audio\u0026gt; or \u0026lt;video\u0026gt;. Here\u0026rsquo;s our sample audio tag:\n\u0026lt;!-- this is our audio div. It\u0026#39;s really important --\u0026gt; \u0026lt;audio id=\u0026#34;media\u0026#34; controls=\u0026#34;controls\u0026#34;\u0026gt; \u0026lt;source src=\u0026#34;media/audio/editededna.mp3\u0026#34; type=\u0026#34;audio/mp3\u0026#34; /\u0026gt; \u0026lt;/audio\u0026gt; I just want you to note three things about this code:\n See how the tag has two attributes. The id is essential, because when we defined \u0026ldquo;pop\u0026rdquo; we told it to look for the element called \u0026ldquo;id\u0026rdquo;. \u0026ldquo;controls\u0026rdquo; is also important – it ensures that you can pause, rewind, etc. in the browser\u0026rsquo;s buiilt-in media player. The actual file that will be used by the \u0026ldquo;audio\u0026rdquo; element is not defined in the tag itself, but within it – in the tags.  Popcorn Players Our default example plays a local media file from a statically-defined media element. I really hope you will choose to follow this method, though a web-based media element works just as well. However, if you need to, you can use Vimeo and Youtube videos, as well as Soundcloud audio. To do that, you will need to rewrite the project HTML a bit. So, instead of this,\n\u0026lt;!-- this is our audio element. It holds the audio file. --\u0026gt; \u0026lt;audio id=\u0026#34;media\u0026#34; controls=\u0026#34;controls\u0026#34;\u0026gt; \u0026lt;!-- Make sure this points to the actual mp3 file you are analyzing --\u0026gt; \u0026lt;source src=\u0026#34;https://storycorpsorg-staging.s3.amazonaws.com/uploads/walsh2-1.mp3\u0026#34; type=\u0026#34;audio/mp3\u0026#34; /\u0026gt; \u0026lt;/audio\u0026gt; You will want something like this:\n\u0026lt;section id=#media\u0026gt;\u0026lt;/section\u0026gt; Then, you\u0026rsquo;ll need to modify line 6 of popcorn-data-from-google.js:\npop = Popcorn(\u0026#34;#media\u0026#34;) and use something like one of the models below:\nconst pop = Popcorn.smart( \u0026#34;#media\u0026#34;, \u0026#34;http://www.youtube.com/watch?v=9oar9glUCL0\u0026#34; ); // const pop = Popcorn.smart( \u0026#34;#media\u0026#34;, \u0026#39;https://vimeo.com/267718090\u0026#39; ); // const = Popcorn.smart( \u0026#34;#media\u0026#34;, \u0026#39;https://soundcloud.com/corbanbrook/leaving-on-a-spaceship\u0026#39; ); the soundcloud player is a little buggy – it emits a loud crackle when you start playback, and the \u0026lsquo;play\u0026rsquo; button needs to be pushed twice. Also, there are no built-in volume controls (!). In fact, we have to add a little bit of hacky code to get the player to work at all. So you\u0026rsquo;ll need something like this, on say line 22 (ish):\npop.media.controls = true; pop.unmute(); pop.media.volume = 65; set the volume to whatever level feels right as the user won\u0026rsquo;t be able to change it.\nGetting Help If you end up confused, there are a couple of useful popcorn resources on the web.\n alas, most of the old resources have been taken down in the past 2 years. All that\u0026rsquo;s really left is the Github repo and the docs website, and both have been derelict for about 6 months. You can see my changes in my main pull request, and browse through the issues I\u0026rsquo;ve been submitting, especially number 80.  CSS and Popcorn display issues In its day, Popcorn was designed for cutting-edge features that were just making their way to ghe browser. Now, no so much: the framework fails to take advantage of many of the new features of CSS3, and plugins are full of ugly, hard-coded CSS that can be hard to deal with. I have started to fix this issue, and in the plugins you are likely to use, much of the ugliest CSS has been stripped out. Instead, most plugins now neatly generate their own boxes (usually a `div` element) with an id and a class that you can set in CSS.\nFor the assignment, I have set the popcorn container element to display: flex, which is a pretty good default choice. Most events will attempt to set a width of 30em, or about the width of 30 characters, and then grow or shrink if they have to. This default works well for most kinds of information, but not for all, so I\u0026rsquo;ve provided some examples of how to modify the default size. You can set the element id for most plugins with the id column of the spreadsheet, and most plugins now add a class like PLLUGINNAME-plugin to their enclosing element.\nGenerating Events with Tabletop In class, we hand-coded our popcorn events. This is not particularly onerous but is a little clumsy. You are absolutely welcome to use this method for the assignment if you like; but there is another way. the tabletop.js library lets you access information from a Google Spreadsheet and plug it into your scripts. I find it very handy for this kind of work (we could have used it for the mapping expercise, too). In this way, you can create your popcorn events in the leisure of a Google Spreadsheet, and have the events automatically generated for you whenbever your web page loads.\nThe process is described in the tabletop repository, and you are strongly advised to read it carefully. If you want to use the code I\u0026rsquo;ve provided for you in popcorn-data-with-google.js, you will need to copy this spreadsheet, then publish it as described in the tabletop instructions (see above), and also copy the new URL into the appropriate place in popcorn-data-with-google.js. Then code your popcorn in the spreadsheet; unless you make any syntax errors, the technical work should now be done. In the spreadsheet it is somewhat easier, for instance, to arange your events in sequence, etc.\n"
},
{
	"uri": "http://digitalhistory.github.io/tools/js-resources-tools/",
	"title": "Javascript: Resources and Tools",
	"tags": [],
	"description": "",
	"content": "Resources There are many, many excellent JavScript resources on the web. I strongly recommend the MDN JavaScript Learning Pathway. I also have a very high opinion of Eloquent Javascript, but in past years students have often found it somewhat difficult. However, it rewards careful study, teaches excellent habits, and encourages creative thinking while coding. Both MDN and EJ have built-in JS Consoles forexperimenting with code (see below).\nMDN also has a more advanced guide to JavaScript which starts with this \u0026ldquo;reintroduction\u0026rdquo;. This can be worth consulting if you want more information.\nConsoles and Playgrounds Sometimes you will want to try out your code and test out your ideas before putting them in a permanent file. There are various tools for this.\n Browser consoles and scratchpads Your browser has a built-in \u0026ldquo;console\u0026rdquo; where you can enter javascript commands and see their output. See the Setup doc for more info. node console Unfortunately, VSCode does not have a built-in javascript console. However, you can easily create one in a terminal window by running the command node. Exit by typing Control-d or Control-c Control-c or .exit. VSCode Debugger VSCode has an excellent debugger. However, debugging is a complicated subject. If you want to try to use these tools, read the docs. VSCode extensions There are many excellent VSCode extensions for JavaScript. You can experiment with quokka, for instance. Online Playgrounds These can be fantastic resources, but they make more sense for web-based programming. We may discuss these later in the course.  "
},
{
	"uri": "http://digitalhistory.github.io/assignment/participation/",
	"title": "Participation",
	"tags": [],
	"description": "",
	"content": "As described in the syllabus, I use your participation mark to determine the \u0026ldquo;-/null/+\u0026rdquo; part of your grade. Let me explain a little more explicitly how this works.\nThe System It\u0026rsquo;s simple. Suppose you successfully complete all the main assignments, but decide not to write a Project Proposal. Congratulations! You have qualified for a B. But what kind of a B?\n   If your class participation was: You get a: Which ROSI will show as:     Poor B- 72   Satisfactory B 75   Excellent B+ 78    Similarly, perhaps you were only able to complete the Git \u0026amp; Github, HTML \u0026amp; CSS, Javascript and Oral History. Oops! You\u0026rsquo;re going to get a C. Like your somewhat happier classmate, your final grade will be assigned thus:\n   If your class participation was: You get a: Which ROSI will show as:     Poor C- 62   Satisfactory C 65   Excellent C+ 68    But Note!\nA+ is a special grade. Suppose you complete all the assignments satisfactorily, including the additional \u0026ldquo;A only\u0026rdquo; sections of the relevant assignments. Wow! You get an A, great. But… do you get an A+?\n   If your class participation was: You get an: Which ROSI will show as:     Poor A- 83   Satisfactory A 88   Excellent DEPENDS DEPENDS    Even if your participation was excellent, you will only receive an A+ if your work was consistently excellent and occasionally brilliant. So, if you successfully complete all the assignments (great!), and also are a great class participant (thanks!), then I\u0026rsquo;ll look over all your work and make a value judgment about whether you deserve this rare and precious grade.\nFinal Note for 2018 – this year, there isn\u0026rsquo;t really a \u0026ldquo;D\u0026rdquo; grade. To pass the course you basically have to get a C. In rare cases I will consider lowering the grading criteria for the \u0026ldquo;Oral History\u0026rdquo; assignment to permit a student to scrape through the course.\nParticipation Criteria Your participation mark is a combination of in-class and online participation.\nIn the Classroom But what makes for good class participation? You might want to start by reading How to discuss a book for history, which has lots of helpful suggestions. Really, please read it – it\u0026rsquo;s illuminating. But, meanwhile, here are some hints:\n Show up for class It\u0026rsquo;s hard to discuss when you\u0026rsquo;re not here. Do the Readings It\u0026rsquo;s hard to discuss what you haven\u0026rsquo;t read. I will try hard not to assign too much reading; in return, please try to read it. Be Courteous Treat your classmates with respect, even when your opinions differ fiercely. Refrain from interrupting others, notice when others have been waiting \u0026amp; let them speak first, and so on. Don\u0026rsquo;t shut other people down, and frame your comments in a way that invites further discussion. Listen Pay careful attention when your classmates are speaking; if their ideas seem a little unclear, try to fill in the gaps, either by thinking silently, or by asking friendly, clarifying questions. Try to think about how their positions relate to yours, and, especially, whether you should perhaps change your mind a little based on what they have to say. Be Clear think about the readings before you come to class, so that your opinions are well-formed. Be Brave It can be intimidating to speak in class, especially if you have found the readings or the lecture confusing. But you will almost never be alone. If one person is confused, others likely are too. Have the courage to speak up – everyone in the room is likely to thank you. If you are extremely shy in person, then come speak to me and we can try to work out a solution for you. Participate in Group work Occasionally we will break up into small groups. The same princples apply to group work – I\u0026rsquo;ll be paying attention.  Online Our Slack workspace is also a great way to participate. Contribute to the class in Slack by asking good questions, helping out your classmates, and correcting any professorial errors from lecture!\nFinally If you can do all of these things consistently, you\u0026rsquo;re likely to earn a \u0026ldquo;+\u0026rdquo;. If you\u0026rsquo;re not sure how you\u0026rsquo;re doing, come ask me in a couple of weeks and I\u0026rsquo;ll give you some feedback.\n"
},
{
	"uri": "http://digitalhistory.github.io/tools/navigating-command-line/",
	"title": "Navigating at the Command Line",
	"tags": [],
	"description": "",
	"content": "The Programming Historian link below is excellent. Having some trouble with screenshots ATM, will fix soon as I can reload my desktop – but for next few hours pls refer to the PH link for images!\nOne common issue for people new to the command line is that it can be tough to understand the notion of location in the filesystem. Most ordinary users interact with their filesystems through the so-called GUI layer – the graphical interface of windows. Often the user-accessible files are more or less restyricted to special directories (or \u0026ldquo;folders\u0026rdquo;) with meaningful names like Desktop, MyDocuments, etc. However, once you start working at the command line this convenient feature can become something of a curse. It\u0026rsquo;s important to recognize that these special locations are just part of a complex, hierarchical filesystem – a branching tree of directories and files, on which your operating system relies in many ways. You will need to learn to navigate that filesystem, not from the GUI, but from the command line.\nWhen you first start using the command line, it often feels (a) confusing and (b) somehow primitive or over-simple. The command line is, in fact, a sophisticated and incredibly efficient way to interact with the filesystem – but you need to learn your way around it first. In this class we won\u0026rsquo;t discuss the wonderful world of shell scripting (see below for guides to scripting); instead, I just want you to learn a few very basic commands to help you move around.\nNavigation The file system is a \u0026ldquo;branching tree\u0026rdquo; of files and folders. At the top (or bottom, depending on how you imagine things) of the tree is the \u0026ldquo;root\u0026rdquo;. In bash, we represent this as /. Every folder has a path that starts with / and proceeds down the file hierarchy. So, for instance, my global git configuration is located at /home/matt/.gitconfig. / is the root. /home/ is where all user files can be found. /home/matt/ contains all my user files. /home/matt/.gitconfig identifies the specific file I\u0026rsquo;m looking for.\nYour file explorer will represent this tree for you visually; you can also picture it schematically, as is done e.g. in the following image: We can also explore from the command line. Here are a few basic commands to learn for this purpose. [ Note: in the screenshots below, my command prompt is heavily customized and includes some extra information. Most notably, it tells me when I am in a git repository and gives me the name of the current git branch. You can experiment with changing your bash prompt in the ~/.bashrc file that controls many features of the\npwd pwd is short for \u0026ldquo;print working directory\u0026rdquo;, and will show you where you are in the file system. ls ls will list the contents of a directory. With no further arguments it will list the directory you\u0026rsquo;re currently in, but you can ask it to list some other directory too. Here are some examples. Note the \u0026ldquo;switches\u0026rdquo; -l and -la. Switches give further instructions to the command. In this case -l means \u0026ldquo;long\u0026rdquo; while -a is short for \u0026ldquo;all\u0026rdquo;. You can see in the screenshot below what the effect is. cd Short for \u0026ldquo;change directory\u0026rdquo;, cd allows you to move through the filesystem.\n cd someDirectoryName will move you into the subdirectory \u0026ldquo;someDirectoryName\u0026rdquo; of your current directory. cd with no arguments, or \u0026ldquo;cd ~ \u0026ldquo;, will drop you back into your home directory (this is helpful if you get lost somehow). At the command line, the tilde (~) is short for \u0026ldquo;home directory\u0026rdquo;, so you can use it anywhere instead of typing out your whole whome directory name. cd .. or cd ../ will move you \u0026ldquo;up\u0026rdquo; one level in the filesystem – so if you are currently in /home/matt/digitalHistory, executing cd .. will move you to /home/matt/.    cat and less Sometimes you want to look at the contents of a file. cat and less are two ways to do so. cat will print the contents of the file directly to your terminal window. less will create a simple interface that you can use to scroll through a longer file using a keyboard interface. mkdir and touch mkdir will create a new directory, while touch will create a new (empty) file.\nmkdir some-directory-name touch some-directory-name/somefile.txt These commands will create the file somefile.txt in the folder some-directory-name, inside the current working directory.\nArrow Keys and Tab Expansion often we make mistakes typing or are unsure of spelling, etc. Two kinds of shortcuts make for huge time savings:\n arrow keys can be used to navigate through your previous commands – typing ↑ will reproduce your previous command, allowing you to correct any errors you might have made the last time you typed out some complex command and made a small error. Each time you type an ↑, you will move one command up in the command history. To get back down, type ↓. you can type TAB part way through a command to get a list of possible completions. If there\u0026rsquo;s only one possible command that starts with what you\u0026rsquo;ve typed so far, bash will complete it for you. Similarly, typing part of a file or directory name after a command has been entered will usually get you a list of possible completions. Try it a few times and you\u0026rsquo;ll see how much time it saves.  Learn More OK, that\u0026rsquo;s all for now, hopefully this helps you navigate around your projects. I may add to this guide as we go through the semester, but here are some further guides.\n this introduction is quite clear and simple the programming historian has a great guide too the TLDP guide introduced generations of programmers to bash scripting, and is still a useful reference point  "
},
{
	"uri": "http://digitalhistory.github.io/tools/node-dependencies/",
	"title": "Installing Node Dependencies",
	"tags": [],
	"description": "",
	"content": "Node.js is an exquisite piece of programming infrastructure. One of its main features is support for developer-defined dependencies. As a programmer – or in my case, as a teacher – you can inform the underlying node package manager (npm) that your project \u0026ldquo;depends\u0026rdquo; on some group of other projects. This allows programmers to build constantly on each other\u0026rsquo;s work.\nIn our assignments, node dependencies are mostly used to enable the tests, whose main function is to help you figure out whether you\u0026rsquo;ve done the assignments correctly. Installing node dependencies is pretty simple, but can be confusing if you\u0026rsquo;re completely new to node, the command line, and programming in general. Here are the (very simple!) instructions:\n Install Node and NPM as per this section of the \u0026ldquo;Setup\u0026rdquo; instructions From the command line, navigate to the root directory of your repository using cd as per the navigation help page From the root directory of your repository,type the following command into the terminal/git-bash prompt: npm install  You should see some complex output from the command, after which your node dependencies will be installed. You can actually see the installed files by browsing the contents of the node_modules directory, which should now be present in your working directory.\nOnce the dependencies are installed, you should be able to run the node tests with npm test (issued from the same directory, that is, the root directory of your repository). If you\u0026rsquo;ve installed the VSCode extentions, ou\nI hope that helps!\n"
},
{
	"uri": "http://digitalhistory.github.io/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Digital History This is the website for His 393, Digital History, at the University of Toronto. All of the course materials are described in detail in the links on the sidebar; you probably want to start with the syllabus. Tables of contents for long pages can be access via the odd list icon at the top left of the page menu.\nEnjoy the class!\n"
},
{
	"uri": "http://digitalhistory.github.io/_header/",
	"title": "header",
	"tags": [],
	"description": "",
	"content": "HIS 393 Digital History\n"
},
{
	"uri": "http://digitalhistory.github.io/slides/01-01-intro-digital-history/",
	"title": "01-01: Introduction to Digital History",
	"tags": [],
	"description": "",
	"content": " 01-01: Introduction to Digital History .underline { text-decoration: underline; }   /* Position computations of klipse get confused by reveal.js's scaling. Hence, scaling should be disabled with this code. Fix height of code area with scrollbar (use overflow instead of overflow-y to restore CodeMirror setting afterwards): */ .reveal section pre { max-height: 70vh; height: auto; overflow: auto; } /* Reset some reveal.js and oer-reveal settings: */ .reveal section pre .CodeMirror pre { font-size: 2em; box-shadow: none; width: auto; padding: 0.4em; display: block; overflow: visible; } /* Enlarge cursor: */ .CodeMirror-cursor { border-left: 3px solid black; }   window.klipse_settings = { selector: '.language-klipse', selector_eval_html: '.language-klipse-html', selector_eval_js: '.language-klipse-javascript', selector_eval_js: '.language-klipse-js', selector_eval_php: '.language-klipse-php', selector_eval_python_client: '.language-klipse-python', selector_eval_ruby: '.language-klipse-ruby', selector_eval_scheme: '.language-klipse-scheme', selector_sql: '.language-klipse-sql' };   if( window.location.search.match( /print-pdf/gi ) ) { var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = '../../vendor/reveal//css/print/pdf.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); }    01-01: Introduction to Digital History Matt Price  (view this presentation in another theme: Black (default) - White - League - Sky - Beige - Simple Serif - Blood - Night - Moon - Solarized )\t--   About Me    Historian of Science \u0026amp; Technology Interdisciplinary Background Interest in \"Engaged\" scholarship     Why Care about History? Why care about the Digital Age?  History  The World Out of Which We Come   The past is the world out of which we have come, the multitude of events and experiences that have shaped our conscious selves and the social worlds we inhabit. To understand how and why we live as we do, we cannot avoid appealing to the past to explain how and why we got to be this way. ([CrononWhyMatters2000], p. 4)    Not just Fact but Story   It is remembering and storytelling we care about, not the raw past, because only by being perennially resurrected in the mind of each new generation does the past become meaningful. Only this does it become a living memory which in turn gives meaning to our present lives by reminding us ho we are\u0026#x2013;as individuals, as a state and nation, as a people. (Ibid., p. 13)    A Digital Age  Opportunity  masses of data tremendous participation    Challenge  filtering data trusting writers lack of collective experience    Our Project  Understand how to write history for a digital age!   what can we preserve? what opportunities are there for change? what has been done already?      Class Method  For most of us, DH is experimental.  no canon minimal technical background unknown professional plans    Systematic inquiry won't get us where we want to go  Hackers not Computer scientists! Basic Concepts \u0026amp; Practical Tools, as a foundation for self-guided further learning Trial \u0026amp; Error, frustration management   (cf. constructivist pedagogy, e.g.)   Intro to toolbox but tools keep changing therefore: simple coding, basic plumbing: code editors,version control, web dev absolute basics      Syllabus  Some Highlights  Participate  come to class unless you absolutely cannot! watch these lectures! join Slack ask questions help your classmates    Be Willing to Try  get outside your comfort zone if you don't get it right, try again read the assignments \u0026amp; follow instructions \u0026amp; feedback carefully    Use your Computer  we will code almost every class but not chat/social media    Find the Fun  every challenge is an opportunity    4 blocks!  Text and Code  Aims:  understand how the web works and what it changes about the practice of history Intro to our tools \u0026amp; infrastructure (code editor, version control, build tools) Intro to HTML and CSS (web page structure and appearance)     Data Driven History  Aims:  understand \"Distant Reading\" and the problems of textual abundance experiment with treating texts as data distinguish between \"meaning\" and \"information\" introduction to Javascript (variables, functions, control structures)     Maps \u0026amp; Visualization  Aims:  understanding geohistory GIS basics work with web-based GIS     Oral History \u0026amp; Crowdsourcing  Aims:  work with non-textual media appreciate the power and perils of crowdsourced \u0026amp; amateur history plan your own professional or independent future as a digital historian     Objectives  At the end of this course, you should:  be able to describe to others what the phrase \"digital humanities\" means to you. be able to frame a coherent and nuanced argument of your own about the value of DH methods to the field of history be able to clearly state and defend a position regarding \"engaged scholarship\", and articulate the relationship of your argument to the contemporary media landscape have a basic understanding of markup languages and their use in DH be able to read and navigate basic Javascript programs be able to make compelling use of media materials such as audio, video, and animation in historical arguments understand how to create simple historical maps, and have an opinion about the value of GIS in historical argument   Weird Grading Method  you choose what grade you want to get do the assignments required for that grade to \"pass\" an assignment, you need to achieve a high standard \u0026#x2013; approx. B+ if you fail the first time, you have a chance to try again +/- set by participation   Assignments     Assignment Due Date Skills/Aims A B C D     Class Profile May. 07 version control and collaboration \u0026#10004; \u0026#10004; \u0026#10004; \u0026#10004;   G \u0026amp; GH Extras \u0026#xa0; \u0026#xa0; \u0026#10004; \u0026#xa0; \u0026#xa0; \u0026#xa0;   Zero to Blog Post May. 15 web markup and presentation \u0026#10004; \u0026#10004; \u0026#10004; \u0026#10004;   Z2B Extras \u0026#xa0; \u0026#xa0; \u0026#10004; \u0026#xa0; \u0026#xa0; \u0026#xa0;   A Feast of Ministers May. 22 Programming Concepts: abstraction, loops, data types \u0026#10004; \u0026#10004; \u0026#10004; \u0026#10004;   Ministers Extras \u0026#xa0; \u0026#xa0; \u0026#10004; \u0026#xa0; \u0026#xa0; \u0026#xa0;   DOM and Data May. 29 Programming Concepts: Object structure, substitution, text as data \u0026#10004; \u0026#10004; \u0026#10004; \u0026#xa0;   DOM and Data Extras \u0026#xa0; \u0026#xa0; \u0026#10004; \u0026#xa0; \u0026#xa0; \u0026#xa0;   Spatial History Jun. 03 API's, GIS \u0026#10004; \u0026#10004; \u0026#xa0; \u0026#xa0;   Oral History Jun. 12 API's, Multimedia Narratives \u0026#10004; \u0026#10004; \u0026#10004; \u0026#10004;   Project Proposal Jun. 17 Imagine a Digital History Project \u0026#10004; \u0026#xa0; \u0026#xa0; \u0026#xa0;     \u0026#xa0; \u0026#xa0; \u0026#xa0; \u0026#xa0; \u0026#xa0; \u0026#xa0; \u0026#xa0;     Assignments, put another way  To Pass  Class Profile Zero to Blog Post A Feast of Ministers Oral History    To Get a C  Class Profile Zero to Blog Post A Feast of Ministers DOM and Data Oral History    To Get a B  Class Profile Zero to Blog Post A Feast of Ministers DOM and Data Spatial History Oral History    To Get an A  Class Profile Zero to Blog Post A Feast of Ministers DOM and Data Spatial History Oral History Project Proposal All Reflection Questions    Participation  come every time (unless you really can't)! pay attention and ask questions! no email/youtube/reddit/facebook etc etc etc etc participate in Slack!   Assignments 0 and 1!  Check the website for details Both due soon! Hoping to make some improvements to make your lives a little easier \u0026#x2013; hence the delay     Before class  Get yourself a Github user account Join the \"Github Classroom\" Join Slack (see separate invite in course announcements)     Intros  In Slack #general channel, introduce yourself \u0026#x2013; name, year, majors, interest in class; also something else about yourself that will help us all remember tha that name on the screen is a real live person :-)    Take some time for this one!  in #project-fantasies channel, imagine a Digital History project. Then see what other people have proposed and comment on their ideas, remembering to thread your comments using the \"start a thread\" icon (a bit like this: 💬) which you will find by the original idea post.     Bibliography [CrononWhyMatters2000] Cronon, Why the Past Matters, The Wisconsin Magazine of History, 84(1), 2-13 (2000).         // Full list of configuration options available here: // https://github.com/hakimel/reveal.js#configuration Reveal.initialize({ controls: true, progress: true, history: true, center: false, slideNumber: 'c', rollingLinks: false, keyboard: true, mouseWheel: false, fragmentInURL: false, hashOneBasedIndex: false, pdfSeparateFragments: true, overview: true, width: \"100%\", height: \"100%\", margin: 0.10, minScale: 1.00, maxScale: 1.00, theme: Reveal.getQueryHash().theme, // available themes are in /css/theme transition: Reveal.getQueryHash().transition || 'convex', // see README of reveal.js for options transitionSpeed: 'default', // Optional libraries used to extend reveal.js dependencies: [ {src: '../../vendor/reveal//plugin/klipse_reveal.js'}, { src: '../../vendor/reveal//lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../vendor/reveal//plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../vendor/reveal//plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '../../vendor/reveal//plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }] });    /* Recompute layout upon changes by klipse. Code fragment from asciidoctor-revealjs-klipse by Timothy Pratley under GPLv3: https://github.com/timothypratley/asciidoctor-revealjs-klipse/blob/master/docs/docinfo-footer.html */ Reveal.addEventListener( 'slidechanged', function( event ) { window.dispatchEvent( new Event('resize') ); } );    "
},
{
	"uri": "http://digitalhistory.github.io/slides/01-02-git/",
	"title": "01-02: Git and Github",
	"tags": [],
	"description": "",
	"content": " 01-02: Git and Github .underline { text-decoration: underline; }   /* Position computations of klipse get confused by reveal.js's scaling. Hence, scaling should be disabled with this code. Fix height of code area with scrollbar (use overflow instead of overflow-y to restore CodeMirror setting afterwards): */ .reveal section pre { max-height: 70vh; height: auto; overflow: auto; } /* Reset some reveal.js and oer-reveal settings: */ .reveal section pre .CodeMirror pre { font-size: 2em; box-shadow: none; width: auto; padding: 0.4em; display: block; overflow: visible; } /* Enlarge cursor: */ .CodeMirror-cursor { border-left: 3px solid black; }   window.klipse_settings = { selector: '.language-klipse', selector_eval_html: '.language-klipse-html', selector_eval_js: '.language-klipse-javascript', selector_eval_js: '.language-klipse-js', selector_eval_php: '.language-klipse-php', selector_eval_python_client: '.language-klipse-python', selector_eval_ruby: '.language-klipse-ruby', selector_eval_scheme: '.language-klipse-scheme', selector_sql: '.language-klipse-sql' };   if( window.location.search.match( /print-pdf/gi ) ) { var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = '../../vendor/reveal//css/print/pdf.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); }    01-02: Git and Github Matt Price  (view this presentation in another theme: Black (default) - White - League - Sky - Beige - Simple Serif - Blood - Night - Moon - Solarized )\t--   Git!    \"Track Changes\" on steroids \"Version Control\" software optimized for collaboration essential infrastructure for almost all programming projects     Github!    git-based code-sharing site largest in history owned by Microsoft ☹ where we (and most open-source projects) work!     In Our Class  fun git practice git concepts ensure setup is going well assignment/process overview If you don't have a github account yet, get one now!     Git Practice: History, Please!  simple command-line/graphical application crowd-sourced by students from this class many problems to fix \u0026amp; improvements to make we'll try to make some progress   History, Please  Take out your Laptop!  Navigate to the History-Please repository Let's explore code, issues, and pulls   Activity  Divide into groups (we'll do this in class)  trends page adders events page adders copyeditors issue triagers  Find at least one partner (if you're very confident, help someone else) Scroll down to the contributing instructions Additional tips:  reference issues \u0026amp; pull requests by number, e.g. #58. Do this whenever you create a pull that fixes an issue, especially. Give your PR's meaningful titles and helpful,extensive descriptions @mention me (@titaniumbones) when you think you have fixed an issue, or want my input (won't get back to you today though!)          // Full list of configuration options available here: // https://github.com/hakimel/reveal.js#configuration Reveal.initialize({ controls: true, progress: true, history: true, center: false, slideNumber: 'c', rollingLinks: false, keyboard: true, mouseWheel: false, fragmentInURL: false, hashOneBasedIndex: false, pdfSeparateFragments: true, overview: true, width: \"100%\", height: \"100%\", margin: 0.10, minScale: 1.00, maxScale: 1.00, theme: Reveal.getQueryHash().theme, // available themes are in /css/theme transition: Reveal.getQueryHash().transition || 'convex', // see README of reveal.js for options transitionSpeed: 'default', // Optional libraries used to extend reveal.js dependencies: [ {src: '../../vendor/reveal//plugin/klipse_reveal.js'}, { src: '../../vendor/reveal//lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../vendor/reveal//plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../vendor/reveal//plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '../../vendor/reveal//plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }] });    /* Recompute layout upon changes by klipse. Code fragment from asciidoctor-revealjs-klipse by Timothy Pratley under GPLv3: https://github.com/timothypratley/asciidoctor-revealjs-klipse/blob/master/docs/docinfo-footer.html */ Reveal.addEventListener( 'slidechanged', function( event ) { window.dispatchEvent( new Event('resize') ); } );    "
},
{
	"uri": "http://digitalhistory.github.io/slides/02-02-more-git/",
	"title": "02-01: Git Concepts",
	"tags": [],
	"description": "",
	"content": " 02-01: Git Concepts .underline { text-decoration: underline; }   if( window.location.search.match( /print-pdf/gi ) ) { var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = '../../vendor/reveal//css/print/pdf.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); }    02-01: Git Concepts Matt Price  (view this presentation in another theme: Black (default) - White - League - Sky - Beige - Simple Serif - Blood - Night - Moon - Solarized )\t--   In this section  collaboration remotes branches commits worktree vs. repository     Collaboration      Concepts: Remote      Classroom Network                Branches     git history is a tree, not a straight line nothing is ever lost!! can be hard to figure out!         Concepts: Commit    changes aren't saved automatically; manually “commit” every commit can be revisited later a branch is really just a “pointer” to a specific commit (complicated)         Activity Commits      Concept: Worktree and Repository  what you see   what's underneath   Pointers and objects (git is a database)     5e7ed7e34f9a8b34d26f98275a21afdcac171b83            Git Workflows  In this section  merging pulling pushing   Concepts: Merge    when we “merge” two branches, the changes from one are brought over into the other      if work has progressed on both branches, then there might be incompatible changes these are called \"merge conflicts\" they suck!    Concepts: Pull and Push Changes            Concepts: Pull and Push collaboratively           Pull and Push, the repo, and the worktree  pulling attempts to impose changes from a branch in one repo onto a branch in another repo. first it adds the commit objects from the remote object into its own store of objects then it tries to update the pointer at the tip the branch if it succeds, yay! if not \u0026#x2013; conflict, and new commits will be created after conflicts are resolved.         // Full list of configuration options available here: // https://github.com/hakimel/reveal.js#configuration Reveal.initialize({ controls: true, progress: true, history: true, center: false, slideNumber: 'c', rollingLinks: false, keyboard: true, mouseWheel: false, fragmentInURL: false, hashOneBasedIndex: false, pdfSeparateFragments: true, overview: true, width: \"100%\", height: \"100%\", margin: 0.10, minScale: 1.00, maxScale: 1.00, theme: Reveal.getQueryHash().theme, // available themes are in /css/theme transition: Reveal.getQueryHash().transition || 'convex', // see README of reveal.js for options transitionSpeed: 'default', // Optional libraries used to extend reveal.js dependencies: [ {src: '../../vendor/reveal//plugin/klipse_reveal.js'}, { src: '../../vendor/reveal//lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../vendor/reveal//plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../vendor/reveal//plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '../../vendor/reveal//plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }] });    "
},
{
	"uri": "http://digitalhistory.github.io/slides/04-01-web-signifies/",
	"title": "03-01: What the Web Signifies",
	"tags": [],
	"description": "",
	"content": " 03-01: What the Web Signifies .underline { text-decoration: underline; }   if( window.location.search.match( /print-pdf/gi ) ) { var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = '../../vendor/reveal//css/print/pdf.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); }    03-01: What the Web Signifies Matt Price  (view this presentation in another theme: Black (default) - White - League - Sky - Beige - Simple Serif - Blood - Night - Moon - Solarized )\t--   Today  Concept of the \"Public Sphere\" Internet and Habermas's conception     Significance and Signification  What matters about the web? How does the web create and change meaning?   Significance: what is its importance? Signification: how does the web introduce or trransform meaning?    What matters about the web?  Web has had enormous effects  economic political cultural but I want to talk about discursive does the web change what kinds of conversations we can have?  for the better, or for the worse?  \"peculiar technical affordances\" of this technological system   \"peculiar technical affordances\" of this technological system  tech systems make some things possible \u0026amp; other things impossible. Or, at lease: some thing easy and other things very difficult. ex: chainsaw vs. jigsaw. Table saw vs. Band saw. Pencil vs. pen.       The Public Sphere  Jürgen Habermas (b. 1929): Authenticity in a media age  pre-eminent German public intellectual of 1960's and 1970's role of Holocaust/Fascism in all his thinking inheritance from the Frankfurt School search for \"authentic\" forms of communication    Figure 1: Jürgen Habermas    Mid-century anxiety Appearance of new media (radio, TV, new kinds of magazine) Are these \"degraded\"? Do the media make us stupider? Less critical? More pliable?   Reasons to worry       maybe there are material conditions that make this sort of evil possible? perhaps the media of communication have a role?    Concept of the Public Sphere   By \"the public sphere\" we mean\u0026#x2026; a realm of our social life in which something approaching public opinion can be formed\u0026#x2026; Citizens behave as a public body when they confer in an unrestricted fashion \u0026#x2013; that is, with the guarantee of freedom of assembly and association and the freedom to express and publish their opinions \u0026#x2013; about matters of general interest. (Habermas 1964, p.49[p.2])    A portion of the public sphere comes into being in every conversation in which private individuals assemble to form a public body.  \u0026#x2013; J. Habermas   #+BEGIN_NOTES  Habermas wants us to believe in the reality of the \"public sphere\", as a discursive body composed of conversations that have a certain form Unpacking:  \"something approaching public opinion\": suggests that \"public opinion\" has a technical meaning Conferring in an unrestricted fashion: the public sphere requires a certain kind of freedom Matters of general interest: we're not talking about breakfast, jeans, or lipstick.    Public and Private     Public Private     open to all restricted   accessible for money closed even if you can pay   state-related non-state, civil society   political non-political   official non-official   common special   impersonal personal   national or popular group, class, or locale   international/universal particular/finite   in view of others concealed   outside the home domestic   circulated in print/electronic media circulated orally/in manuscript   known widely known only to a few   acknowledged/explicit tacit/implicit     many definitions not all of them part of Habermas's terminology    Concept of the Public Sphere  Strukturwandlung der Öffentlichkeit (1962)  Arena ruled by rational argument Freedom of expression prevails (\u0026#x2026;an unrestricted fashion) Conversations concern common interests (e.g. ?) both ideal and historical arises first in 18th Century flourishes and then withers in 19th at a nadir in 20th; can it be revived?   Habermas's Habilitation and first important book. but 35 years old!!   Before Bourgeois Society  There is no \"Public Sphere\" Instead there are \"Public Individuals\" with certain powers  and Church authorities, empowered to speak on moral matters  Opposed to these are \"private persons\"   Begin the historical story w/ the classic trnasition to a bourgeois/capitalist society around 1800.  before this point, not public sphere, just public individuals, who are distinct from 'private persons\"    Private and Public Persons   A private person has no right to pass public and perhaps even disapproving judgement on the actions, procedures, laws, regulations, and ordinances of sovereigns and courts\u0026#x2026;. or to publish in print pertinent reports that he manages to obtain. For a private person is not at all capable of making such judgment, because he lacks complete knowledge of circumstances and motives.  \u0026#x2013; Frederick 'the Great' of Prussia, 1784   \"Private\" and \"Public\" distinguish types of person, not types of activity.   18th Century Origins  How do we get from a monarchy in which only 'public persons' have license to speak on 'public matters', to a 'public sphere' which is opened more widely?  Rise of newspapers/journals. Intrusion of private commentary on 'public' matters  a new kind of media  rise of salons \u0026amp; coffee houses.  a new kind of sociality.    Salons and Coffee Houses  Salons as the heart of intellectual activity in c. 18  'monopoly on first publication' mixing of classes freedom from patronage  Coffee Houses a similar space  But no restrictions on topics of discourse matters of politics as frequent a topic as art  an ideal of common humanity esp. in coffee houses  opinions judged by reason alone  no intrusion of 'distinction' or finance  [ but note: imperfection of this vision ]           one of the longstanding critiques of Habermas is the actual restrictiveness of coffee houses in real life. Who's excluded? make a list: women, the truly poor, non-Europeans, the uneducated (to some extent),   Circulation  Communication across broad spaces \u0026amp; differences needs something more than conversation need a way get ideas to large numbers  news sheets \u0026rarr; newspapers letters \u0026rarr; journals    Markets  Through newspapers \u0026amp; journals conversation becomes a commodity Therefore it loses its exclusivity so, in the beginning, commodification is a good thing   This process of commodification, and its trasformation from a positive, welcome force in to a troubling, destructive one is central to H but is not just his idea.   The State vs. Society  This is all happening in a pre-democratic era (mostly) 'The People' are a problem for the state growth of 'the social' a threat to sovereignty 'public sphere' precarious and subject to dissolution   The Structure of the Public Sphere      Private Realm Public Sphere Sphere of Public Authority     Civil Society (Commodity Exchange, social labour) Political Public Sphere State   Conjugal Family Literary/Philosophical Public Sphere Court     the public sphere sits between Private Life and Authority, striving for independence from both it mediates between them and draws its legitimacy from its use of reason note that it presupposes an emergent realm of \"privacy\" \u0026#x2013; and so, it is grounded in that notion, like all liberal philosophical constructs   From Debate to Consumption  Public Sphere in effect undoes itself success of media dissolves the reciprocal creation \u0026amp; communication of ideas  instead we just consume reason begins to vanish  Massive growth of media in c.20  radio, television, film  The Public Sphere: A Hollow Shell?  Where is its legitimacy?      Habermas' Reception  extremely influential with some questions about both the historical and the philosophical elements of the story.   Counterpublics   \u0026#x2026;some publics are defined by their tension with a larger public\u0026#x2026; Discussion with such a public is understood to contravene the rules obtaining in the world at large\u0026#x2026; This kind of public is, in effect, a counterpublic: it maintains at some level\u0026#x2026; an awareness of its subordinate status. \u0026#x2013; M. Warner (2002)   One or Many?  Habermas sees Public Sphere as necessarily unitary But discourse carves out separate spaces  that may correlate with social divides \u0026#x2026; and where the addressee (\"stranger\") is presumed to share a common subordination with the speaker  (\"Given the fact that almost anyone can contribute to public discourse, the multiplicity of perspectives makes it even more difficult to define public opinion. Any designation of public opinion then becomes arbitrary\")   Disinterested or embodied?  for Habermas separation of individual from both \"accidental\" circumstances and official capacities is paramount Warner: This is fictive  and anyway undesirable  because some kinds of \"argument\" are fundamentally corporeal this doesn't make them less legitimate does it?     Reading or Acting  Habermas: the actions of a legitimate public sphere are actions of reading (scrutinize, judge, decide) Warner: in a counterpublic, there may be other sorts of actions (prance, diss, act up, fantasize, mourn)     How this matters for History  If there are many \"publics\", then working to carve out a particular space for discourse can have salutary effects Modes of address and standards of comportment can differ across 'publics' May even be possible to craft a 'public' around our work.  though \" it follows that the public exists only as long as the text is being engaged with\"      Enter the Internet  Habermas' theory revolves around a technology and a social institution  enabled by print, threatened by TV can the Internet undo this dissolution? If so, how? if not, is it the apotheosis of that dissolution?    Digital History and the Public Sphere  Does the Internet provide a space for authentic public conversatoin? What are effects of the medium on how we pursue knowledge and truth?  state and corporate pressures algorithmic actors (!)   Technical Affordances of the web  instantaneous distribution distributed production machine-readable text algorithmic sorting   All of these are present in every web-based communication. But realms of the web have distinct affordances of their own: Reddit \u0026ne; twitter \u0026ne; facebook \u0026ne; The New York Times   Our Take-away  can we use this historical framework to make sense the present? how can we engage with these technical affordances to make a \"public sphere\" that we want to see in the world?         // Full list of configuration options available here: // https://github.com/hakimel/reveal.js#configuration Reveal.initialize({ controls: true, progress: true, history: true, center: false, slideNumber: 'c', rollingLinks: false, keyboard: true, mouseWheel: false, fragmentInURL: false, hashOneBasedIndex: false, pdfSeparateFragments: true, overview: true, width: \"100%\", height: \"100%\", margin: 0.10, minScale: 1.00, maxScale: 1.00, theme: Reveal.getQueryHash().theme, // available themes are in /css/theme transition: Reveal.getQueryHash().transition || 'convex', // see README of reveal.js for options transitionSpeed: 'default', // Optional libraries used to extend reveal.js dependencies: [ {src: '../../vendor/reveal//plugin/klipse_reveal.js'}, { src: '../../vendor/reveal//lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../vendor/reveal//plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../vendor/reveal//plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '../../vendor/reveal//plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }] });    "
},
{
	"uri": "http://digitalhistory.github.io/slides/03-01-html-backlog/",
	"title": "03-02: HTML: Machine-readable Text",
	"tags": [],
	"description": "",
	"content": " 03-02: HTML: Machine-readable Text .underline { text-decoration: underline; }   if( window.location.search.match( /print-pdf/gi ) ) { var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = '../../vendor/reveal//css/print/pdf.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); }    03-02: HTML: Machine-readable Text Matt Price  (view this presentation in another theme: Black (default) - White - League - Sky - Beige - Simple Serif - Blood - Night - Moon - Solarized )\t--   HTML  Hyper text Markup Language structures web pages \u0026amp; their ocntent     Tag Structure \u0026lt;tag att1=\"value1\" att2=\"value2\"\u0026gt;content\u0026lt;/tag\u0026gt; \u0026lt;p class=\"normal\" align=\"right\"\u0026gt;Paragraph Content\u0026lt;/p\u0026gt; \u0026lt;a href=\"http://www.google.com\"\u0026gt;Link to google\u0026lt;/a\u0026gt; \u0026lt;img src=\"http://1.bp.blogspot.com/-CzqzzBV2tMk/TxBM3ar18MI/AAAAAAAAPm0/6faLPO9BM8w/s1600/i-can-has-cheezburger.jpg\" title=\"I can Haz Cheezburger?\" alt=\"greedy cat saying 'I can haz cheezburger?'\" /\u0026gt;    tags:  tag identifier attributes content     function shadowizetag_anatomy () {var elId=\"tag_anatomy\"; var dom_block=\"\\n h1#anatomy1 {\\n display: inline-flex;\\n min-width: 100%;\\n padding: 0px;\\n background-color: rgb(30,30,30,0.1);\\n font-size: 0.9em;\\n border: 2px gray solid; }\\n h1#anatomy1 span.tag {background-color: rgba(150, 20, 20, 0.4);}\\n h1#anatomy1 span.attribute {color: rgba(70, 10,70, 0.4);}\\n h1#anatomy1 span.bracket {color: rgba(10,150, 150, 0.4);}\\nh1#anatomy1 span.content {background-color: rgba(10,150, 150, 0.4);}\\n\\n\\n\\n\\n \\n tagname attribute=\\\"value\\\" \\n \\n Content\\n \\n \\n tagname\\n \\n \\n\"; function createElementFromHTML(htmlString) { let div = document.createElement('div'); div.innerHTML = htmlString.trim(); // Change This to div.childNodes to support multiple top-level nodes return div; } window.addEventListener(\"load\",function(){ //var htmlString = dom_block; if (typeof document != 'undefined') { console.log(\"Attaching shadow to \",elId); let sroot = document.getElementById(elId).attachShadow({mode: 'open'}); sroot.appendChild(createElementFromHTML(dom_block)); } //return (htmlString); // console.log(\"HTMLSTRING!\" + htmlString); });} shadowizetag_anatomy()   content Paragraph Content\nLink to google     HTML at work, and some consequences This is the top-level heading  This is a paragraph. It can contain further markup and also more complex content.  Sometimes you'll see semantic tags, like \"aside\", \"header\", \"footer\", \"article\", or \"section\".    On the web, text is \"Marked up\" \u0026lt;h1\u0026gt;This is a top-level heading\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; This is a paragraph. It can contain \u0026lt;i\u0026gt;further markup\u0026lt;/i\u0026gt; and also \u0026lt;a href=\"http:/some.where.com\"\u0026gt;more complex content\u0026lt;/a\u0026gt;. \u0026lt;/p\u0026gt; \u0026lt;aside\u0026gt; Sometimes you'll see \u0026lt;i\u0026gt;semantic\u0026lt;/i\u0026gt; tags, like \"aside\", \"header\", \"footer\", \"article\", or \"section\". \u0026lt;/aside\u0026gt;     Programs can scan this text, interpret it\u0026#x2026; then treat it as data which can be combined, analyzed, etc.  point of learning HTML is  Understand how to achieve a certain \"look\" Understand how a complex computer algorithm might treat it as \"data\".      A Few HTML tags/elements you should know  Page Structure (block-level elements):  \u0026lt;html\u0026gt;\u0026lt;/html\u0026gt;Opens/closes every page \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; and \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt;two main sections for metadata and display \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;often-invisible tag that divides page into \"divisions\" \u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;, \u0026lt;article\u0026gt;\u0026lt;/article\u0026gt;, \u0026lt;header\u0026gt;\u0026lt;/header\u0026gt; \u0026lt;footer\u0026gt;\u0026lt;/footer\u0026gt;also invisible-by-default \"semantic\" tags that create divisions in page \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;basic paragraph unit \u0026lt;blockquote\u0026gt;\u0026lt;/blockquote\u0026gt;semantic tag distinguishing quoted text \u0026lt;table\u0026gt;, \u0026lt;tr\u0026gt;, \u0026lt;th\u0026gt;, \u0026lt;td\u0026gt;building tables (don't overuse!)    Found inside structural elements (inline elements):  \u0026lt;a href=\"http://link.address\"\u0026gt;\u0026lt;/a\u0026gt;The essential hyperlink tag that makes the web what it is \u0026lt;img src=\"http://file.location\" alt=\"text to display for non-visual browsers/viewers\"/\u0026gt;\"self-closing\" image display tag \u0026lt;em\u0026gt;\u0026lt;/em\u0026gt; \u0026lt;strong\u0026gt;\u0026lt;/strong\u0026gt;, \u0026lt;i\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;b\u0026gt;\u0026lt;/b\u0026gt;emphasized and strong text \u0026lt;ol\u0026gt;, \u0026lt;ul\u0026gt;, \u0026lt;li\u0026gt;building \"ordered\" and \"unordered\" lists      HTML in this class  learn to recognize generic tag structure work with some of the most common tags learn how to learn more   Take a break from lectures now and find a place to edit some code.  The Mozilla Developer Network Introduction to HTML \"active learning\" modules are one pretty good place to start.  However, I mostly recommend forking \u0026amp; working with the Habermas HTML repo I made special for this class:  https://github.com/DigitalHistory/HabermasCode        // Full list of configuration options available here: // https://github.com/hakimel/reveal.js#configuration Reveal.initialize({ controls: true, progress: true, history: true, center: false, slideNumber: 'c', rollingLinks: false, keyboard: true, mouseWheel: false, fragmentInURL: false, hashOneBasedIndex: false, pdfSeparateFragments: true, overview: true, width: \"100%\", height: \"100%\", margin: 0.10, minScale: 1.00, maxScale: 1.00, theme: Reveal.getQueryHash().theme, // available themes are in /css/theme transition: Reveal.getQueryHash().transition || 'convex', // see README of reveal.js for options transitionSpeed: 'default', // Optional libraries used to extend reveal.js dependencies: [ {src: '../../vendor/reveal//plugin/klipse_reveal.js'}, { src: '../../vendor/reveal//lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../vendor/reveal//plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../vendor/reveal//plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '../../vendor/reveal//plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }] });    "
},
{
	"uri": "http://digitalhistory.github.io/slides/03-03-css/",
	"title": "03-03 And Now: CSS!",
	"tags": [],
	"description": "",
	"content": " 03-03 And Now: CSS! .underline { text-decoration: underline; }   if( window.location.search.match( /print-pdf/gi ) ) { var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = '../../vendor/reveal//css/print/pdf.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); }    03-03 And Now: CSS! Matt Price  (view this presentation in another theme: Black (default) - White - League - Sky - Beige - Simple Serif - Blood - Night - Moon - Solarized )\t--   Reminder  HTML for structure/content; CSS for presentation Resources: Codeacademy CSS offerings; Learn Layout; Mozilla Developer Network; many other cool sites     What you Need to Learn Today  syntax: selectors, rules, punctuation; jargon: colors, sizes where to look stuff up (!)     CSS Basics  \"Cascading Style Sheets\" Style sheet that \"cascades\" = overrides prior values     two \"dimensions\" to cascade (source order and specificity)  specificity is the hard/important one.      With and without CSS        CSS Selectors  Intro h1 { color:blue; font-family:serif; font-size:24px; } div { border: 1px solid black; } div.main p { color:red; } #specialid { float:left; }     When you look at a CSS file, you will see it is divided into a bunch of stanzas, like this. Each of these stanzas is called a \"selector statement\": They all follow the same pattern:  first, a selector that identifies the elements to which these instructions will apply then an open brace \"{\" which marks the start of the actual instructions then a series of property-value pairs. Each of these sets the value of a particular property (duh). Note that at the end of a property, there is always a semi-colon! finally, a closing brace that ends the selector declaration.    When you look at a CSS file, you will see it is divided into a bunch of stanzas, like this. Each of these stanzas is called a \"selector statement\": They all follow the same pattern:  first, a selector that identifies the elements to which these instructions will apply then an open brace \"{\" which marks the start of the actual instructions then a series of property-value pairs. Each of these sets the value of a particular property (duh). Note that at the end of a property, there is always a semi-colon! finally, a closing brace that ends the selector declaration.    Selector Anatomy  function shadowizecss_rules0 () {var elId=\"css_rules0\"; var dom_block=\"\\n h1#anatomy1 {\\n display: inline-flex;\\n padding: 15px;\\n background-color: rgb(30,30,30,0.1);\\n font-size: 1.4em;\\n border: 2px gray solid; }\\n h1#anatomy1 span {padding: 4px;border: 2px black solid; background-color: rgba(10,70,10,0.6);}\\n h1#anatomy1 span.selector {background-color: rgba(150, 20, 20, 0.4);}\\n h1#anatomy1 span.rule {background-color: rgba(70, 10,70, 0.4);}\\n h1#anatomy1 span.value {background-color: rgba(10,150, 150, 0.4);}\\n\\n\\n\\n\\n selector.has  #funny:stuff\\n {\\n rule:\\n value in (approved);\\n }\\n\"; function createElementFromHTML(htmlString) { let div = document.createElement('div'); div.innerHTML = htmlString.trim(); // Change This to div.childNodes to support multiple top-level nodes return div; } window.addEventListener(\"load\",function(){ //var htmlString = dom_block; if (typeof document != 'undefined') { console.log(\"Attaching shadow to \",elId); let sroot = document.getElementById(elId).attachShadow({mode: 'open'}); sroot.appendChild(createElementFromHTML(dom_block)); } //return (htmlString); // console.log(\"HTMLSTRING!\" + htmlString); });} shadowizecss_rules0()   Selector types \u0026lt;style\u0026gt; h1 { font-size: 2em; color: red; } p { font-size:5em} .coolpara { color:green; } #myfave { color:yellow; background-color: black; } \u0026lt;/style\u0026gt; \u0026lt;h1\u0026gt; Heading\u0026lt;/h1\u0026gt; \u0026lt;p class=\"coolpara\"\u0026gt;Some Content\u0026lt;/p\u0026gt; \u0026lt;p id=\"myfave\"\u0026gt;Some Content\u0026lt;/p\u0026gt;     Though simple in principle, CSS selectors can be confusing. Here are some basic selector types:  Element selectors: these just give the element (like h1, p, div, span, etc.). they apply to all elements of this type. Class selectors: these give the name of a class attribute that an HTML element may have. This selector will always begin with a period (\".\"). So for instance: ID selector: this addresses the element with a particular ID:    Selector types \u0026lt;style\u0026gt; div#cssdemo h1 { font-size: 3em; color: red; } div#cssdemo p { font-size:5em} .coolpara { color:green; } div#cssdemo #myfave { color:yellow; background-color: black; } \u0026lt;/style\u0026gt; \u0026lt;div id=\"cssdemo\"\u0026gt; \u0026lt;h1\u0026gt; Heading\u0026lt;/h1\u0026gt; \u0026lt;p class=\"coolpara\"\u0026gt;Some Content\u0026lt;/p\u0026gt; \u0026lt;p id=\"myfave\"\u0026gt;Some Content\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt;     div#cssdemo h1 { font-size: 3em; color: red; } div#cssdemo p { font-size:5em} .coolpara { color:green; } div#cssdemo #myfave { color:yellow; background-color: black; }   Heading Some Content\nSome Content\n  More Selectors \u0026lt;style\u0026gt; div#main p { color:red; } div#main \u0026gt; p.blue { color: blue; } \u0026lt;/style\u0026gt; \u0026lt;div id=\"main\"\u0026gt; \u0026lt;p\u0026gt; regular (red) paragraph\u0026lt;/p\u0026gt; \u0026lt;p class=\"blue\"\u0026gt; not a regular paragraph (blue) \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt;      function shadowizemore_selectors () {var elId=\"more_selectors\"; var dom_block=\"\\n div#main p {\\n color:red;\\n }\\n\\n div#main  p.blue {\\n color: blue;\\n }\\n \\n \\n  regular (red) paragraph\n\\n not a regular paragraph (blue) \\n \"; function createElementFromHTML(htmlString) { let div = document.createElement('div'); div.innerHTML = htmlString.trim(); // Change This to div.childNodes to support multiple top-level nodes return div; } window.addEventListener(\"load\",function(){ //var htmlString = dom_block; if (typeof document != 'undefined') { console.log(\"Attaching shadow to \",elId); let sroot = document.getElementById(elId).attachShadow({mode: 'open'}); sroot.appendChild(createElementFromHTML(dom_block)); } //return (htmlString); // console.log(\"HTMLSTRING!\" + htmlString); });} shadowizemore_selectors()   Finally, we have many more complex selectors. This one here is a descendant selector   It addresses every p that is contained inside a div of id \"main.\"     Selectors and the Cascade  Priority: inline \u0026rarr; id \u0026rarr; class \u0026rarr; element/tag fine gradations within this the awful !important rule     Color Values  Various representations:  ul#color-rules {font-size 1.5rem;} ul#color-rules li span.red {color: #FF0000} ul#color-rules li span.green {color: #00FF00} ul#color-rules li span.blue {color: #0000FF}   color: # 00 7F FF ;   color: rgb( 00, 127, 255 );   color: rgba( 00, 127, 255, 0.6);    (also hsl, hsla)  Fonts, colors and borders div.main { color: rgb(150,150,150); background-color: (#b0c4ee); text-align: center; text-decoration:underline; font-family: \"Times New Roman\", Times, Serif; font-style:italic; font-size:1.25em; border: 4px green solid; border-radius:20%; }     div#maincss2 { color: rgb(150,150,150); background-color: (#b0c4ee); text-align: center; text-decoration:underline; font-family: \"Times New Roman\", Times, Serif; font-style:italic; font-size:1.25em; border: 4px green solid; border-radius:20%; }   here is a sample paragraph doing all of this stuff...\n  A lot of what we do with CSS is to set fonts and colors. Here are some examples: There are plenty of other properties that can be set, in much the same way.     Sizes \u0026lt;style\u0026gt; p.fixed { font-size: 20px; background-color: gray; } p.em-small { font-size: 0.6em; background-color: blue; } p.em-big { font-size: 2em; background-color: red; } div.pixel-box { width: 70px; height: 70px; border: 1px solid black; } div.percent-box { width: 20%; height: 30px; border: 1px solid black; } div.viewport-box { width: 30vw; height: 30vh; border: 1px solid black; } \u0026lt;/style\u0026gt; \u0026lt;p class=\"fixed\"\u0026gt;This paragraph will follow the rules in p.fixed -- size 20px\u0026lt;/p\u0026gt; \u0026lt;p class=\"em-small\"\u0026gt;This paragraph will follow the rules in p.em-small -- size 0.6em\u0026lt;/p\u0026gt; \u0026lt;p class=\"em-big\"\u0026gt;This paragraph will follow the rules in p.em-big: 2em\u0026lt;/p\u0026gt; \u0026lt;div class=\"pixel-box\"\u0026gt;.pixel-box\u0026lt;/div\u0026gt; \u0026lt;div class=\"percent-box\"\u0026gt;.percent-box\u0026lt;/div\u0026gt; \u0026lt;div class=\"viewport-box\"\u0026gt;.viewport-box\u0026lt;/div\u0026gt;     function shadowizecss_sizes () {var elId=\"css_sizes\"; var dom_block=\"\\n p.fixed {\\n font-size: 20px;\\n background-color: gray;\\n } \\n p.em-small {\\n font-size: 0.6em;\\n background-color: blue;\\n }\\n p.em-big {\\n font-size: 2em;\\n background-color: red;\\n }\\n div.pixel-box {\\n width: 70px;\\n height: 70px;\\n border: 1px solid black;\\n }\\n div.percent-box {\\n width: 20%;\\n height: 30px;\\n border: 1px solid black;\\n }\\n div.viewport-box {\\n width: 30vw;\\n height: 30vh;\\n border: 1px solid black;\\n }\\n\\n\\n\\nThis paragraph will follow the rules in p.fixed -- size 20px\n\\nThis paragraph will follow the rules in p.em-small -- size 0.6em\n\\nThis paragraph will follow the rules in p.em-big: 2em\n\\n\\n.pixel-box\\n.percent-box\\n.viewport-box\"; function createElementFromHTML(htmlString) { let div = document.createElement('div'); div.innerHTML = htmlString.trim(); // Change This to div.childNodes to support multiple top-level nodes return div; } window.addEventListener(\"load\",function(){ //var htmlString = dom_block; if (typeof document != 'undefined') { console.log(\"Attaching shadow to \",elId); let sroot = document.getElementById(elId).attachShadow({mode: 'open'}); sroot.appendChild(createElementFromHTML(dom_block)); } //return (htmlString); // console.log(\"HTMLSTRING!\" + htmlString); });} shadowizecss_sizes()     Simple Exercise  https://github.com/DigitalHistory/css-styling/\n       // Full list of configuration options available here: // https://github.com/hakimel/reveal.js#configuration Reveal.initialize({ controls: true, progress: true, history: true, center: false, slideNumber: 'c', rollingLinks: false, keyboard: true, mouseWheel: false, fragmentInURL: false, hashOneBasedIndex: false, pdfSeparateFragments: true, overview: true, width: \"100%\", height: \"100%\", margin: 0.10, minScale: 1.00, maxScale: 1.00, theme: Reveal.getQueryHash().theme, // available themes are in /css/theme transition: Reveal.getQueryHash().transition || 'convex', // see README of reveal.js for options transitionSpeed: 'default', // Optional libraries used to extend reveal.js dependencies: [ {src: '../../vendor/reveal//plugin/klipse_reveal.js'}, { src: '../../vendor/reveal//lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../vendor/reveal//plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../vendor/reveal//plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '../../vendor/reveal//plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }] });    "
},
{
	"uri": "http://digitalhistory.github.io/slides/03-04-css-layout/",
	"title": "03-04, CSS Part 2: Layout",
	"tags": [],
	"description": "",
	"content": " 03-04, CSS Part 2: Layout .underline { text-decoration: underline; }   if( window.location.search.match( /print-pdf/gi ) ) { var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = '../../vendor/reveal//css/print/pdf.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); }    03-04, CSS Part 2: Layout Matt Price  (view this presentation in another theme: Black (default) - White - League - Sky - Beige - Simple Serif - Blood - Night - Moon - Solarized )\t--   Recap  selector syntax: selector \u0026gt; string {property: value;} colors: #RRGGBB or rgba(RRR, BBB, GGG, 0.alpha) sizes: px or em (or rem)     Today  intro to layout:  box model display values flex grid  media queries (v brief!) follow along with the repo: https://github.com/DigitalHistory/css-layout     Box Model    content padding border margin   One important notion to understand in CSS is the so-called \"Box Model\", which accounts for the distribution of whitespace around elements. A lot of the grief you will encounter when designing websites will come back to the box model, so it's important to learn it:     \"Russian Dolls\"      Display: Block vs. Inline    block elements have their own boxes inline elements do not have boxes. height, width, padding, work inconsistently. inline-block elements don't make \"true\" boxes but allow you to set height and width.   by default, these elements are inline:  a, b, i, strong, em, span, img   while these are block:  div, article, section, nav, hx, p, ul, ol, li, main, header, footer      Normal Flow  page processed sequentially each block-level element gets its own line inline elements displayed inside those lines heights of lines set by height of content     Layout: Overriding \"normal\" flows  instruct elements to either step out of the normal flow or set new rues for their \"internal\" or \"external\" flow     Layout Methods  display property position property float property   We focus on display but dip into the other methods    Display  values we care about:  display: none display: block/inline/inline-block display: flex display: grid     Default View \u0026lt;style\u0026gt; main { display: block; } header { display:block; color: magenta; } \u0026lt;/style\u0026gt; \u0026lt;main\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;header\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;article\u0026gt; \u0026lt;p\u0026gt;article p\u0026lt;/p\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;footer\u0026gt;footer\u0026lt;/footer\u0026gt; \u0026lt;/main\u0026gt;      function shadowizebasic_layout () {var elId=\"basic_layout\"; var dom_block=\"\\n main {\\n display: block;\\n }\\n\\n header {\\n display:block;\\n color: magenta;\\n }\\n\\n\\n\\n \\n header\\n \\n \\n article p\n\\n \\n footer\\n\\n\"; function createElementFromHTML(htmlString) { let div = document.createElement('div'); div.innerHTML = htmlString.trim(); // Change This to div.childNodes to support multiple top-level nodes return div; } window.addEventListener(\"load\",function(){ //var htmlString = dom_block; if (typeof document != 'undefined') { console.log(\"Attaching shadow to \",elId); let sroot = document.getElementById(elId).attachShadow({mode: 'open'}); sroot.appendChild(createElementFromHTML(dom_block)); } //return (htmlString); // console.log(\"HTMLSTRING!\" + htmlString); });} shadowizebasic_layout()     Display: None  hide element completely so that it takes up no space at all \u0026lt;style\u0026gt; main { display: block; } header { display: none; } \u0026lt;/style\u0026gt; \u0026lt;main\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;header\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;article\u0026gt; \u0026lt;p\u0026gt;article p\u0026lt;/p\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;footer\u0026gt;footer\u0026lt;/footer\u0026gt; \u0026lt;/main\u0026gt;      function shadowizedisplay_none () {var elId=\"display_none\"; var dom_block=\"\\n main {\\n display: block;\\n }\\n\\n header {\\n display: none;\\n }\\n\\n\\n\\n \\n header\\n \\n \\n article p\n\\n \\n footer\\n\\n\"; function createElementFromHTML(htmlString) { let div = document.createElement('div'); div.innerHTML = htmlString.trim(); // Change This to div.childNodes to support multiple top-level nodes return div; } window.addEventListener(\"load\",function(){ //var htmlString = dom_block; if (typeof document != 'undefined') { console.log(\"Attaching shadow to \",elId); let sroot = document.getElementById(elId).attachShadow({mode: 'open'}); sroot.appendChild(createElementFromHTML(dom_block)); } //return (htmlString); // console.log(\"HTMLSTRING!\" + htmlString); });} shadowizedisplay_none()     Display: Flex \u0026lt;style\u0026gt; main { display: flex; align-items: center; justify-content: stretch; } main\u0026gt;* { flex-grow: 1; } header { color: magenta; } \u0026lt;/style\u0026gt; \u0026lt;main\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;header\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;article\u0026gt; \u0026lt;p\u0026gt;article p\u0026lt;/p\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;footer\u0026gt;footer\u0026lt;/footer\u0026gt; \u0026lt;/main\u0026gt;    one-dimensional layout \"content-out\"  container determines direction \u0026amp; a few defaults most styling still in children  revolutionary!     function shadowizedisplay_flex () {var elId=\"display_flex\"; var dom_block=\"\\n main {\\n display: flex;\\n align-items: center;\\n justify-content: stretch;\\n }\\n \\nmain* {\\n flex-grow: 1;\\n }\\n\\nheader {\\n color: magenta;\\n}\\n\\n\\n\\n \\n header\\n \\n \\n article p\n\\n \\n footer\\n\\n\"; function createElementFromHTML(htmlString) { let div = document.createElement('div'); div.innerHTML = htmlString.trim(); // Change This to div.childNodes to support multiple top-level nodes return div; } window.addEventListener(\"load\",function(){ //var htmlString = dom_block; if (typeof document != 'undefined') { console.log(\"Attaching shadow to \",elId); let sroot = document.getElementById(elId).attachShadow({mode: 'open'}); sroot.appendChild(createElementFromHTML(dom_block)); } //return (htmlString); // console.log(\"HTMLSTRING!\" + htmlString); });} shadowizedisplay_flex()     Flex Concepts: Container and Items  the container has display: flex; the items are direct children of the container container controls direction and wrapping behaviour, as well as default box alignments; items control most other properties   Flex Concepts: Direction (container!)    main axis: horizontal if flex-direction: column; vertical if flex-direction: row cross axis: vertical if flex-direction: column; horizontal if flex-direction: row   Flex Concepts: Alignment, Justification (container and items!)  align-items: default cross-axis alignment (stretch, flex-start, flex-end) justify-content: default main-axis alignment (flex-start, flex-end, space-around, space-between) align-self: item cross-axis order: placement in flex-container (relative, not absolute!!)     Display: Grid  two-dimensional layout \"container-in\"  container determines almost all layout properties children choose their position within the grid  revolutionary!  \u0026lt;style\u0026gt; main { display: grid; height: 100%; grid-template-rows: 1fr 4fr 1fr; grid-template-columns: 1fr 2fr; } main\u0026gt;* { min-width: 100%; border: 2px green solid; } header,footer { grid-column: 1/3; color: magenta; } \u0026lt;/style\u0026gt; \u0026lt;main\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;header\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;aside\u0026gt; aside \u0026lt;/aside\u0026gt; \u0026lt;article\u0026gt; \u0026lt;p\u0026gt;article p\u0026lt;/p\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;footer\u0026gt;footer\u0026lt;/footer\u0026gt; \u0026lt;/main\u0026gt;      function shadowizedisplay_grid () {var elId=\"display_grid\"; var dom_block=\"\\n main {\\n display: grid;\\n height: 100%;\\n grid-template-rows: 1fr 4fr 1fr;\\n grid-template-columns: 1fr 2fr;\\n }\\n main* {\\n min-width: 100%;\\n border: 2px green solid;\\n }\\nheader,footer {\\n grid-column: 1/3;\\n color: magenta;\\n}\\n\\n\\n\\n \\n header\\n \\n \\n aside\\n \\n \\n article p\n\\n \\n footer\\n\\n\"; function createElementFromHTML(htmlString) { let div = document.createElement('div'); div.innerHTML = htmlString.trim(); // Change This to div.childNodes to support multiple top-level nodes return div; } window.addEventListener(\"load\",function(){ //var htmlString = dom_block; if (typeof document != 'undefined') { console.log(\"Attaching shadow to \",elId); let sroot = document.getElementById(elId).attachShadow({mode: 'open'}); sroot.appendChild(createElementFromHTML(dom_block)); } //return (htmlString); // console.log(\"HTMLSTRING!\" + htmlString); });} shadowizedisplay_grid()   A lot like flex!  many ideas come from flex finer control 2 dimensions, not one   Grid Concepts: Container and Items  as in flex   Grid Concepts: Templates and Areas (container)  set patterns for the 2-d grid grid-template-columns: how many columns, and what size? grid-template-rows: how many rows, and what size? grid-template-areas: names the areas, and allows items to set their own areas   Placing Items  grid-column: n/m: place items by column-number grid-row: n/m: place items by row-number  (note how these allow spanning)  grid-area: area-name: place by named area  does not allow spanning    Resources  visual cheatsheet MDN Grid series     Media Queries  CSS rules that only come into effect under certain conditions we will only use for screen size allows creation of responsive sites  @media screen and (min-width: 500px;) { normal.selector \u0026gt; here { normal-rule: normal-value; } } @media screen and (max-width: 499px) { normal.selector \u0026gt; here { normal-rule: normal-value; } }          // Full list of configuration options available here: // https://github.com/hakimel/reveal.js#configuration Reveal.initialize({ controls: true, progress: true, history: true, center: false, slideNumber: 'c', rollingLinks: false, keyboard: true, mouseWheel: false, fragmentInURL: false, hashOneBasedIndex: false, pdfSeparateFragments: true, overview: true, width: \"100%\", height: \"100%\", margin: 0.10, minScale: 1.00, maxScale: 1.00, theme: Reveal.getQueryHash().theme, // available themes are in /css/theme transition: Reveal.getQueryHash().transition || 'convex', // see README of reveal.js for options transitionSpeed: 'default', // Optional libraries used to extend reveal.js dependencies: [ {src: '../../vendor/reveal//plugin/klipse_reveal.js'}, { src: '../../vendor/reveal//lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../vendor/reveal//plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../vendor/reveal//plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '../../vendor/reveal//plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }] });    "
},
{
	"uri": "http://digitalhistory.github.io/slides/04-01-js/",
	"title": "04-01: Getting Started With Javascript",
	"tags": [],
	"description": "",
	"content": " 04-01: Getting Started With Javascript .underline { text-decoration: underline; }   /* Position computations of klipse get confused by reveal.js's scaling. Hence, scaling should be disabled with this code. Fix height of code area with scrollbar (use overflow instead of overflow-y to restore CodeMirror setting afterwards): */ .reveal section pre { max-height: 75vh; height: auto; overflow: auto; } /* Reset some reveal.js and oer-reveal settings: */ .reveal section pre .CodeMirror pre { font-size: 2.0em; line-height:0.8em; box-shadow: none; width: auto; padding: 0.4em; display: block; overflow: visible; } /* Enlarge cursor: */ .CodeMirror-cursor { border-left: 3px solid black; }   window.klipse_settings = { selector: '.language-klipse', selector_eval_html: '.language-klipse-html', selector_eval_js: '.language-klipse-javascript', selector_eval_js: '.language-klipse-js', selector_eval_php: '.language-klipse-php', selector_eval_python_client: '.language-klipse-python', selector_eval_ruby: '.language-klipse-ruby', selector_eval_scheme: '.language-klipse-scheme', selector_sql: '.language-klipse-sql' };   if( window.location.search.match( /print-pdf/gi ) ) { var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = '../../vendor/reveal//css/print/pdf.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); }    04-01: Getting Started With Javascript Matt Price  (view this presentation in another theme: Black (default) - White - League - Sky - Beige - Simple Serif - Blood - Night - Moon - Solarized )\t--   JavaScript  a real language! dynamic transformation baby steps!!     Some Big Ideas  Abstraction Formalization Repetition Laziness!     Assignment 2 will require  Basic Syntax Variable Types Function Definitions Loops and Branches Basic \"Objects\"     Running Javascript  in Browser Console in terminal (with the command node) in VSCode files, with Quokka attached     What is a Variable?  name for memory location to be used later, usually in specific ways that depend on type or, box into which you can put information that you will want to get later.     Declaring Variables const neverChange = \"Project Key\"; // comment let oftenChanges = 0; // maybe we will change this value later var oldDeclaration = 0; // we try to avoid using var now; use let instead   Text is Data let first=\"Matt\"; let last=\"Price\" console.log(first + last);  Do it w/ your name!  console; syntax; spaces; exercise:    \"Dynamic\" (or \"Weak\") Typing  numbers and strings are different but we can convert number \u0026rarr; string  let n = 1, m=2, s=\"Hello, there! \"; console.log(m+n); console.log(s+n);   commas, semi-colons; \"overloading\" \u0026amp;dynamic typing this can be confusing!!!    Some Variable Types  numbers strings boolean (true/false) arrays objects   Making Lists (Arrays) let historians= [\"Edward Gibbon\", \"Leopold von Ranke\", \"Edward Said\", \"Joan Scott\"];  undefined   brackets!   Working With Arrays a = []; a.push(\"Edward Gibbon\"); a.push(\"Edward Said\"); a.push(\"Joan Scott\"); console.log(a[1]); a.pop(); // a   push, pop, INDEX    Working with Numbers wardates=[1776, 1792, 1812, 1861, 1870, 1914, 1939, 1994] console.log(\"The time between The First and \\ Second World Wars was \" + (wardates[6] - wardates[5]) + \" years\");     Repetition: While Loops let historians= [\"Edward Gibbon\", \"Leopold von Ranke\", \"Edward Said\", \"Joan Scott\"]; let i = 0; while (i \u0026lt; historians.length) { console.log(historians[i] + \" was a historian.\"); i+=1; }   repeat inside the { ... } as long as test is true:  initial value: i = 0 test (halt condition): i \u0026lt; historians.length change in condition: i += 1     Repetition: For Loops let historians= [\"Edward Gibbon\", \"Leopold von Ranke\", \"Edward Said\", \"Joan Scott\"]; for (let i=0; i \u0026lt; historians.length ; i++){ console.log(historians[i] + \" was a historian.\"); i // this is not required, just here to show you a slight difference }   initial value: i = 0 test (halt condition): i \u0026lt; historians.length change in condition: i++ (idiomatic)     Repetition: other for loops let historians= [\"Edward Gibbon\", \"Leopold von Ranke\", \"Edward Said\", \"Joan Scott\"]; for (i in historians) { console.log(historians[i] + \" was a historian.\"); } for (let h of historians) { console.log(h + \" was a historian.\"); }   these also \"loop\" but the initial value, test, and increment are implicit defined by historians, but in slightly different ways. they are very convenient! read about them.     Conditionals: If let historians= [\"Edward Gibbon\", \"Leopold von Ranke\", \"Edward Said\", \"Joan Scott\"]; let i = 0; while (i \u0026lt; historians.length) { if (historians[i] === \"Joan Scott\") { console.log(historians[i] + \" is my favourite.\"); } i +=1; };   execute the { ... } only if the test is true here the test is historians[i] === \"Joan Scott\" note the many === ! different from just one =  let a = 'some value': set a to 'some value'     Branching let historians= [\"Edward Gibbon\", \"Leopold von Ranke\", \"Edward Said\", \"Joan Scott\"]; let i = 0; while (i \u0026lt; historians.length) { if (historians[i] ===\"Joan Scott\") { console.log(historians[i] + \" is my favourite.\"); } else { console.log(historians[i] + \", meh.\"); } i +=1; };         // Full list of configuration options available here: // https://github.com/hakimel/reveal.js#configuration Reveal.initialize({ controls: true, progress: true, history: true, center: false, slideNumber: 'c', rollingLinks: false, keyboard: true, mouseWheel: false, fragmentInURL: false, hashOneBasedIndex: false, pdfSeparateFragments: true, overview: true, width: \"100%\", height: \"100%\", margin: 0.10, minScale: 1.00, maxScale: 1.00, theme: Reveal.getQueryHash().theme, // available themes are in /css/theme transition: Reveal.getQueryHash().transition || 'convex', // see README of reveal.js for options transitionSpeed: 'default', // Optional libraries used to extend reveal.js dependencies: [ {src: '../../vendor/reveal//plugin/klipse_reveal.js'}, { src: '../../vendor/reveal//lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../vendor/reveal//plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../vendor/reveal//plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '../../vendor/reveal//plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }] });    /* Recompute layout upon changes by klipse. Code fragment from asciidoctor-revealjs-klipse by Timothy Pratley under GPLv3: https://github.com/timothypratley/asciidoctor-revealjs-klipse/blob/master/docs/docinfo-footer.html */ Reveal.addEventListener( 'slidechanged', function( event ) { window.dispatchEvent( new Event('resize') ); } );    "
},
{
	"uri": "http://digitalhistory.github.io/slides/05-01-js-functions/",
	"title": "05-01: Doing Stuff: functions",
	"tags": [],
	"description": "",
	"content": " 05-01: Doing Stuff: functions .underline { text-decoration: underline; }   /* Position computations of klipse get confused by reveal.js's scaling. Hence, scaling should be disabled with this code. Fix height of code area with scrollbar (use overflow instead of overflow-y to restore CodeMirror setting afterwards): */ .reveal section pre { max-height: 75vh; height: auto; overflow: auto; } /* Reset some reveal.js and oer-reveal settings: */ .reveal section pre .CodeMirror pre { font-size: 2.0em; line-height:0.8em; box-shadow: none; width: auto; padding: 0.4em; display: block; overflow: visible; } /* Enlarge cursor: */ .CodeMirror-cursor { border-left: 3px solid black; }   window.klipse_settings = { selector: '.language-klipse', selector_eval_html: '.language-klipse-html', selector_eval_js: '.language-klipse-javascript', selector_eval_js: '.language-klipse-js', selector_eval_php: '.language-klipse-php', selector_eval_python_client: '.language-klipse-python', selector_eval_ruby: '.language-klipse-ruby', selector_eval_scheme: '.language-klipse-scheme', selector_sql: '.language-klipse-sql' };   if( window.location.search.match( /print-pdf/gi ) ) { var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = '../../vendor/reveal//css/print/pdf.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); }    05-01: Doing Stuff: functions Matt Price  (view this presentation in another theme: Black (default) - White - League - Sky - Beige - Simple Serif - Blood - Night - Moon - Solarized )\t--   A Function is a variable(!)  functions are also a box into which you put stuff but when you look into the box, the \"stuff\" has changed we use them to change the state: to do things use whenever you're repeating an action or process     Defining a function function square(number) { return number * number; } let cube = function(number) { return number * number * number; }; console.log(square(2)); console.log(cube(3));   we'll use the first method:  keyword function followed by name then (parameters, if, you, need, them), then { , then statements, then }    name parameters definition return value      Remember this let historians= [\"Edward Gibbon\", \"Leopold von Ranke\", \"Edward Said\", \"Joan Scott\"]; let i = 0; while (i \u0026lt; historians.length) { console.log(historians[i] + \" was a historian.\"); i+=1; }     As a function function makeSentences(historians) { let i = 0, output = \"\"; while (i \u0026lt; historians.length) { output += historians[i] + \" was a historian.\\n\"; i+=1; } return output; } let h1 = [\"Edward Gibbon\", \"Leopold von Ranke\", \"Edward Said\", \"Joan Scott\"], h2 = [\"Orlando Patterson\", \"Michel Foucault\", \"Natalie Zeemon Davis\", \"Howard Zinn\"]; makeSentences(h1); //makeSentences(h2);     Finally we can talk about scope! let a = \u0026#39;just some string\u0026#39;, b = \u0026#39;some other string\u0026#39;; function scopeExample (anyString) { let a = \u0026#39;I set this value inside the function\u0026#39;; return (\u0026#39;inside the function, a=\"\u0026#39; + a + \u0026#39;\", not \u0026#39; + anyString); } // a // scopeExample(a); //anyString   outside the function, a = \"just some string\" inside, we redeclare it for the function scope and now a has new value anyString is only declared inside the function scope     Advanced scope let a = \"global scope a\"; console.log(a); for (i=0; i\u0026lt;6; i++) { let a = \"local scope a on iteration: \" + (i + 1) ; console.log(a) } console.log(a);   we can also redeclare let variables in an if/for/while \"block\" scope scales: global \u0026rarr; function \u0026rarr; block \u0026rarr; nested block \u0026rarr; etc etc any time you see { .. } you're in a new scope context!     Function Hints for Assignments  remember the return values!  debug by setting a variable to the function output, and using quokka to look at the value: function returnArray (first, second, third) { // you can define the array using \"new Array ()\" or just \"[ , , ]\" // don\u0026#39;t forget to return it // return ; // add the value here! } let a = returnArray (1, 3,5); a // quokka will display the value      Function note 1: Name vs. Return Value  A Function is a variable Robot function robotCleaner () { let output = \"I cleaned your room\"; return output; } let r = robotCleaner(); r   build a function to do something name it whatever you want the return value is what the function \"give you back* call it whenever you need it done   Name and Return Value are independent function robotCleaner () { let output = `Ha, ha! I have replaced your robot cleaner! Now your room is even messier! Bwa ha ha ha ha!` return output; } let r = robotCleaner(); r   To pass the assignment, always modify the function don't get confused and try to somehow modify the function call no intrinsic relationship between name and return value     Functions note 2: Parameter and Output  Your Return Value should Make use of the Parameter function greatWriter (name) { let output = \"Margaret Atwood was a great writer.\" return output } console.log(greatWriter(\"Margaret Atwood\")) // console.log(greatWriter(\"Toni Morrison\"))   Solution: don't use a STATICALLY DEFINED STRING as your output function evenGreaterWriter (name) { let output = name + \" was a great writer.\" return output } console.log(evenGreaterWriter(\"Margaret Atwood\")) // console.log(evenGreaterWriter(\"Toni Morrison\"))     Parts of things: elements, methods, properties let a=[\"name\", 0, \"otherinfo\"]; console.log(a[2]); console.log(a.length); console.log(a[length]); a.pop;   note strange syntax:  a[1]: second element of array a.length: a special way of finding the length of any array. Length is a property of a.  console.log(a)): log is a part of console. it takes a parameter , in this case a not that a.pop is not the same as a.pop()         // Full list of configuration options available here: // https://github.com/hakimel/reveal.js#configuration Reveal.initialize({ controls: true, progress: true, history: true, center: false, slideNumber: 'c', rollingLinks: false, keyboard: true, mouseWheel: false, fragmentInURL: false, hashOneBasedIndex: false, pdfSeparateFragments: true, overview: true, width: \"100%\", height: \"100%\", margin: 0.10, minScale: 1.00, maxScale: 1.00, theme: Reveal.getQueryHash().theme, // available themes are in /css/theme transition: Reveal.getQueryHash().transition || 'convex', // see README of reveal.js for options transitionSpeed: 'default', // Optional libraries used to extend reveal.js dependencies: [ {src: '../../vendor/reveal//plugin/klipse_reveal.js'}, { src: '../../vendor/reveal//lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../vendor/reveal//plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../vendor/reveal//plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '../../vendor/reveal//plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }] });    /* Recompute layout upon changes by klipse. Code fragment from asciidoctor-revealjs-klipse by Timothy Pratley under GPLv3: https://github.com/timothypratley/asciidoctor-revealjs-klipse/blob/master/docs/docinfo-footer.html */ Reveal.addEventListener( 'slidechanged', function( event ) { window.dispatchEvent( new Event('resize') ); } );    "
},
{
	"uri": "http://digitalhistory.github.io/slides/05-02-js-objects-props/",
	"title": "05-02: Javascript Objects and Properties",
	"tags": [],
	"description": "",
	"content": " 05-02: Javascript Objects and Properties .underline { text-decoration: underline; }   /* Position computations of klipse get confused by reveal.js's scaling. Hence, scaling should be disabled with this code. Fix height of code area with scrollbar (use overflow instead of overflow-y to restore CodeMirror setting afterwards): */ .reveal section pre { max-height: 75vh; height: auto; overflow: auto; } /* Reset some reveal.js and oer-reveal settings: */ .reveal section pre .CodeMirror pre { font-size: 2.0em; line-height:0.8em; box-shadow: none; width: auto; padding: 0.4em; display: block; overflow: visible; } /* Enlarge cursor: */ .CodeMirror-cursor { border-left: 3px solid black; }   window.klipse_settings = { selector: '.language-klipse', selector_eval_html: '.language-klipse-html', selector_eval_js: '.language-klipse-javascript', selector_eval_js: '.language-klipse-js', selector_eval_php: '.language-klipse-php', selector_eval_python_client: '.language-klipse-python', selector_eval_ruby: '.language-klipse-ruby', selector_eval_scheme: '.language-klipse-scheme', selector_sql: '.language-klipse-sql' };   if( window.location.search.match( /print-pdf/gi ) ) { var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = '../../vendor/reveal//css/print/pdf.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); }    05-02: Javascript Objects and Properties Matt Price  (view this presentation in another theme: Black (default) - White - League - Sky - Beige - Simple Serif - Blood - Night - Moon - Solarized )\t--   Objects are variables with named parts  parts are called properties, but if a part is a function, we call that part a method     let's eat let myFruit=\"orange\", mySandwich = \"just some bread!\", myBar=\"weird vegan bar\", myCookie=\"ginger\", myCandy=\"pulparindo\", mySnacks=[\"cliff bar\", \"cliff bar\", \"kind bar\"]; function eat (food) { console.log(\"Umm, that was a delicious \" + food + \".\"); } eat (myFruit); //eat (myBar); //eat (myCookie); //eat (myCandy);   we can eat any of the foods they're not related to each other, just floating around     Now let's make lunch let myFruit=\"orange\", mySandwich = \"just some bread!\", myBar=\"weird vegan bar\", myCookie=\"ginger\", myCandy=\"pulparindo\", mySnacks=[\"cliff bar\", \"cliff bar\", \"kind bar\"]; let myLunch = {};   myLunch is an empty object \u0026#x2013; it has no parts yet     Add some parts let myFruit=\"orange\", mySandwich = \"just some bread!\", myBar=\"weird vegan bar\", myCookie=\"ginger\", myCandy=\"pulparindo\", mySnacks=[\"cliff bar\", \"cliff bar\", \"kind bar\"]; let myLunch = { fruit: \"orange\", sandwich: mySandwich }; myLunch[\"snacks\"]=mySnacks; myLunch;   added parts in 3 ways: set directly in definition; set by reference in definition; added by reference after definition     Eat the Lunch let myFruit=\"orange\", mySandwich = \"just some bread!\", myBar=\"weird vegan bar\", myCookie=\"ginger\", myCandy=\"pulparindo\", mySnacks=[\"cliff bar\", \"cliff bar\", \"kind bar\"]; let myLunch = { fruit: \"orange\", sandwich: mySandwich }; myLunch[\"snacks\"]=mySnacks; function eatLunch (someLunch) { let output = \"\"; output += \"I\u0026#39;ll start with my \" + someLunch[\"fruit\"] + \"\\n\"; output += \"Next I want to eat \" + someLunch.sandwich + \"\\n\"; for (snack of someLunch.snacks) { output += \" I love my \" + snack + \"\\n\"; } return output; } eatLunch(myLunch);   rewrote eat to take advantage of the structure of lunch     Add Dessert let myLunch = { fruit: \"orange\", sandwich: \"just some bred!\", bar: \"weird vegan bar\", snacks: [\"cliff bar\", \"cliff bar\", \"kind bar\"], dessert: {cookie: \"ginger\", candy: \"pulparindo\"} }; console.log(\"I\u0026#39;m finally ready for my \" + myLunch.dessert.cookie);   objects can be arbitrarily complex and contain other objects     Eat The Lunch as a Method  Reminder function eatLunch (someLunch) { let output = \"\"; output += \"I\u0026#39;ll start with my \" + someLunch[\"fruit\"] + \"\\n\"; output += \"Next I want to eat \" + someLunch.sandwich + \"\\n\"; for (snack of someLunch.snacks) { output += \" I love my \" + snack + \"\\n\"; } return output; }   Writing the Method let myLunch = { fruit: \"orange\", sandwich: \"just some bred!\", bar: \"weird vegan bar\", snacks: [\"cliff bar\", \"cliff bar\", \"kind bar\"], dessert: {cookie: \"ginger\", candy: \"pulparindo\"}, eatMe: function() { let output = \"\"; output += \"I\u0026#39;ll start with my \" + this[\"fruit\"] + \"\\n\"; output += \"Next I want to eat \" + this.sandwich + \"\\n\"; for (snack of this.snacks) { output += \" I love my \" + snack + \"\\n\"; } return output; } }; myLunch.eatMe; myLunch.eatMe();   note the differences between eat() and myLunch.eatMe:  the method doesn't take a parameter! instead, we get to use this, which refers to the current object scope      Finally some History let greatWar = { name: \"The First World War\", start: 1914, end: 1918, badGuys: [\"Germany\", \"Austria-Hungary\", \"Ottoman Empire\"], goodGuys: [\"All our Friends\"], scale: \"Catastrophe\" } // console.log(greatWar[\"name\"] + \" lasted for \" + (greatWar.end - greatWar.start) + \" years.\");     more objects let greatWar = { name: \"The First World War\", start: 1914, end: 1918, badGuys: [\"Germany\", \"Austria-Hungary\", \"Ottoman Empire\"], goodGuys: [\"All our Friends\"], scale: \"Catastrophe\", battles: [ { name: \"The Battle of Vimy Ridge\", year: 1915, casualties: 34000 }] } console.log(greatWar[\"name\"] + \" lasted for \" + (greatWar.end - greatWar.start) + \" years.\"); console.log(greatWar.battles[0].name + \" was ferocious and horrific. There were \" + greatWar.battles[0].casualties + \" casualties.\");     Basic Logic with Objects let goodGuys = [\"CA\", \"UK\", \"US\"]; let badGuys=[\"DE\", \"AH\"]; let people = [ {name: \"Kaiser Wilhelm\", nat: \"DE\"}, {name:\"Winston Churchill\", nat: \"UK\"}]; for (person of people) { if (badGuys.includes(person.nat)) { //console.log(person.name + \": BOOOOOOOOOOOO!!!\"); } };     Branching Logic with Objects let goodGuys = [\"CA\", \"UK\", \"US\"]; let badGuys=[\"DE\", \"AH\"]; let people = [ {name: \"Kaiser Wilhelm\", nat: \"DE\"}, {name:\"Winston Churchill\", nat: \"UK\"}]; for (person of people) { if (badGuys.includes(person.nat)) { console.log(person.name + \": BOOOOOOOOOOOO!!!\"); } else { console.log(person.name + \": YAAAAYYY!!!\"); } };     In-class coding exercise!   Some Data  Take a look at this the code snippets repo  Now consider the following javascript array of objects (here you can see how similar JSON is to regular javascript objects) orgs = [ {\"name\": \"African National Congress\", \"founded\": 1912, \"link\": \"https://en.wikipedia.org/wiki/African_National_Congress\" }, {\"name\": \"Pan Africanist Congress\", \"founded\": 1959, \"link\": \"https://en.wikipedia.org/wiki/Pan_Africanist_Congress_of_Azania\" }, {\"name\": \"South African Communist Party\", \"founded\": 1921, \"link\": \"https://en.wikipedia.org/wiki/South_African_Communist_Party\" }, { \"name\": \"Black Sash\", \"founded\": 1955, \"link\": \"https://en.wikipedia.org/wiki/Black_Sash\" }, { \"name\": \"South African Students\u0026#39; Organization\", \"founded\": 1968, \"link\": \"https://en.wikipedia.org/wiki/South_African_Students%27_Organisation\" } ] orgs   Our objective is to read this variable and use it to build sentences about anti-apartheid organizations in South Africa.  using JSON data function describeOrg (org) { return org.name + \u0026#39; was founded in \u0026#39; + org.founded + \u0026#39;.\u0026#39;; } console.log(describeOrg(orgs[0]));   Looping through the data function describeOrg (org) { return org.name + \u0026#39; was founded in \u0026#39; + org.founded + \u0026#39;.\u0026#39;; } for (let o of orgs) { console.log(describeOrg(o)); }         // Full list of configuration options available here: // https://github.com/hakimel/reveal.js#configuration Reveal.initialize({ controls: true, progress: true, history: true, center: false, slideNumber: 'c', rollingLinks: false, keyboard: true, mouseWheel: false, fragmentInURL: false, hashOneBasedIndex: false, pdfSeparateFragments: true, overview: true, width: \"100%\", height: \"100%\", margin: 0.10, minScale: 1.00, maxScale: 1.00, theme: Reveal.getQueryHash().theme, // available themes are in /css/theme transition: Reveal.getQueryHash().transition || 'convex', // see README of reveal.js for options transitionSpeed: 'default', // Optional libraries used to extend reveal.js dependencies: [ {src: '../../vendor/reveal//plugin/klipse_reveal.js'}, { src: '../../vendor/reveal//lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../vendor/reveal//plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../vendor/reveal//plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '../../vendor/reveal//plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }] });    /* Recompute layout upon changes by klipse. Code fragment from asciidoctor-revealjs-klipse by Timothy Pratley under GPLv3: https://github.com/timothypratley/asciidoctor-revealjs-klipse/blob/master/docs/docinfo-footer.html */ Reveal.addEventListener( 'slidechanged', function( event ) { window.dispatchEvent( new Event('resize') ); } );    "
},
{
	"uri": "http://digitalhistory.github.io/slides/04-02-abundance/",
	"title": "Abundance (Prelude to Distant Reading)",
	"tags": [],
	"description": "",
	"content": " Abundance (Prelude to Distant Reading) .underline { text-decoration: underline; }   /* Position computations of klipse get confused by reveal.js's scaling. Hence, scaling should be disabled with this code. Fix height of code area with scrollbar (use overflow instead of overflow-y to restore CodeMirror setting afterwards): */ .reveal section pre { max-height: 70vh; height: auto; overflow: auto; } /* Reset some reveal.js and oer-reveal settings: */ .reveal section pre .CodeMirror pre { font-size: 2.0em; box-shadow: none; width: auto; padding: 0.4em; display: block; overflow: visible; } /* Enlarge cursor: */ .CodeMirror-cursor { border-left: 3px solid black; }   window.klipse_settings = { selector: '.language-klipse', selector_eval_html: '.language-klipse-html', selector_eval_js: '.language-klipse-javascript', selector_eval_js: '.language-klipse-js', selector_eval_php: '.language-klipse-php', selector_eval_python_client: '.language-klipse-python', selector_eval_ruby: '.language-klipse-ruby', selector_eval_scheme: '.language-klipse-scheme', selector_sql: '.language-klipse-sql' };   if( window.location.search.match( /print-pdf/gi ) ) { var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = '../../vendor/reveal//css/print/pdf.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); }    Abundance (Prelude to Distant Reading) Matt Price  (view this presentation in another theme: Black (default) - White - League - Sky - Beige - Simple Serif - Blood - Night - Moon - Solarized )\t--   Recap  \"Public sphere\" at a turning point Transformation by automated agents and encoded text   War is Peace. Freedom is Slavery. Ignorance is Strength.  Plan for the day  Problems of Abundance Distant Reading: a method for textual overload? Discussion: how do you respond to information abundance? post-class period ONLY for students who failed the tests, or did not receive a mark     History in the age of scarcity   The members of prehistoric societies did not think they lived in prehistoric times. They merely lacked a good preservation medium. (Auerbach, quoted in Rosenzweig)    lots was going on, lots of continuity, lots we will never know b/c oral preservation is terrible at outliving a cultural tradition      Scarcity  Historically, very little recorded Even less preserved historian's task was to locate rare sources in faraway places   Implications  History skewed to those whose records appeared worth saving record always fragmentary  Historian free to fill in gaps  BUT: often possible to read large percentage of relevant sources     Age of Abundance   Tentative efforts are afoot to preserve our digital cultural heritage. If they succeed, historians will face a second, profound challenge\u0026#x2013;what would it be like to write history when faced by an essentially complete historical record? (Rosenzweig)    much more recorded than in the past vastly more preserved, at least for now increasing percentage of historical works as well    completely different situation than we used to have!    Mechanical Speech  auto-preservation but by and for whom? Google, FB, and Twitter are preserving lots of data. As are Tesla and Samsung. But who will get to see it? How does a historian compete? (cf. COVID tracking data)     Can we tell stories? Can we do research?  no longer possible to read everything!  who will read it for us? How will we be experts? Can we automate our reading?  Narrative form ill-suited to massive quantities of data  can we develop new types of narratives?  Big questions may be answerable!  What used to be pure speculation, can perhaps now be made more concrete and compelling  How does role of religion in public discourse change over time? how do railroads impact social and economic development? others?      What Big Data Means for Old Documents   digitization does provide scale (or quantity) but does so at the price of rich, largely manual encoding. Visualization, customization, personalization, and similar analytical services increasingly familiar to us depend upon born-digital objects in which a great deal of structural and semantic knowledge has been encoded. The information captured on page images is, by contrast, implicit and often not directly accessible to the machines that will be always their first, often their only, and arguably their most important readers. (CILR)    Problems of Preservation  physical media software turnover \u0026amp; bitrot capturing dynamic/interactive media      Abundance: Summary  \"Abundance\" offers many challenges  preservation interpretation access  Does history itself need to be reformed?  What relation to sources? What kinds of arguments? What narrative forms?      Introduction to The Reading Problem: No Clothes, No Body   It's not that the emperor has no clothes(that would be fine); it's that no one knows what the emperor looks like. (Ramsey 2010)     \"It's one thing to worry that your canon isn't sufficiently inclusive, or broad, or representative. It's another thing when your canon has no better chance of being these thngs than a random selection. When we get up into the 14-million book range, books that are known by more than 2 living people are already \"popular\"   nil         // Full list of configuration options available here: // https://github.com/hakimel/reveal.js#configuration Reveal.initialize({ controls: true, progress: true, history: true, center: false, slideNumber: 'c', rollingLinks: false, keyboard: true, mouseWheel: false, fragmentInURL: false, hashOneBasedIndex: false, pdfSeparateFragments: true, overview: true, width: \"100%\", height: \"100%\", margin: 0.10, minScale: 1.00, maxScale: 1.00, theme: Reveal.getQueryHash().theme, // available themes are in /css/theme transition: Reveal.getQueryHash().transition || 'convex', // see README of reveal.js for options transitionSpeed: 'default', // Optional libraries used to extend reveal.js dependencies: [ {src: '../../vendor/reveal//plugin/klipse_reveal.js'}, { src: '../../vendor/reveal//lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../vendor/reveal//plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../vendor/reveal//plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '../../vendor/reveal//plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }] });    /* Recompute layout upon changes by klipse. Code fragment from asciidoctor-revealjs-klipse by Timothy Pratley under GPLv3: https://github.com/timothypratley/asciidoctor-revealjs-klipse/blob/master/docs/docinfo-footer.html */ Reveal.addEventListener( 'slidechanged', function( event ) { window.dispatchEvent( new Event('resize') ); } );    "
},
{
	"uri": "http://digitalhistory.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://digitalhistory.github.io/slides/04-02-distant-reading/",
	"title": "Distant Reading",
	"tags": [],
	"description": "",
	"content": " Distant Reading .underline { text-decoration: underline; }   /* Position computations of klipse get confused by reveal.js's scaling. Hence, scaling should be disabled with this code. Fix height of code area with scrollbar (use overflow instead of overflow-y to restore CodeMirror setting afterwards): */ .reveal section pre { max-height: 70vh; height: auto; overflow: auto; } /* Reset some reveal.js and oer-reveal settings: */ .reveal section pre .CodeMirror pre { font-size: 2em; box-shadow: none; width: auto; padding: 0.4em; display: block; overflow: visible; } /* Enlarge cursor: */ .CodeMirror-cursor { border-left: 3px solid black; }   window.klipse_settings = { selector: '.language-klipse', selector_eval_html: '.language-klipse-html', selector_eval_js: '.language-klipse-javascript', selector_eval_js: '.language-klipse-js', selector_eval_php: '.language-klipse-php', selector_eval_python_client: '.language-klipse-python', selector_eval_ruby: '.language-klipse-ruby', selector_eval_scheme: '.language-klipse-scheme', selector_sql: '.language-klipse-sql' };   if( window.location.search.match( /print-pdf/gi ) ) { var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = '../../vendor/reveal//css/print/pdf.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); }    Distant Reading Matt Price  (view this presentation in another theme: Black (default) - White - League - Sky - Beige - Simple Serif - Blood - Night - Moon - Solarized )\t--   Recap  \"Public sphere\" at a turning point Transformation by automated agents and encoded text   War is Peace. Freedom is Slavery. Ignorance is Strength.  Plan for the day  Problems of Abundance Distant Reading: a method for textual overload? Discussion: how do you respond to information abundance? post-class period ONLY for students who failed the tests, or did not receive a mark     History in the age of scarcity   The members of prehistoric societies did not think they lived in prehistoric times. They merely lacked a good preservation medium. (Auerbach, quoted in Rosenzweig)   lots was going on, lots of continuity, lots we will never know b/c oral preservation is terrible at outliving a cultural tradition    Scarcity  Historically, very little recorded Even less preserved historian's task was to locate rare sources in faraway places   Implications  History skewed to those whose records appeared worth saving record always fragmentary  Historian free to fill in gaps  BUT: often possible to read large percentage of relevant sources     Age of Abundance   Tentative efforts are afoot to preserve our digital cultural heritage. If they succeed, historians will face a second, profound challenge\u0026#x2013;what would it be like to write history when faced by an essentially complete historical record? (Rosenzweig)   completely different situation than we used to have!    Abundance  much more recorded than in the past vastly more preserved, at least for now increasing percentage of historical works as well   Mechanical Speech  auto-preservation but by and for whom?   Google, FB, and Twitter are preserving lots of data. As are Tesla and Samsung. But who will get to see it? How does a historian compete?   Problems of Preservation  physical media software turnover \u0026amp; bitrot capturing dynamic/interactive media     What big data means for old documents   digitization does provide scale (or quantity) but does so at the price of rich, largely manual encoding. Visualization, customization, personalization, and similar analytical services increasingly familiar to us depend upon born-digital objects in which a great deal of structural and semantic knowledge has been encoded. The information captured on page images is, by contrast, implicit and often not directly accessible to the machines that will be always their first, often their only, and arguably their most important readers. (CILR)   Can we tell stories? Can we do research?  no longer possible to read everything!  who will read it for us? How will we be experts? Can we automate our reading?  Narrative form ill-suited to massive quantities of data  can we develop new types of narratives?  Big questions may be answerable!  What used to be pure speculation, can perhaps now be made more concrete and compelling  How does role of religion in public discourse change over time? how do railroads impact social and economic development? others?       Abundance: Summary  \"Abundance\" offers many challenges  preservation interpretation access  Does history itself need to be reformed?  What relation to sources? What kinds of arguments? What narrative forms?      No Clothes, no body   It's not that the emperor has no clothes(that would be fine); it's that no one knows what the emperor looks like. (Ramsey 2010)   \"It's one thing to worry that your canon isn't sufficiently inclusive, or broad, or representative. It's another thing when your canon has no better chance of being these thngs than a random selection. When we get up into the 14-million book range, books that are known by more than 2 living people are already \"popular\"     Distant Reading: Abstract Models   \u0026#x2026;distance is however not an obstacle, but a specific form of knowledge: fewer elements, hence a sharper sense of their overall interconnection. Shapes, relations, structures. Forms. Models.   The opposite of close?   Dorothea, endowed with the extraordinary capacity for attentiveness that is \"ardor,\" is given to the strongest denunciations of the trivial, the most overwhelming anxieties of admitting the trivial into her life of any character in the novel. She is blind to the possibility that attention has the capacity to reveal that what seems trivial is in fact significant. She fears instead that the attention is wasted by devoting itself to those common objects which really are trivial, which have no redeeming significance:  \"\u0026#x2026;I should learn everything then,\" she said to herself, still walking quickly along the bridle road through the wood. \"It would be my duty to study that I might help him the better in his great works. There would be nothing trivial about our lives. Everyday-things with us would mean the greatest things.\"   to notice:  analysis of passage longer than passage itself.    To the point of deconstruction   If the pharmakon is ambivalent, it is because it constitutes the medium in which opposites are opposed, the movement and the play that links them among themselves, reverses them or makes one side cross over into the other (soul/ body, good/ evil, inside/ outside, memory/ forgetfulness, speech/ writing, etc.). The pharmakon is the movement, the locus, and the play: (the production of) difference. It is the différance of difference. It holds in reserve, in its undecided shadow and vigil, the opposites and the differends that the process of discrimination will come to carve out. Contradictions and pairs of opposites are lifted from the bottom of this diacritical, differing, deferring, reserve. Already inhabited by différance, this reserve, even though it precedes the opposition between different effects, even though it preexists differences as effects, does not have the punctual simplicity of a coincidentia oppositorum. It is from this fund that dialectics draws its reserves.   Closeness  Literary study long organized around \"close\" reading \"Hermeneutic\" model of scholarship defines what it has meant to understand or master a text   Questioning Close Reading  But what is understanding? what is literature? what is the scholar's goal?     Some Numbers  ~62,000 new Novels published in English in the US/year ~304,000 new and re-issued books in US/year ~129,000,000 books collected in world's libraries   not possible to read these  can one still be an expert?    New forms of Understanding?  instead of, or in parallel with, close reading? apprehension of large-scale phenomena studying models, rather than texts themselves   Questions to consider  Does this count as comprehension? what new skills are required? What are the weaknesses of this form?     Graphs   condense data conceptualize mathematically convince readers a fundamentally rhetorical tool   Moretti's Graphs     Quantitative research provides a type of data which is ideally independent of interpretations. (p.9)   yet, the graph is an argument: rise, fall, rise   A History of Readers    each phase a new \"kind\" of reader intensive, extensive, generic   Cycles   Event, cycle, longue durée: three time frames which have fared very unevenly in literary studies.  \u0026#x2026; cycles constitute temporary structures within the historical flow. (p.14)   event \u0026rarr; close reading longue durée \u0026rarr; grand narrative cycle \u0026rarr; ?   Cycles in Literature     A genre exhausts its potentialities\u0026#x2026; when its inner form is no longer capable of representing the most significant aspects of contemporary reality. (p. 17, fn 7)   Genre \u0026amp; Generation   \u0026#x2026; some kind of generational mechanism seems the best way to account for the regularity of the novelistic cycle\u0026#x2026; (p. 22)   \"Normal literature\" but \"revolution\" as \"dying out\"   From \"the shift\" to \"a shift\"     \u0026#x2026;the point is not who prevails in this or that skirmish, but exactly the opposite: no victory is ever definitive\u0026#x2026; the form keeps oscillating back and forth between the two groups. (p.29)   Moretti's method   \u0026#x2026;the real point here\u0026#x2026; is the total heterogeneity of problem and solution: to make sense of quantitative data, I had to abandon the quantitative universe, and turn to morphology: evoke form, in order to explain figures.   how justified is this move? what do we learn from it?     Maps   There is a very simple question about literary maps: what exactly do they do?   like graphs, maps are a persuasive tool What does it mean to \"map\" a novel?   What is a map?        What is a map?  abstract visual representation of a physical or imagined space   Moretti's method       The form of an object is a 'diagram of forces', in this sense, at least that from it we can\u0026#x2026; deduce the forces that \u0026#x2026; have acted upon it. (p.57)   Our Village   In the 1824 volume\u0026#x2026; the vilage was the undisputed centre of the surrounding countryside: the centripetal effects of the force \"from within\" were omnipresent, while the force \"from without\" was nowhere to be seen. (p. 57)  Two collections later, in 1828, the village's gravitation field is already weaker\u0026#x2026; Something is wrong with the force from within, but as no counter-force challenges it yet, the basic pattern\u0026#x2026; remains in place. But by 1832\u0026#x2026; the village's centripetal force is reduced to nothing, and the bulk of the book moves away\u0026#x2026; (p. 58-59)   Our Village \u0026#x2013; Extremes      Modelling the text  reduce text to the model presume that sociological factors are determinative sustain focus on form (\"a quantitative history of literature is also a profoundly formalist one\" -p.25, fn 14) interpret model in light of theories     Trees      Moretti's Evolutionism  Citations: Darwin, Feldman, Cavalli-Sforza In his genealogy: Karl Marx; H. G. Wells; E. O. Wilson; all of evolutionary psychology   Plots    Clues as evolved phenomenon  Doyle as canonical starting point for detective fiction But has a context; how to describe? note: not a personal context!   Styles    Free Indirect Style   A peculiar mix of indirect and direct discourse, which draws the verbal tenses and pronouns from the former, and the tone and the order of the sentence from the latter:  It was the abode of noise, disorder, and impropriety. Nobody was in their right place, nothing was done as it ought to be. She could not respect her parents, as she had hoped.   Why FIS?  appears to mark a major social transformation (\"halfway btwn the social doxa and the individual voice, FIS is a good indicator of their changing balance of forces\")  Moretti's goal: to quantitatively (?) trace these forces   Take a form, follow it from space to space, and study the reasons for its transformations: the 'opportunistic, hence unpredictable' reasons of evolution.    Problematics  Teleological thinking? dealing with the \"twisted branching\"? is this really \"quantitative\"? Does this qualify as \"insight\"?     Summary: Moretti and History  labor-intensive quantification of sources glossing over problems of quantification continued reliance on expert opinion \u0026#x2013; but how is that expertise to be cultivated?         // Full list of configuration options available here: // https://github.com/hakimel/reveal.js#configuration Reveal.initialize({ controls: true, progress: true, history: true, center: false, slideNumber: 'c', rollingLinks: false, keyboard: true, mouseWheel: false, fragmentInURL: false, hashOneBasedIndex: false, pdfSeparateFragments: true, overview: true, width: \"100%\", height: \"100%\", margin: 0.10, minScale: 1.00, maxScale: 1.00, theme: Reveal.getQueryHash().theme, // available themes are in /css/theme transition: Reveal.getQueryHash().transition || 'convex', // see README of reveal.js for options transitionSpeed: 'default', // Optional libraries used to extend reveal.js dependencies: [ {src: '../../vendor/reveal//plugin/klipse_reveal.js'}, { src: '../../vendor/reveal//lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../vendor/reveal//plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../vendor/reveal//plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '../../vendor/reveal//plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }] });    /* Recompute layout upon changes by klipse. Code fragment from asciidoctor-revealjs-klipse by Timothy Pratley under GPLv3: https://github.com/timothypratley/asciidoctor-revealjs-klipse/blob/master/docs/docinfo-footer.html */ Reveal.addEventListener( 'slidechanged', function( event ) { window.dispatchEvent( new Event('resize') ); } );    "
},
{
	"uri": "http://digitalhistory.github.io/slides/",
	"title": "Lecture Slides",
	"tags": [],
	"description": "",
	"content": "Here are the lecture slides. When you click on one of the links below, a set of lecture slides will appear in the browswer window. All of the site menus \u0026amp;c will disappear, so you may want to open in a new tab (middle click on linux, right-click ➡ context-menu on mac \u0026amp; windows). Navigate through the slides with the following keys:\n n: next slide p: previous slide arrow keys: left, right, up, down (the slide deck is 2-dimensional) escape: slide deck overview f: activate fullscreen mode (escape exits) s: open a separate window with speaker notes. This view shows current slide, upcoming slide, and any off-slide speaker notes  If slide content is cut off, try increasing or decreasing the default font-size with Ctrl-+ and Ctrl-- (Cmd-+ and Cmd-- on Mac). The presentation framework will adjust margins automatically ,sometimes with surprising results.\nTechnical note: these slides are composed as text in Org Mode, exported to reveal.js-compatible HTML by org-re-reveal, and rendered in a grid layout by a custom theme.\nEnjoy!\n"
},
{
	"uri": "http://digitalhistory.github.io/slides/10-02-popcorn/",
	"title": "Popcorn/Oral History",
	"tags": [],
	"description": "",
	"content": " Popcorn/Oral History .underline { text-decoration: underline; }   /* Position computations of klipse get confused by reveal.js's scaling. Hence, scaling should be disabled with this code. Fix height of code area with scrollbar (use overflow instead of overflow-y to restore CodeMirror setting afterwards): */ .reveal section pre { max-height: 70vh; height: auto; overflow: auto; } /* Reset some reveal.js and oer-reveal settings: */ .reveal section pre .CodeMirror pre { font-size: 2.0em; box-shadow: none; width: auto; padding: 0.4em; display: block; overflow: visible; } /* Enlarge cursor: */ .CodeMirror-cursor { border-left: 3px solid black; }   window.klipse_settings = { selector: '.language-klipse', selector_eval_html: '.language-klipse-html', selector_eval_js: '.language-klipse-javascript', selector_eval_js: '.language-klipse-js', selector_eval_php: '.language-klipse-php', selector_eval_python_client: '.language-klipse-python', selector_eval_ruby: '.language-klipse-ruby', selector_eval_scheme: '.language-klipse-scheme', selector_sql: '.language-klipse-sql' };   if( window.location.search.match( /print-pdf/gi ) ) { var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = '../../vendor/reveal//css/print/pdf.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); }    Popcorn/Oral History Matt Price  (view this presentation in another theme: Black (default) - White - League - Sky - Beige - Simple Serif - Blood - Night - Moon - Solarized )\t--   Taking Stock  The End is Nigh!! Assignment 5: Required for everyone (!!)     Oral History Assignment  intellectual goal: think hard about nature of oral history, and how to use digital media effectively technical goal: think more about working with non-textual media, about HTML structures, and about APIs (monsters in the deep)     What the heck is this?  Popcorn: media \"events\" framework for audio \u0026amp; video annotation  developed by Mozilla for about 5 years before it was orphaned. perhaps being revivified keeps track of media playback, and renders specified web content between start and end timecodes. for us: turns audio file into a kind of imovie-style slideshow except that the \"slides\" are arbitrary web content instead of photos. in particular, can include google maps, wikipeida pages, and some other types of content.      Popcorn framework  Library-Plugin framework  main library tracks media element, renders content plugins generate html to feed to main every \"event\" (or \"slide\") is generated by calling a plugin with a JS object as parameter. cf. line 42 of popcorn-data-from-google.js to see how this works    we don't have to worry about the main library  basically no coding to do o nthis assignment!  focus on markdown skills, google sheet      Plugin Structure pop.footnote({ start: 50, end: 90, text: \"Second Footnote!\", target: \"popcorn-container\" });   plugins define a method of the main popcorn object each plugin has its own required and optional parameters, which you can read about in the docs      Google sheets: API Power  Line 16 in js/~popcorn-data-from-google.js: var public_spreadsheet_key = \u0026#39;https://docs.google.com/spreadsheets/d/1pL_Lj62_ZcW7iawTCQ_5BQsmdynCtC8y5BCNy3k2LOM/pubhtml?gid=0\u0026amp;single=true\u0026#39;;   uses Google JSON API, which represents each spreadsheet row as a JSON object column headers as property names script iterates through rows \u0026amp; invokes appropriate popcorn plugin for each row, w/ column values as plugin parameter properties if you use some other plugin that I haven't mentioned, you may need to add a column! YOU DON'T HAVE TO DO THE PROGAMMING WORK \u0026#x2013; managed for you     Tabletop: small interpreter demon  Google Spreadsheets API speaks a Byzantine language of Hell Tabletop lets you speak simple JS cf very clear and helpful Tabletop instructions and also line 21 in popcorn-data-from-google.js:  var mytables = Tabletop.init( { key: public_spreadsheet_key, callback: processInfo , simpleSheet: false } );     Getting Started: First, Copy Spreadsheet  go to my sheet: https://docs.google.com/spreadsheets/d/1pL_Lj62_ZcW7iawTCQ_5BQsmdynCtC8y5BCNy3k2LOM/edit#gid=0 File \u0026#x2013;\u0026gt; Make a copy Under File \u0026#x2013;\u0026gt; Publish to the web, make sure yr sheet is published NOT DONE YET! go to \"Share\" and \"Copy Link to Share\" this is your new key!!!! insert into your js file    Alternative Method var public_spreadsheet_key = \u0026#39;https://docs.google.com/spreadsheets/d/1pL_Lj62_ZcW7iawTCQ_5BQsmdynCtC8y5BCNy3k2LOM/pubhtml?gid=0\u0026amp;single=true\u0026#39;;   Replace ONLY THE PART BTWN d and /pubhtml with the spreadsheet \"key\" from yr new sheet      Styling Popcorn Plugins  Page-specific code is found in /css/oh-styles.css .main-container { grid-template-areas: \"intro popcorn\" \"main main\"; grid-auto-columns: 1fr; grid-template-rows: 50vh 1fr; } aside#popcorn-container { grid-area: popcorn; background-color: var(--color-highlight2); border: 1px solid var(--color-custom-borders); display: flex; flex-direction: row; overflow-y: scroll; overflow-x: hidden; flex-wrap: wrap; max-height: 100%; /* space things out! */ justify-content: space-around; } aside#popcorn-container \u0026gt; * { /* default base width for plugins */ flex-basis: var(--default-width); flex-shrink: 1; flex-grow: 1; } /* most of the plugins will create divs or other elements w/ class \"pluginname-plugin\" */ /* here's one example of styling particular plugins differently from others */ #popcorn-container figure.figure-plugin { /* an example of setting the figure as a bit larger than the others. */ flex-basis: calc(var(--default-width)*4/3); max-width: 100%; } #popcorn-container .leaflet-plugin, #popcorn-container .googlemap-plugin { /* make these full-width by default */ flex-basis: 100%; } /* you can also use the `id` column to address *most* plugins (but not all!) */     Some thoughts  if you are using a video (instead of audio), you may want to make changes to the grid. e.g., you might want to put the video inside the grid, next to the annotations, and either move intro to its own row or just eliminate the intro section altogether. This would likely involve change to the HTML as well. are you happy with the default display of the plugins? This design assumes that you are unlikely to have more than 2 plugins visible at the same time. If you never have more than one, you may want to set --default-width to 100%. Maybe you don't even want to use a flex container! set plugin-type and plugin-instance CSS with class and id properties. In general, plugin instance containers have both a plugin-specific class pluginName-plugin and an instance-spcific id (the id property you set in a spreadsheet row). notice the use of CSS variables. The syntax can sometimes feel a little heavy, but ultimately they mike life a lot easier.      Getting Started with code  Install npm \u0026amp; run server cd advanced-topics-yr-name npm install npm run server \u0026amp;     Navigate to your site firefox localhost:8080/oral-history     use DevTools to look for errors   Error Sources  bad spreadsheet URL bad time codes etc. in spreadsheet JS syntax errors in popcorn-data-from-google.js JS syntax errors in index.html      Good and Less Good Annotations  Good Annotations:   Add context/info   Stunde null (\"hour zero\") refers to the period of time directly after World War II, when the future direction and status of the old German Reich was radically undertain, and a dramatic reset of all social and political expectations seemed inevitable.      clarify content   \"His Holiness\", that is, the Dalai Lama.  enhance rather than distract    Less Good Annotations:  are not directly tied to what's being discussed in your media file pass too quickly to be comprehended in real time are too cluttered to interpret      Extra fun  Seek Function const seek = function (time) { document.getElementById(\"media\").currentTime= time; };   Use in Markdown thus: When \u0026lt;a href=\"javascript:seek(75)\"\u0026gt;Jonathan discusses the trauma of wartime (1:15)\u0026lt;/a\u0026gt;, he uses language that clearly echos that of professional psychiatric discourse as it came into vogue in the 1970's.     Styling media container in chrome audio::-webkit-media-controls-enclosure { background-color: rgba(20,20,20,0.4); border-radius: 5px; } audio { width: 100%; }       Your Questions/Efforts        // Full list of configuration options available here: // https://github.com/hakimel/reveal.js#configuration Reveal.initialize({ controls: true, progress: true, history: true, center: false, slideNumber: 'c', rollingLinks: false, keyboard: true, mouseWheel: false, fragmentInURL: false, hashOneBasedIndex: false, pdfSeparateFragments: true, overview: true, width: \"100%\", height: \"100%\", margin: 0.10, minScale: 1.00, maxScale: 1.00, theme: Reveal.getQueryHash().theme, // available themes are in /css/theme transition: Reveal.getQueryHash().transition || 'convex', // see README of reveal.js for options transitionSpeed: 'default', // Optional libraries used to extend reveal.js dependencies: [ {src: '../../vendor/reveal//plugin/klipse_reveal.js'}, { src: '../../vendor/reveal//lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../vendor/reveal//plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../vendor/reveal//plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '../../vendor/reveal//plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }] });    /* Recompute layout upon changes by klipse. Code fragment from asciidoctor-revealjs-klipse by Timothy Pratley under GPLv3: https://github.com/timothypratley/asciidoctor-revealjs-klipse/blob/master/docs/docinfo-footer.html */ Reveal.addEventListener( 'slidechanged', function( event ) { window.dispatchEvent( new Event('resize') ); } );    "
}]