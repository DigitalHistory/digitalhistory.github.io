[
{
	"uri": "https://digitalhistory.github.io/dh-website/syllabus/",
	"title": "Course Docs",
	"tags": [],
	"description": "",
	"content": "  Syllabus  "
},
{
	"uri": "https://digitalhistory.github.io/dh-website/_header/",
	"title": "header",
	"tags": [],
	"description": "",
	"content": "HIS 393 Digital History\n"
},
{
	"uri": "https://digitalhistory.github.io/dh-website/assignment/00-git/",
	"title": "Assignment 00: Git and Github",
	"tags": [],
	"description": "",
	"content": " General Description If you\u0026rsquo;re looking for History, Please, follow that link!\nOne of the hardest parts of this course for many people is setting up their working environment. In this assignment you will be need to set up your working environment and then use Git, much as we did in class, but this time manipulating the command line.\nThis may take longer than you think, and it\u0026rsquo;s due soon. Please get started soon by following the instructions on the Assignment 0 website.\n"
},
{
	"uri": "https://digitalhistory.github.io/dh-website/assignment/01-html-css/",
	"title": "Assignment 01: HTML &amp; CSS self-study",
	"tags": [],
	"description": "",
	"content": " Due Date: Jan. 26\nGeneral Description You do not have to become a coder to do well in this course. However, you will have to be willing to explore technical skills that you might not otherwise develop as a humanities scholar. In this second assignment, we\u0026rsquo;ll use one of the web\u0026rsquo;s many excellent self-education platforms to learn the very basics of how web pages work. We\u0026rsquo;ll then extend that knowledge with a set of slightly more advanced programming exercises.\nWeb pages are composed of three components: HTML, CSS, and Javascript. HTML provides the structure and content of a web page; CSS controls the style of presentation; and Javascript permits dynamic modification of both. To explore the web from the inside, you need to be a little bit comfortable in all three.\nIn this assignment you will be introduced to HTML and CSS. First you will complete the HTML \u0026amp; CSS course on Codecademy.com. Then you\u0026rsquo;ll be asked to do a set of small problems and submit them via Github.\nAssignment The assignment details are listed in the Assignment 1 Github repository. Read them there and follow them carefully. Be sure to budget enough time.\n"
},
{
	"uri": "https://digitalhistory.github.io/dh-website/assignment/02-javascript/",
	"title": "Assignment 02: Javascript Basics",
	"tags": [],
	"description": "",
	"content": "Due Date: Feb. 02\n"
},
{
	"uri": "https://digitalhistory.github.io/dh-website/assignment/03-spatial-history/",
	"title": "Assignment 03: Spatial History",
	"tags": [],
	"description": "",
	"content": " Due Date: March 02\nIn class, we made a kind of toy Google Map out of hand-coded HTML, CSS, and Javascript. You will remember it from the course website, from JSBin, and from Github.\nYour next assignment builds directly from that in-class exercise, and should be quite a bit easier to manage, technically, than your last assignment. Essentially, you will repeat the in-class assignment with much greater intellectual effort, but using the same technical framework. Please work directly with the files in the Github repo, either by forking the repo, or downloading the zipball.\nAssignment Build a web page that includes a Google Map (complete with markers) as part of a short but substantive historical exploration of a historical topic of interest to you. We discussed a number of such themes in the class (you should remember them from our discussion). The final product should meet the following criteria:\n Essay: You should write a short essay, approximately 900 words (~ 3-4 pages double-spaced, if we were using word processors) addressing a small, specific historical topic with a spatial history component. That is, the \u0026ldquo;spatial\u0026rdquo; element shouldn\u0026rsquo;t just be an afterthought, but should be at the centre of your analysis.\nHere are some plausible examples of appropriate topics:\n Corridor of Power: Berlin\u0026rsquo;s Friedrichstrasse in the Nazi Era End of an Era: Toronto\u0026rsquo;s last meatpacking plants An Empire at Home: conservative Think Tanks in Washington, D.C.  I just made these up, of course. You should pick something that you (a) know something about already, and (b) are interested in. Ideally, you will already have done some research into this topic, and will have a small number of sources ready to hand. The essay should introduce the reader to the topic, and make a not-too-complex argument which, again, highlights the spatial component. (\u0026ldquo;Think tanks, so important in the construction of policy in today\u0026rsquo;s United States, are a relatively new feature of American politics. In this paper, I will discuss the early history of this now-paramount institutional form, and argue that the geographical proximity of these think tanks is actually an important feature.\u0026ldquo;)\nYou may notice that most of my examples are drawn from a kind of urban history. Urban history is obviously well-suited to spatial analysis, but there\u0026rsquo;s no reason you can\u0026rsquo;t describe, for instance, more widespread networks (e.g., to take some examples at random, networks of hippies, underground bus networks, comparative suffrage movements. etc.)\nTake this opportunity to think about the effect of form on content. How does the present of the map change the way you express your thoughts? Are new kinds of arguments possible? On the flip side, does the map lead you to ignore or downplay any important elements?\nThe essay will be written in Markdown, which makes traditional citations a little complicated (Scholarly Markdown solves that problem, but it\u0026rsquo;s fairly difficult to set up). So please use simple links for your citations; in Markdown, these take the form [I'm an inline-style link](https://www.google.com). So, for instance: [Latour, p. 97](http://search.library.utoronto.ca/details?5484640\u0026amp;uuid=4f41639c-43d4-45e8-81f2-d8acd9263f8a). Don\u0026rsquo;t worry about a bibliography.\n Map: Your map should have at least 5 markers, and could have many more. You can explore more complex objects \u0026ndash; such as polygons \u0026ndash; using the geoJSON import feature sof Google Maps. There are links to the API documentation in the code.\nIn class, we cut and paste to create multiple markers. The assignment template uses a for loop to iterate, that is, repeat, a set of actions for a group of markers. See the template for details. Each marker\u0026rsquo;s info-window contents should contain a brief headline and some explanatory text. Your essay should refer back to the markers, and you are free to refer to your essay in the marker text itself.\n Styling: As was also the case with our in-class assignment, the bulk of the styling work is accomplished for us by the strapdown.js script that we call at the bottom of the page. Remember that you can use any of several bootswatch themes if you would like to try a different overall look. If you like, you can also customize the CSS further by using the style.css file in the project folder\n  Getting your assignment, and handing it in This assignment is stored on Github. You can get it easily by navigating to https://github.com/titaniumbones/maps-with-markdown and locating the \u0026ldquo;DownloadZIP\u0026rdquo; button.\nTo hand it in, simply rezip the folder and send it to me at the Dropbox Request URL I\u0026rsquo;ll send you before the due date; be sure to rename the folder itself to something that contains your name before zipping, e.g., \u0026ldquo;matt-price-his389-spatial-history\u0026rdquo;. If you don\u0026rsquo;t take this step, your work will not be preserved and I won\u0026rsquo;t grade your assignment.\nOr: If you like, you are more than welcome to login to your github account, fork the repository, edit, and push your changes to the web; if you do that, then all you need to do is send me the URL of your new repository.\nLearning Objectives  Understand what a Google Map is and how it relates to GIS Learn the simplest parts of the Google Maps Javascript API, and use them to create map elements Integrate a written historical narrative with a digital map object  Expectations Your essay should meet the ordinary criteria for an historical essay: clearly written, providing adequate evidence, minimal spelling and grammatical errors, etc. The relationship between topic and map should not be artificial \u0026ndash; the map should serve as an important part of your historical argument or explanation.\nYour Map should work \u0026ndash; all your markers should display correctly. The initial zoom should be set so that all of your markers are visible, and when I click on those markers the appropriate text should display. Markers should provide information that makes your written text clearer or more persuasive.\nWhile there is not much styling work to do, you should not create a terrible mess! You should make small visual changes to the default layout to make the legend more useful and visually appealling, and think about further work if it seems appropriate.\nA \u0026ldquo;B\u0026rdquo; paper will make a convincing, interesting argument, using the map as an important and cogent support. An \u0026ldquo;A\u0026rdquo; paper will do the same, but will do all of the above just a little bit better. \u0026ldquo;C\u0026rdquo; and \u0026ldquo;D\u0026rdquo; papers wil lbe deficient in some of these areas.\n"
},
{
	"uri": "https://digitalhistory.github.io/dh-website/assignment/04-oral-history/",
	"title": "Assignment 04: Oral History",
	"tags": [],
	"description": "",
	"content": "Due Date: March 29\nRather than repeat myself in my usual error-prone way, I will simply direct you to the assignment repository on Github. We will discuss this at great er length in class in the final weeks of the semester.\n"
},
{
	"uri": "https://digitalhistory.github.io/dh-website/assignment/assignment-05-project-proposal/",
	"title": "Assignment 05: Project Proposal",
	"tags": [],
	"description": "",
	"content": " Due Date: April 02\nFor your final assignment, respond to the following call for proposals with an application approximately 2000 words in length, plus a provisional budget i n the form of a spreadsheet. See below for details.\nCall for Proposals: Digital History Initiative Grants The Hacking History Foundation is pleased to announce a new Digital History Initiative, intended to advance the field of digital historical studies in Canada. We are grateful to an anonymous donor from Qatar who has agreed to underwrite three levels of grant:\n Student Development Grant: This grant of $15,000, to be spend within a period of 12 months, funds small or preliminary projects developed by undergraduate or graduate students. Small Team Grant: This grant funds up to $50,000 of work by a small team, in a period of 1-3 years. Large Grant: This fund, which has no fixed upper limit of funding, funds long-term projects over a period of 3-5 years.  We invite applications for all three categories, to be submitted by 2017-04-05 Wed. Be sure to identify the category of grant you are applying for. Regardless of the project\u0026rsquo;s scale, the proposal should be:\n of genuine historical interest technically feasible appropriate to the DH methods that might be discussed e.g. in a course such as \u0026ldquo;Digital History\u0026rdquo; at the University of Toronto of real personal or professional interest to you, the applicant.  The Hacking History Foundation strongly values honesty. It is not necessary for you yourself to possess all the skills to complete the project; but you should be able to clearly articulate the nature of the technical challenges and have a realistic assessment of what is required to overcome them. You should also be able to articulate the historical import of the project, and its worthiness for public funding, because even though we are funded by shadowy carbon-spewing billionaires, our Foundation has a strong sense of civic duty.\nStructure The proposal should be composed of the following elements (word lengths are approximate):\n Introduction (500 words): In broad strokes, describe the project, the questions it is intended to answer, and the role of Digital History methods within the project Methods (500 words): Describe the tools you intend to use, and your plans for both research and dissemination of results Timeline (500 words): Describe the work that will be required to complete this project, and how much time you and your potential collaborators or research assistants will require to bring it to completion Importance (500 words): Discuss the importance of this research, and its place in a broader historical conversation Budget (1 Spreadsheet page): Outline and justify the costs of the project. [Note to students of Hacking History: we recognize that your costs may be, er, rough ballpark estimates. You won\u0026rsquo;t be graded on the accuracy of your budget, but make a serious effort to include all the categories of cost.]  Expectations This is a difficult assignment. As usual, you should turn in a lucidly-written paper with minimal grammatical or spelling errors, written in accordance with scholarly standards for citation and originality. Your project should be of genuine historical interest, and your text should convince me of that importance. Your methods section should describe the challenges inherent in the project, and provide a provisional plan for overcoming them. You should demonstrate awareness both of the difficulties of DH research, and of the existing resources that are available to scholars undertaking this kind of work.\nIf you wish, you may certainly build upon other work you have done this semester.\nGood luck! I look forward to the results.\n"
},
{
	"uri": "https://digitalhistory.github.io/dh-website/assignment/participation/",
	"title": "Participation",
	"tags": [],
	"description": "",
	"content": " As described in the syllabus, I use your participation mark to determine the \u0026ldquo;-/null/+\u0026rdquo; part of your grade. Let me explain a little more explicitly how this works.\nThe System It\u0026rsquo;s simple. Suppose you successfully complete the Git \u0026amp; Github, HTML \u0026amp; CSS, Javascript, Spatial History, and Oral History assignments. Congratulations! You have qualified for a B. But what kind of a B?\n   If your class participation was: You get a: Which ROSI will show as:     Poor B- 72   Satisfactory B 75   Excellent B+ 78    Similarly, perhaps you were only able to complete the Git \u0026amp; Github, HTML \u0026amp; CSS, Javascript and Oral History. Oops! You\u0026rsquo;re going to get a C. Like your somewhat happier classmate, your final grade will be assigned thus:\n   If your class participation was: You get a: Which ROSI will show as:     Poor C- 52   Satisfactory C 55   Excellent C+ 58    But Note!\nA+ is a special grade. Suppose you complete all the assignments satisfactorily, including the additional \u0026ldquo;A only\u0026rdquo; sections of the relevant assignments. Wow! You get an A, great. But\u0026hellip; do you get an A+?\n   If your class participation was: You get an: Which ROSI will show as:     Poor A- 83   Satisfactory A 88   Excellent DEPENDS DEPENDS    Even if your participation was excellent, you will only receive an A+ if your work was consistently excellent and occasionally brilliant. So, if you successfully complete all the assignments (great!), and also are a great class participant (thanks!), then I\u0026rsquo;ll look over all your work and make a value judgment about whether you deserve this rare and precious grade.\nFinal Note for 2018 \u0026ndash; this year, there isn\u0026rsquo;t really a \u0026ldquo;D\u0026rdquo; grade. To pass the course you basically have to get a C. In rare cases I will consider lowering the grading criteria for the \u0026ldquo;Oral History\u0026rdquo; assignment to permit a student to scrape through the course.\nParticipation Criteria Your participation mark is a combination of in-class and online participation.\nIn the Classroom But what makes for good class participation? You might want to start by reading How to discuss a book for history, which has lots of helpful suggestions. Really, please read it \u0026ndash; it\u0026rsquo;s illuminating. But, meanwhile, here are some hints:\n Show up for class: It\u0026rsquo;s hard to discuss when you\u0026rsquo;re not here. Do the Readings: It\u0026rsquo;s hard to discuss what you haven\u0026rsquo;t read. I will try hard not to assign too much reading; in return, please try to read it. Be Courteous: Treat your classmates with respect, even when your opinions differ fiercely. Refrain from interrupting others, notice when others have been waiting \u0026amp; let them speak first, and so on. Don\u0026rsquo;t shut other people down, and frame your comments in a way that invites further discussion. Listen: Pay careful attention when your classmates are speaking; if their ideas seem a little unclear, try to fill in the gaps, either by thinking silently, or by asking friendly, clarifying questions. Try to think about how their positions relate to yours, and, especially, whether you should perhaps change your mind a little based on what they have to say. Be Clear: think about the readings before you come to class, so that your opinions are well-formed. Be Brave: It can be intimidating to speak in class, especially if you have found the readings or the lecture confusing. But you will almost never be alone. If one person is confused, others likely are too. Have the courage to speak up \u0026ndash; everyone in the room is likely to thank you. If you are extremely shy in person, then come speak to me and we can try to work out a solution for you. Participate in Group work: Occasionally we will break up into small groups. The same princples apply to group work \u0026ndash; I\u0026rsquo;ll be paying attention.  Online Our Slack workspace is also a great way to participate. Contribute to the class in Slack by asking good questions, helping out your classmates, and correcting any professorial errors from lecture!\nFinally If you can do all of these things consistently, you\u0026rsquo;re likely to earn a \u0026ldquo;+\u0026rdquo;. If you\u0026rsquo;re not sure how you\u0026rsquo;re doing, come ask me in a couple of weeks and I\u0026rsquo;ll give you some feedback.\n"
},
{
	"uri": "https://digitalhistory.github.io/dh-website/syllabus/his393syllabus/",
	"title": "Syllabus",
	"tags": [],
	"description": "",
	"content": " Logistics    Instructor: Matt Price     Email: matt.price@utoronto.ca   Office Hrs: T 1-2:30, SS 3077   Meeting Times Thurs 2-4, SS 1088   Web: http://digital.hackinghistory.ca/   Slack: https://digitalhistoryuoft.slack.com/    In general, communication should take place via Slack. In the case of questions having to do with official University business (requests for extensions, discussion of accommodations, any message involving sensitive personal data) please use my University email, being sure to put \u0026ldquo;HIS393\u0026rdquo; in the subject line.\nIntroduction We all know \u0026#x2013; it is so commonplace that we barely even notice it! \u0026#x2013; that we are living through a revolutionary period in the history of communication. In the year of your birth, the World Wide Web was a scrawny, hand-powered frontier of hand-coded sites and Internet startups. Amazon and Google were infants. The University of Toronto Library website looked something like this:\n and many students and faculty still used the card catalog to find books in Robarts.\nToday, the processes of research, writing and reading are all dramatically transformed by information technology. Instead of painstakingly discovering rare books and manuscript artifacts, we can do full-text searches on a vast corpus. Our writing is mediated by immensely powerful computing machines, and our creations need not be limited exclusively to the linear texts around which all the humanities initially took shape. Readers encounter our writing, not as a few precious drops of information in a desert of ignorance, but as part of an endless stream of information that assaults them all day long.\nHow should history respond to these new conditions of our existence? In this class we explore foundational topics in the \u0026ldquo;digital humanities\u0026rdquo; and ask what we can learn from them about how we should be doing history \u0026#x2013; in particular, how we should be collecting, analyzing, synthesizing and presenting knowledge.\n How do the digital media developed in the last two decades change the way we understand history? Can the fundamental goal of interpreting the past survive? What, if any, new technical skills do we need to acquire? Can we use the new media to ask (and answer!) new kinds of questions? Can they help us improve our answers to the old questions? Perhaps most powerfully: how do the new digital conditions of existence relate to the question of \u0026ldquo;engaged\u0026rdquo; scholarship? What new opportunities, constraints, and dangers does digital production call forth when we mix scholarship and citizenship?  Objectives At the end of this course, you should:\n be able to describe to others what the phrase \u0026ldquo;digital humanities\u0026rdquo; means to you. be able to frame a coherent and nuanced argument of your own about the value of DH methods to the field of history be able to clearly state and defend a position regarding \u0026ldquo;engaged scholarship\u0026rdquo;, and articulate the relationship of your argument to the contemporary media landscape have a basic understanding of markup languages and their use in DH be able to make compelling use of media materials such as audio, video, and animation in historical arguments understand how to create simple historical maps, and have an opinion about the value of GIS in historical argument  Method There are many approaches to the digital humanities, all of them involving tools that are under rapid and iterative development. A given project is likely to require a substantial training period in the particular tools chosen by the principal investigators. It is therefore not possible for this course to provide an effective survey of \u0026ldquo;the\u0026rdquo; digital humanities toolkit. But learning tools is an essential skill for the digital humanist. So what should we do?\nAlmost every digital humanist will, at some point, need to do the following:\n read and edit HTML, CSS and Javascript debug running web pages using the browser\u0026rsquo;s built-in tools use a text editor to write code in any of several languages collaborate with peers using version control software, almost always git  Our emphasis is therefore on simple coding taught using standard tools that are available almost everywhere. Almost all of the software we use is Free or Open Source. You will learn very basic web development skills and slowly come to apply them to increasingly sophisticated (but still pretty simple!) historical questions. These baby steps will give you some sense of what skills a \u0026ldquo;real\u0026rdquo; digital history project requires, and give you the tools you\u0026rsquo;ll need to teach yourself when you encounter new tools in the course of a project.\nPolicies Respecting Diversity Diverse backgrounds, embodiments, and experiences are essential to the critical thinking endeavor at the heart of higher education. We expect you to be respectful of the many social and cultural differences among us, which may include, but are not limited to: age, cultural background, disability, ethnicity, technical ability, gender identity and presentation, citizenship and immigration status, national origin, race, religious and political beliefs, sex, sexual orientation, and socioeconomic status. Please talk with me right away if you experience disrespect in this class—from any source, including myself—and I will active work to address it.\nCorrespondence As noted above, most communication should take place via Slack. In the case of questions having to do with official University business (requests for extensions, discussion of accommodations, any message involving sensitive personal data) please use my University email, being sure to put \u0026ldquo;HIS393\u0026rdquo; in the subject line. I\u0026rsquo;ll do my best to reply within two working days, though occasionally the delay may be slightly longer. Please allow the full 48 hours to elapse before sending a repeat email.\nAttendance Make every effort to attend each class meeting (including lab sections)! Class will begin and (usually) end on time. Please do your best to get to class before the start of the session. Students are expected to attend all meetings, with exceptions permitted in case of illness and family emergencies.\nPlease silence all cell phones/pagers/etc. before the beginning of each class. You should bring your laptop for in-class work, but please don\u0026rsquo;t use class time (lecture or lab) to check your email, update your Facebook, read reddit, watch YouTube, make dank memes, seize the means of production (allowed), etc. Such usage is distracting and interferes with learning both for you and for all the other students around you. Spend class time on class materials. If another student\u0026rsquo;s activity is distracting, please ask them to stop it (or let us know outside of class).\nTools Course assignments will require you to install software. All of the software we use is free, but it requires a laptop to run. A Chromebook unfortunately will not be sufficient. While it is in principle possible to do all of your assignments on the web or using a very basic text editor, I do not recommend that method, and will not offer technical support. If you don\u0026rsquo;t own a laptop, you should find a way to borrow one, or buy a cheap model on College St to use for the duration of the semester.\nI can offer help with the following\n   Tool On Mac On Windows On Linux     Real Web Browser Firefox and/or Chrome Firefox and/or Chrome Firefox and/or Chrome   Text Editor Atom Atom Atom   Bash Shell Environment Terminal (Built in) Git for Windows or Windows Subsystem for Linux gnome-terminal, qterm, etc   Git Version Control Git for OSX Git for Windows apt-get install git   Git Visualization gitKraken gitKraken gitKraken   Github Org Membership Sign up here Sign up here Sign up here   Node and NPM Node Website (guide) Node Website (guide) Node Website (distro instructions)    Please see the Setup page for more details about the particular tools we will be using. YOU WILL ABSOLUTEY NEED TO HAVE THESE TOOLS IN ORDER TO TAKE THE COURSE\nCourse Requirements \u0026amp; Grading The assignments in this course take a wide variety of forms, and for the most part, differ significantly from what you\u0026rsquo;re likely to have encountered in other History courses. If you have little technical experience, or have perhaps ended up in this course by accident (!), you may find some of the work daunting at first. I have done my very best to make the assignments feasible for beginners, but you will likely encounter some difficult moments. I therefore strongly urge you to (1) start early! and (2) persevere through the difficult initial stages. The frustration you experience is, in fact, part of pedagogical method here. You are not expected to become a coding ninja, but learning how to learn is a major component of work in the Digital Humanities.\nBe warned! Marking in this course is unusual!\nGrading in this course is done using a modified point system. The system may seem odd at first, but it has definite advantages for both students and teachers, so don\u0026rsquo;t be intimidated. Instead of receiving a number or letter grade for each assignment, and then getting a weighted sum of those grades as your final mark, you will choose what final mark to try for and then complete the assignments required for that mark. A certain set of assignments is required for a D; for a C, you must complete all of the \u0026ldquo;D\u0026rdquo; assignments plus another set; for a B, all of the C assignments plus some more; and the same goes for an A.\nHere are some more details:\n All Assignments Are Graded Pass/Fail: Each assignment you get will include a careful explanation of my expectations. If your work meets those expectations, you get full credit; if not you get no credit. A \u0026lsquo;Passing\u0026rsquo; Mark on Assignments is a B+: In order to get credit for an assignment, you will have to demonstrate a high level of mastery \u0026#x2013; about the level normally required for a B+. Each Higher Grade Represents a quantum level of additional achievement: As you move up the ladder, assignments test more advanced and difficult concepts from the course. If you fail, you can try again: You start the semester with 5 \u0026lsquo;retry\u0026rsquo; chits, which you can use to resubmit assignments that have not succeeded. If necessary, you can use all of those chits on a single assignment! Resubmission process must be completed withing 1 week of the return date of the original version. A late assignment costs one \u0026lsquo;retry\u0026rsquo; chit: There is no percentage penalty for late work; instead, a late paper will cost you one of your retry opportunities. Second and third tries get fewer comments: I will give substantial comments on first tries; additional tries will get less and less fulsome commentary. Pluses and Minuses are determined by participation: The only part of your grade which is not determined on a pass/fail basis is the \u0026ldquo;+\u0026rdquo; or \u0026ldquo;-\u0026rdquo; part, which is assigned based on your on and offline participation. See the participation grade sheet for more details.  I know there will be questions! Please don\u0026rsquo;t hesitate to ask them. And here, finally, is the list of assignments. Detailed assignments will be handed out with adequate time to permit completion.\n   Assignment Due Date Brief Description A B C D     Git \u0026amp; Github Jan. 15 version control and collaboration \u0026checkmark; \u0026checkmark; \u0026checkmark; \u0026checkmark;   G \u0026amp; GH Extras   \u0026checkmark;      HTML \u0026amp; CSS Jan. 26 web markup and presentation \u0026checkmark; \u0026checkmark; \u0026checkmark; \u0026checkmark;   H \u0026amp; C Extras   \u0026checkmark;      Javascript for DH Feb. 02 intro to programming \u0026checkmark; \u0026checkmark; \u0026checkmark; \u0026checkmark;   JS Extras   \u0026checkmark;      Data-Driven History Feb. 16 CANCELLED x x x x   Spatial History Mar. 02 Simple GIS Web project \u0026checkmark; \u0026checkmark;     Oral History Mar. 16 Multimedia Web Project \u0026checkmark; \u0026checkmark; \u0026checkmark; \u0026checkmark;   Project Proposal Mar. 23 Imagine a Digital History Project \u0026checkmark;                Texts The following texts are required and available at the Bookstore, or via various online booksellers:\n Moretti, Franco. Graphs, Maps, Trees: Abstract Models for a Literary History Verso, 2005. Geddes et al Toward Spatial Humanities Bloomington: Indiana University Press, 2014. Perks, et al. The Oral History Reader. 2006  Course Outline Text, Code, and the Web Introducing Digital History (Jan. 04) Class Synopsis: Introduction to the course, Github, and Markdown.\nReadings: You may want to read some of these as general preparation for this and other history classes:\n W. Caleb McDaniel. “How to Read for History.” W. Caleb McDaniel. Accessed June 27, 2015. http://wcm1.web.rice.edu/howtoread.html. William Cronon, \u0026ldquo;Why the Past Matters\u0026rdquo; Cohen, Daniel J, and Roy Rosenzweig. “Becoming Digital.” In Digital History: A Guide to Gathering, Preserving, and Presenting the Past on the Web. Philadelphia: University of Pennsylvania Press, 2006. http://chnm.gmu.edu/digitalhistory/digitizing/.  In-Class Activity: Collaboration on Github, Markdown\nWhat the Web Signifies (Jan. 11) We all live with the web, but that doesn\u0026rsquo;t mean we think much about how it works and what it\u0026rsquo;s changed. This week\u0026rsquo;s lecture presents some thoughts on the changing nature of the public sphere and the significance of the web\u0026rsquo;s digital and machine-readable nature.\nReadings:\n Juergen Habermas, \u0026ldquo;The Public Sphere: An Encyclopedia Article\u0026rdquo; (1964) http://www.sociol.unimi.it/docenti/barisione/documenti/File/2008-09/Habermas%20%281964%29%20-%20The%20Public%20Sphere.pdf Cohen, Daniel J. “Interchange: The Promise of Digital History” 95, no. 2 (September 1, 2008): 452–91. http://jah.oxfordjournals.org.myaccess.library.utoronto.ca/content/95/2/452.short  In-Class Activity: HTML + CSS\nAbundance and Openness (Jan. 18) One of the key features of the web is its immenseness. We will discuss how this genuinely new circumstance transforms the work of the historian.\n W. Caleb McDaniel. “How to Read for History.” W. Caleb McDaniel. Accessed June 27, 2015. http://wcm1.web.rice.edu/howtoread.html. Council. “Many More than a Million: Building the Digital Environment for the Age of Abundance.” Council on Library and Information Resources. Accessed June 7, 2011. http://www.clir.org/activities/digitalscholar/index.html. Turkel, William J. “Going Digital.” Accessed October 12, 2011. http://williamjturkel.net/2011/03/15/going-digital/.\n “Learn How Google Works: In Gory Detail.” PPCBlog. Accessed June 30, 2015. http://www.ppcblog.com/how-google-works/.\n  In-Class Activity: More HTML + CSS\nData Driven History Distant Reading 1 (Jan. 25) Franco Moretti\u0026rsquo;s Graphs, Maps, Trees was a manifesto of sorts for a data-driven literary history. We\u0026rsquo;ll discuss the first 2/3s of this book before turning to some practical skills\nReadings:\n Moretti, Franco. Graphs, Maps, Trees: Abstract Models for a Literary History. Verso, 2005 through p. 64, or Moretti, Franco. “Graphs, Maps, Trees.” New Left Review 24 (November 1, 2003): 67–93m and Moretti, Franco. “Graphs, Maps, Trees - 2.” New Left Review 26 (March 1, 2004): 79–103 \u0026ldquo;Basic Text Mining\u0026rdquo; in The Historian\u0026rsquo;s Macroscope: http://www.themacroscope.org/?page_id=362  In-Class Activity: Javascript variables \u0026amp; functions\nDistant Reading 2: Are Texts Data? (Feb. 01) More Moretti, and some criticisms\nReadings:\n Moretti, Franco. Graphs, Maps, Trees: Abstract Models for a Literary History. Verso, 2005, ch. 3 to end, or “Graphs, Maps, Trees - 3.” New Left Review 28 (July 1, 2004): 43–63. . Stephen Ramsay, \u0026ldquo;The Hermeneutics of Screwing Around\u0026ldquo; Gibbs, Fred. “Hermeneutics of Data and Historical Writing” Writing History in the Digital Age, March 14, 2012. http://writinghistory.trincoll.edu/data/gibbs-owens-2012-spring/. Marc Dunkelman. “What Data Can\u0026rsquo;t Convey.” Blog. The Chronicle of Higher Education, 19 2014.  In-Class Activity: Javascript objects and DOM manipulation\nMaps, Visualization, and History Spatial History (Feb. 08) Contemporary \u0026ldquo;Historical GIS\u0026rdquo; and web-based geohistory projects descend from an illustrious lineage of qualitative and quantitative \u0026ldquo;spatial histories\u0026rdquo;. In class today we explore what happens when \u0026ldquo;place\u0026rdquo; takes centre stage in a historical analysis.\nReadings:\n Mark Monmonier, \u0026ldquo;Lying with Maps\u0026rdquo; Statistical Science 20:3, 2005. 215-222. Ben Schmidt, \u0026ldquo;Data narratives and structural histories: Melville, Maury, and American whaling  In-Class Activity: Mapping with Google\n??? (Feb. 15) Note: In all likelihood, there will be no class this week due to a scheduling conflict.\nNO CLASS (Feb. 22): READING WEEK Visualization (Mar. 01) Of course, maps and graphs are in a certain sense part of a much broader field of rhetorical visualizations: attempts to convey quantitative information through pictures in an effort to convince the reader.\nReadings:\n Jefferson Bailey and Lily Pregill, ‘Speak to the Eyes: The History and Practice of Information Visualization’, Art Documentation: Journal of the Art Libraries Society of North America, vol. 33 (2014). Kostiantyn Kucher and Andreas Kerren, ‘Text Visualization Browser: A Visual Survey of Text Visualization Techniques’, (2014) Andy Kirk, 298 Data Visualisation Resources, Visualising Data, (2015).  In-Class Activity: Reading visualizations\nMaps Online (Mar. 08) Maps and visiaulizations are neat and all, but contemporary web-based geohistory allows historical maps to interact powerfully with other data sources. We\u0026rsquo;ll explore some possibilities!\nReadings:\n \u0026ldquo;Railways and Agriculture in France and Great Britain\u0026rdquo; in Spatial Histories \u0026ldquo;The Development, Persistance, and Change of Racial Segregation in U.S. Urban Areas, 1880-2010\u0026rdquo; in Spatial Histories google earth tutorial: https://geospatialhistorian.wordpress.com/lessons/lesson-1/  In-Class Activity: GIS\nOral History, Crowdsourcing, and the Promise of the Public Sphere What\u0026rsquo;s Special about Oral History (Mar. 15) Oral History has a long tradition; we explore its roots and peculiarities, and\nReadings:\n \u0026ldquo;The Voice of the Past\u0026rdquo; and \u0026ldquo;What makes Oral History Different\u0026rdquo; in The Oral History Reader Listen to some part of \u0026ldquo;I can almost see the lights of home\u0026rdquo; http://www.albany.edu/jmmh/vol2no1/lightssoundessay.html  In-Class Activity: Popcorn.js\nInterlude: Project Planning \u0026amp; Citizen History (Mar. 22) We\u0026rsquo;ll discuss some project management techniques that should help you with your final proposal\n http://publichistorycommons.org/where-are-the-citizen-historians/  Oral History \u0026amp; Remix Culture (Mar. 29) Once oral histories migrate to the web, they, like maps, can interact with other kinds of data.\nIf we\u0026rsquo;re ahead of schedule, we\u0026rsquo;ll watch Harlan County USA in class.\nReadings:\n \u0026ldquo;Oral History and the Digital Revolution\u0026rdquo; and \u0026ldquo;Authoring in Sound\u0026rdquo; in The Oral History Reader Gunkel, David J. “Rethinking the Digital Remix: Mash‐ups and the Metaphysics of Sound Recording.” Popular Music and Society 31, no. 4 (October 1, 2008): 489–510. http://resolver.scholarsportal.info/resolve/03007766/v31i0004/489_rtdrmatmosr.xml.  In-Class Activity: popcorn.js (just in case)\nAcknowledgments Thanks to Joel Wrossley of the University of Washington and Thomas J Bradley of Algonquin Collegee for help and inspiration in assignments and grading strategy. The \u0026ldquo;Policies\u0026rdquo; section above is taken almost verbatim from Joel\u0026rsquo;s web development course. Various pieces of the course have been inspired by other teachers over the year, and I hope to do a better job of document theft and inspiration from here on in.\n"
},
{
	"uri": "https://digitalhistory.github.io/dh-website/tools/assignment-git-tips/",
	"title": "Git Tips for Assignments",
	"tags": [],
	"description": "",
	"content": " Well the first assignment is done. Whew! There were some common git issues that came up, and I hope we can cut back on them by documenting them here.\nLearn how to navigate! The command line is very new to everyone, and I did a lousy job of explaining how to traverse the filesystem from the terminal. I have now posted some instructions that should help with this. Pro tip: in both Windows and Mac, you can open a terminal/git-bash window by right clicking on a location and clicking the \u0026ldquo;terminal here\u0026rdquo; or \u0026ldquo;bash window here\u0026rdquo; buttons (screenshots anyone?). This should help reduce the amount of time spent hopelessly floundering in the early stages of command-line training.\nDon\u0026rsquo;t commit .DS_Store Mac users: MacOS creates these annoying files in every directory. They are useless for non-mac users and clutter up the repository. I have taken steps that should stop you from accidentally adding these files to your repository, but if you have already started work on Assignment 1 you may have cloned the repository too early to get the benefits of that work. Here\u0026rsquo;s how you remove `.DS_Store` files from a repository:\n first, navigate to the repository root directory in a terminal window then, type the following commands (dark magic!):  find . -name .DS_Store -print0 | xargs -0 git rm -f --cached --ignore-unmatch echo \u0026quot;.DS_Store\u0026quot; \u0026gt;\u0026gt; .gitignore git commit -a -m \u0026quot;Git thee behind me, .DS_Store\u0026quot;  For an explanation of these commands, you can look at random posts o n the Internet, ask Stackoverflow, or read the official manuals (at least on MacOS) by typing man find, man xargs, man echo, and man gitignore. A lot of those explanations will be kind of complicated, though, especially the (insanely complicated) find manual.\nNote: this command doesn\u0026rsquo;t actually delete the files - -they will still be there, but git will act as though the files have been deleted, and will not \u0026ldquo;see\u0026rdquo; and files named .DS_Store when it looks for untracked files.\nBeware package-lock.json Deprecation notice: you shouldn\u0026rsquo;t have to follow these instructions. check to make sure that package-lock.json is not present in your web fork. If it is, then something has gone wrong and you should follow these steps.\nUnfortunately I rather misunderstood how package-lock.json works (because of outdated documentation). As a result I have removed it from the repository. You should remove it, too. As above, you can do so by navigating to the repository root and typing:\ngit rm --cached package-lock.json echo \u0026quot;package-lock.json\u0026quot; \u0026gt;\u0026gt; .gitignore git commit -a -m \u0026quot;Goodbye, package-lock.json!\u0026quot;  Again, the file package-lock.json will still be on your computer, but git will act as though it had been deleted, and won\u0026rsquo;t ask you to change it anymore.\nSPECIAL FOR ASSIGNMENT 1! I\u0026rsquo;ve made some late-breaking changes to Assignment 1 to help with these issues. I\u0026rsquo;ve managed to push those changes to all of your repositories, so please pull in my changes by executing `git pull`. Everything below is DEPRECATED, but I\u0026rsquo;m keeping the info up here just in case something goes wrong.\nDeprecated detailed instructions \u0026ndash; DON\u0026rsquo;T FOLLOW THESE UNLESS SOMETHING HAS GONE TERRIBLY WRONG You have 2 choices:\n take the steps described above, then manually update package.json and test/test-node.js as described below take the steps described above, then carefully read the new instructions \u0026ndash; which tell you to name your reflection Reflection/reflection.md rather than Reflection/yourgithubid.md \u0026ndash; and ignore the fact that your tests are failing take a chance and do some fancy gitwork as described in the final section, below.  package.json and test/test-node.js have been updated. Be careful! I\u0026rsquo;ve updated the tests a little bit to make it easier to run automated tests. My recommendation is as follows:\n update package.json so that it\u0026rsquo;s exactly the same as mine. You really don\u0026rsquo;t want there to be even 1 character of difference, or git might be mad at you. Here\u0026rsquo;s my current version, and here it is in the Github web interface.  Pulling changes from Assignment 1 [ADVANCED!] Alternatively\u0026hellip; you can take care of almost all of the above issues by pulling my changes directly from the assignment repository. But, beware! There\u0026rsquo;s a chance there will be \u0026ldquo;merge conflicts\u0026rdquo; and your whole repo will get screwed up. Still, here\u0026rsquo;s how i would do it:\n first, make sure all of your changes have been committed with git commit -a -m \u0026quot;emergency commit\u0026quot; Then make a note of the current git commit \u0026ldquo;hash\u0026rdquo; by executing git log. The output will look kind of like this:  commit cf369d7a9d7282270a95ab1ff0f8718b84015bfb (HEAD -\u0026gt; development, origin/development) Merge: bd1c351 734d07c Author: Matt Price \u0026lt;matt.price@utoronto.ca\u0026gt; Date: Thu Jan 18 08:37:22 2018 -0500 Merge tag 'fix-json' into development fix it! commit 734d07cd1b25ff428d13b802b07741aed470c5cd (tag: fix-json, origin/master, origin/HEAD, master) Merge: 62423b7 e9c8f65 Author: Matt Price \u0026lt;matt.price@utoronto.ca\u0026gt; Date: Wed Jan 17 22:07:30 2018 -0500 Merge branch 'hotfix/fix-json' commit e9c8f6507ec13a4c53cff1c35293fc2c70d68f8e Author: Matt Price \u0026lt;matt.price@utoronto.ca\u0026gt; Date: Wed Jan 17 22:05:27 2018 -0500 remove syntax-breaking comma travis build should succeed now  The strange string of numbers and letters is called the \u0026ldquo;commit hash\u0026rdquo;. Copy the one at at the top to a safe location. In this example the hash to save would be cf369d7a9d7282270a95ab1ff0f8718b84015bfb.\n now the dangerous step \u0026ndash; pull from my repo and merge into yours! git pull https://github.com/DigitalHistory/assignment-01-html-css.git master if there are conflicts, you can either try to fix them, or (my recommendation) completely undo the merge by resetting your repo to the last working state. For this you need that hash you copied a couple of steps ago. This command will completely reset your master branch to the place it was before you tried to merge in my work: git reset --hard cf369d7a9d7282270a95ab1ff0f8718b84015bfb (remember to use YOUR hash, not mine!)  Looking forward to hearing how all of this goes!\n"
},
{
	"uri": "https://digitalhistory.github.io/dh-website/tools/node-dependencies/",
	"title": "Installing Node Dependencies",
	"tags": [],
	"description": "",
	"content": "Node.js is an exquisite piece of programming infrastructure. One of its main features is support for developer-defined dependencies. As a programmer \u0026ndash; or in my case, as a teacher \u0026ndash; you can inform the underlying node package manager (npm) that your project \u0026ldquo;depends\u0026rdquo; on some group of other projects. This allows programmers to build constantly on each other\u0026rsquo;s work.\nIn our assignments, node dependencies are mostly used to enable the tests, whose main function is to help you figure out whether you\u0026rsquo;ve done the assignments correctly. Installing node dependencies is pretty simple, but can be confusing if you\u0026rsquo;re completely new to node, the command line, and programming in general. Here are the (very simple!) instructions:\n Install Node and NPM as per this section of the \u0026ldquo;Setup\u0026rdquo; instructions From the command line, navigate to the root directory of your repository using cd as per the navigation help page From the root directory of your repository,type the following command into the terminal/git-bash prompt: npm install  You should see some complex output from the command, after which your node dependencies will be installed. You can actually see the installed files by browsing the contents of the node_modules directory, which should now be present in your working directory.\nOnce the dependencies are installed, you should be able to run the node tests with npm test (issued from the same directory, that is, the root directory of your repository).\nI hope that helps!\n"
},
{
	"uri": "https://digitalhistory.github.io/dh-website/tools/navigating-command-line/",
	"title": "Navigating at the Command Line",
	"tags": [],
	"description": "",
	"content": " The Programming Historian link below is excellent. Having some trouble with screenshots ATM, will fix soon as I can reload my desktop \u0026ndash; but for next few hours pls refer to the PH link for images!\nOne common issue for people new to the command line is that it can be tough to understand the notion of location in the filesystem. Most ordinary users interact with their filesystems through the so-called GUI layer \u0026ndash; the graphical interface of windows. Often the user-accessible files are more or less restyricted to special directories (or \u0026ldquo;folders\u0026rdquo;) with meaningful names like Desktop, MyDocuments, etc. However, once you start working at the command line this convenient feature can become something of a curse. It\u0026rsquo;s important to recognize that these special locations are just part of a complex, hierarchical filesystem \u0026ndash; a branching tree of directories and files, on which your operating system relies in many ways. You will need to learn to navigate that filesystem, not from the GUI, but from the command line.\nWhen you first start using the command line, it often feels (a) confusing and (b) somehow primitive or over-simple. The command line is, in fact, a sophisticated and incredibly efficient way to interact with the filesystem \u0026ndash; but you need to learn your way around it first. In this class we won\u0026rsquo;t discuss the wonderful world of shell scripting (see below for guides to scripting); instead, I just want you to learn a few very basic commands to help you move around.\nNavigation The file system is a \u0026ldquo;branching tree\u0026rdquo; of files and folders. At the top (or bottom, depending on how you imagine things) of the tree is the \u0026ldquo;root\u0026rdquo;. In bash, we represent this as /. Every folder has a path that starts with / and proceeds down the file hierarchy. So, for instance, my global git configuration is located at /home/matt/.gitconfig. / is the root. /home/ is where all user files can be found. /home/matt/ contains all my user files. /home/matt/.gitconfig identifies the specific file I\u0026rsquo;m looking for.\nYour file explorer will represent this tree for you visually; you can also picture it schematically, as is done e.g. in the following image:  We can also explore from the command line. Here are a few basic commands to learn for this purpose. [ Note: in the screenshots below, my command prompt is heavily customized and includes some extra information. Most notably, it tells me when I am in a git repository and gives me the name of the current git branch. You can experiment with changing your bash prompt in the ~/.bashrc file that controls many features of the\npwd pwd is short for \u0026ldquo;print working directory\u0026rdquo;, and will show you where you are in the file system.  ls ls will list the contents of a directory. With no further arguments it will list the directory you\u0026rsquo;re currently in, but you can ask it to list some other directory too. Here are some examples. Note the \u0026ldquo;switches\u0026rdquo; -l and -la. Switches give further instructions to the command. In this case -l means \u0026ldquo;long\u0026rdquo; while -a is short for \u0026ldquo;all\u0026rdquo;. You can see in the screenshot below what the effect is.  cd Short for \u0026ldquo;change directory\u0026rdquo;, cd allows you to move through the filesystem.\n cd someDirectoryName will move you into the subdirectory \u0026ldquo;someDirectoryName\u0026rdquo; of your current directory. cd with no arguments, or \u0026ldquo;cd ~ \u0026ldquo;, will drop you back into your home directory (this is helpful if you get lost somehow). At the command line, the tilde (~) is short for \u0026ldquo;home directory\u0026rdquo;, so you can use it anywhere instead of typing out your whole whome directory name. cd .. or cd ../ will move you \u0026ldquo;up\u0026rdquo; one level in the filesystem \u0026ndash; so if you are currently in /home/matt/digitalHistory, executing cd .. will move you to /home/matt/.   cat and less Sometimes you want to look at the contents of a file. cat and less are two ways to do so. cat will print the contents of the file directly to your terminal window. less will create a simple interface that you can use to scroll through a longer file using a keyboard interface.  mkdir and touch mkdir will create a new directory, while touch will create a new (empty) file.\nmkdir some-directory-name touch some-directory-name/somefile.txt  These commands will create the file somefile.txt in the folder some-directory-name, inside the current working directory.\nArrow Keys and Tab Expansion often we make mistakes typing or are unsure of spelling, etc. Two kinds of shortcuts make for huge time savings:\n arrow keys can be used to navigate through your previous commands \u0026ndash; typing ↑ will reproduce your previous command, allowing you to correct any errors you might have made the last time you typed out some complex command and made a small error. Each time you type an ↑, you will move one command up in the command history. To get back down, type ↓. you can type TAB part way through a command to get a list of possible completions. If there\u0026rsquo;s only one possible command that starts with what you\u0026rsquo;ve typed so far, bash will complete it for you. Similarly, typing part of a file or directory name after a command has been entered will usually get you a list of possible completions. Try it a few times and you\u0026rsquo;ll see how much time it saves.  Learn More OK, that\u0026rsquo;s all for now, hopefully this helps you navigate around your projects. I may add to this guide as we go through the semester, but here are some further guides.\n this introduction is quite clear and simple the programming historian has a great guide too the TLDP guide introduced generations of programmers to bash scripting, and is still a useful reference point  "
},
{
	"uri": "https://digitalhistory.github.io/dh-website/tools/setup/",
	"title": "Setup",
	"tags": [],
	"description": "",
	"content": " For the duration of this course, you will need to set up a \u0026ldquo;development environment\u0026rdquo; to do your work. You\u0026rsquo;ll need to download,install, and interact with a group of programs and services that make it possible to do your work. Setting your environment up can be difficult, so be sure to budget some time to do so! Also be aware that these tools will take up significant spae on your laptop and may cause your laptop to slow down somewhat if run simultaneously with\nPlatform Notes I run Arch Linux on my laptop, and have experience with Ubuntu as well. For the purposes of this class, I have installed Windows 10 Education Edition (available free to U of T students here). I wil also attempt to support MacOS as best I can.\n if you have an earlier edition of Windows, some of our tools may not work properly. I encourage you to upgrade to Windows 10 Education Edition, which has good support for modern tools. if you have a Chromebook, you will need to install a full Linux OS in order to do the coursework. Gallium OS and Crouton are the two recommended tools for this, and you can find some instructions here. It\u0026rsquo;s not easy, and I won\u0026rsquo;t be able to help you. If this seems hard, you may want to think about buying an inexpensive, older laptop and installing an ordinary Linux distribution. Here are two lists of distributions, but the choice is up to you. .  Details Here\u0026rsquo;s the table of tools from the syllabus:\n   Tool On Mac On Windows On Linux     Real Web Browser Firefox and/or Chrome Firefox and/or Chrome Firefox and/or Chrome   Text Editor Atom Atom Atom   Bash Shell Environment Terminal (Built in) Git for Windows or Windows Subsystem for Linux gnome-terminal, qterm, etc   Git Version Control Git for OSX Git for Windows apt-get install git   Git Visualization gitKraken gitKraken gitKraken   Github Org Membership Sign up here Sign up here Sign up here   Node and NPM Node Website (guide) Node Website (guide) Node Website (distro instructions)   Slack Community Client Download, Signup Link Client Download, Signup Link Client Download, Signup Link    If you\u0026rsquo;re comfortable exploring and installing software, you can probably get set up quickly by following the links above. Please nonetheless read the detailed instructions below. Things will go smoother if you do!\nWeb browser All of our work will involve interacting with the World Wide Web. Firefox and Chrome are head and shoulders above all other web browsers, and you should install one (or preferably both) of them. In class, I will use Firefox almost exclusively. If you haven\u0026rsquo;t tried Firefox for a while, give the new Quantum version a try\u0026rsquo; it is much, much faster and more stable than its predecessors.\nBoth have highly sophisticated developer tools with which you should familiarize yourself. As you learn more about web design, you\u0026rsquo;ll come to rely on these tools more and more. Follow these links for more about Firefox Dev Tools and Chrome\u0026rsquo;s version.\nOf particular value in both Chrome and Firefox is the \u0026ldquo;Javascript Consoles,\u0026rdquo; accessible from the developer tools: Tools \\rarr Web Developer \\rarr Console or Menu \\rarr More Tools \\rarr Developer \\rarr Console\nThe Firefox console is a little awkward to use for multi-line programming, so they have also provided a \u0026ldquo;Scratchpad\u0026rdquo; tool (Shift-F4), which I find helpful, though I now use Atom\u0026rsquo;s Javascript console instead (see \u0026ldquo;Text Editor\u0026rdquo;, below).\nThe other tool I use all the time is \u0026ldquo;inspect element\u0026rdquo;, available by right-clicking on any part of a web page. Both of these tools will prove essential for figuring out why your code isn\u0026rsquo;t working right!\nText Editor If you want to code, you have to write like a coder. This means using a powerful text editor. In this class we use Atom. Please follow the download links and install to your computer. Once you\u0026rsquo;ve read the first chapter or two of the Manual, go ahead and install some extra packages by navigating to Edit \u0026rarr; Preferences \u0026rarr; + Install, as described in detail in the excellent Atom manual. I have prepared a package called history-hack-tools, which will install all the tools I\u0026rsquo;ll be using during class. Please install that one by searching for its name in the search box. The functionalities fo the various packages are briefly described in the package description.\nCommand Line Web developers and digital humanists spend a lot of their time in the command-line environment, interacting with their computers through text-based commands instead of a mouse or voice interface. It takes some time to learn to use the command-line, but it\u0026rsquo;s a very powerful and effective way to work once you get used to it. One goal of this course is to help you get comfortable in this environment and learn to take advantage of its power.\nThere are actually many different command-line environments; in this class we use bash, the most popular.\nOn Mac and Linux, bash is built in to the system. In Mac, open the Terminal app to find the bash prompt; in Linux you may have any of several terminal emulators installed, search your program list for \u0026ldquo;term\u0026rdquo; to find yours.\nIn Windows, bash comes with the Git installation \u0026ndash; follow the instructions below. Note that very recent editions of Windows 10 come with the \u0026ldquo;Wondows Subsystem for Linux, which you can use instead of the Git Bash method.\nGit, Github, and GitKraken Software development is made vastly easier by \u0026ldquo;version control\u0026rdquo; systems: specialized software that keeps track of the history and current state of files and directories. In the past there were many such systems, but now almost the whole user uses git, and we\u0026rsquo;re all grateful for it.\nInstall Git To install git, follow the download links on the website (see the table above for OS-specific links and instructions. We\u0026rsquo;ll come back to the Git command-line in a minute.\nSign up for Github For many developers \u0026ndash; maybe even most of them \u0026ndash; using Git is intimately tied to the Github code-sharing website. We\u0026rsquo;ll be using Github for almost all of our work this semester, so it\u0026rsquo;s important that you get familiar with it. If you were present for the first class, you\u0026rsquo;ve already done this. If not, you\u0026rsquo;ll need to sign Up for a Github account. Once you\u0026rsquo;ve done that, you have two choices:\n practice working at the command line go straight to a GUI (\u0026ldquo;Graphical User Interface\u0026rdquo;) that will make working with git a little more comfortable.  I recommend at least trying the command line first.\nCommand-line Setup You need to tell git a little bit about yourself. Start with your email address and your user name. Open your bash shell (Terminal in Mac, git-bash in Windows) and type:\ngit config --global user.name \u0026quot;Your Name\u0026quot; git config --global user.email \u0026quot;youraddress@ mail.utoronto.ca\u0026quot; git config --global github.user YourGithubId  Great \u0026ndash; now git knows who you are. If you\u0026rsquo;re feeling ambitious, you can also set up SSH keys so you don\u0026rsquo;t have to type in your password every time you commit to Git.\nUsing the GitKraken GUI client Sometimes it\u0026rsquo;s nice to have a backp. GitKraken is an impressive visual tool that also makes it easy to configure all of your information. They have a nice video about SSH integration, which you can watch if you like.\nLearn more There is a somewhat more wordy Git tutorial on this website, which you should read. For now, Install the Github Desktop App which also includes the command-line version of git. You can follow the excellent tutorial in the downloadable git-it application, as well as the Github Desktop documentation. There is also a quite helpful tutorial on The Programming Historian. We\u0026rsquo;ll be discussing Git and Github further in our first class.\nNode and NPM Most of our programming work will involve Javascript, which runs most of the web. The Node.js environment and its \u0026ldquo;package manager,\u0026rdquo; NPM, are an incredible resource for Javascript development. In fact, Slack, Atom, and gitKraken are all written as Node applications themselves! Installing the \u0026ldquo;bare\u0026rdquo; versions of node and NPM lets us access some of that power while we work.\nYou can survive this class without installing Node, but without it, you won\u0026rsquo;t be able to run the test suites that accompany all of the assignments. You\u0026rsquo;ll therefore be at a serious disadvantage in the class.\n In Mac and Linux, the instructions linked to in the table above are probably good enough. In Windows, you may follow all the instructions and then find yourself getting an error (\u0026rdquo;Command not found\u0026rdquo;). If that happens, you may want to try the instructions laid out here, or if you\u0026rsquo;re on Windows 10, you could go crazy and install the amazing Windows Subsystem for Linux, which allows you to work as if your computer had a real Unix operating system like everyone else.  The details of Node and NPM are a little outside the scope of our class, but a colleague at the University of Washington has an excellent introduction in one of his courses.\nSlack Slack is not strictly necessary to do your work, but it is the principal means of conversation for the class. Your activity in our Slack team is part of your participation assessment. So, please sign up for the team using the signup links above, and if you\u0026rsquo;re not familiar with Slack already, read some of the Slack documentation.\n"
},
{
	"uri": "https://digitalhistory.github.io/dh-website/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Digital History This is the website for His 393, Digital History, at the University of Toronto. All of the course materials are described in detail in the links on the sidebar; you probably want to start with the syllabus. Tables of contents for long pages can be access via the odd list icon at the top left of the page menu.\nEnjoy the class!\n"
},
{
	"uri": "https://digitalhistory.github.io/dh-website/slides/01-intro-digital-history/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Introduction to Digital History .underline { text-decoration: underline; }   if( window.location.search.match( /print-pdf/gi ) ) { var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = '../../vendor/reveal//css/print/pdf.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); }     About Me    Historian of Science \u0026amp; Technology Interdisciplinary Background Interest in \u0026ldquo;Engaged\u0026rdquo; scholarship     Why Care about History? Why care about the Digital Age?  The World Out of Which We Come  The past is the world out of which we have come, the multitude of events and experiences that have shaped our conscious selves and the social worlds we inhabit. To understand how and why we live as we do, we cannot avoid appealing to the past to explain how andwhy we got to be this way. (Cronon 2000, p. 4)   Not just Fact but Story  It is remembering and storytelling we care about, not the raw past, because only by being perennially resurrected in the mind of each ne generation does the past become meaningful. Only this does it become a living memory which in turn gives meaning to our present lives by reminding us ho we are\u0026#x2013;as individuals, as a state and nation, as a people. (Ibid., p. 13)   A Digital Age  Opportunity:  masses of data tremendous participation   Challenge  filtering data trusting writers lack of collective experience   Our Project  Understand how to write history for a digital age!  what can we preserve? what opportunities are there for change? what has been done already?     Method  Intro to toolbox but tools keep changing therefore: simple coding, basic tools, as a foundation for later learning     Syllabus  still uncharted territory (no canon, quite) 4 blocks  Text \u0026amp; Code | Basic programming literacy Data Driven History | \u0026ldquo;Distant Reading\u0026rdquo; Maps \u0026amp; Visualization | Basic Web-based GIS Oral History \u0026amp; Crowdsourcing | Multi-media History    Objectives  At the end of this course, you should:  be able to describe to others what the phrase \u0026ldquo;digital humanities\u0026rdquo; means to you. be able to frame a coherent and nuanced argument of your own about the value of DH methods to the field of history be able to clearly state and defend a position regarding \u0026ldquo;engaged scholarship\u0026rdquo;, and articulate the relationship of your argument to the contemporary media landscape have a basic understanding of markup languages and their use in DH be able to make compelling use of media materials such as audio, video, and animation in historical arguments understand how to create simple historical maps, and have an opinion about the value of GIS in historical argument   Assignments      Assignment Due Date Brief Description A B C D     Git \u0026amp; Github 2018-01-15 Mon version control and collaboration \u0026checkmark; \u0026checkmark; \u0026checkmark; \u0026checkmark;   HTML \u0026amp; CSS 2018-01-26 Fri web markup and presentation \u0026checkmark; \u0026checkmark; \u0026checkmark; \u0026checkmark;   Javascript for DH 2018-02-02 Fri intro to programming \u0026checkmark; \u0026checkmark; \u0026checkmark; \u0026checkmark;   Data-Driven History 2018-02-16 Fri CANCELLED x x x x   Spatial History 2018-03-02 Fri Simple GIS Web project \u0026checkmark; \u0026checkmark; \u0026#xa0; \u0026#xa0;   Oral History 2018-03-16 Fri Multimedia Web Project \u0026checkmark; \u0026checkmark; \u0026checkmark; \u0026checkmark;   Project Proposal 2018-03-23 Fri Imagine a Digital History Project \u0026checkmark; \u0026#xa0; \u0026#xa0; \u0026#xa0;     Participation  come every time! pay attention and ask questions! no email/youtube/reddit/facebook etc etc etc etc participate in Slack!   Assignments 0 and 1!  You can find our first two assignments on the web here and here. Assignment 0 is due in a week and a half!    Intros 1  Find someone you don\u0026rsquo;t know in 3 minutes, find out: Name; Year; Interest in the class; something else of interest Present yr classmate     Intros 2  find a different stranger spend no more than 8 minutes imagining a DH project present to another pair     Announcement!  U of T Coders Software Carpentry Workshop!  January 18-19, Gerstein Library!    Git!  \u0026ldquo;Track Changes\u0026rdquo; on steroids \u0026ldquo;version Control\u0026rdquo; software optimized for collaboration     Github!  Take out your Laptop!  Find yet another partner (work alone or help someone else if you\u0026rsquo;re very confident) Navigate to the History-Please repository Follow the instructions on the course website:  make an account fork the repo add some Candian history submit your changes as pull request  When you\u0026rsquo;re done, we\u0026rsquo;ll check out the wonders of open source first hand         // Full list of configuration options available here: // https://github.com/hakimel/reveal.js#configuration Reveal.initialize({ controls: true, progress: true, history: true, center: false, slideNumber: 'c', rollingLinks: false, keyboard: true, overview: true, margin: 0.10, maxScale: 1.00, theme: Reveal.getQueryHash().theme, // available themes are in /css/theme transition: Reveal.getQueryHash().transition || 'default', // default/cube/page/concave/zoom/linear/fade/none transitionSpeed: 'default', multiplex: { secret: '', // null if client id: '', // id, obtained from socket.io server url: '' // Location of socket.io server }, // Optional libraries used to extend on reveal.js dependencies: [ {src: '../../vendor/reveal//plugin/klipse_reveal.js'}, { src: '../../vendor/reveal//lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../vendor/reveal//plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../vendor/reveal//plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '../../vendor/reveal//plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }] });    "
},
{
	"uri": "https://digitalhistory.github.io/dh-website/slides/02-what-the-web-signifies/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " What the Web Signifies .underline { text-decoration: underline; }   if( window.location.search.match( /print-pdf/gi ) ) { var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = '../../vendor/reveal//css/print/pdf.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); }     Review  4 blocks Assignment 0 is online If you haven\u0026rsquo;t started Assignment 1, hold on for now Explaining Git     Today  Concept of the \u0026ldquo;Public Sphere\u0026rdquo; Internet and Habermas\u0026rsquo;s conception Discussion more Git Brief HTML explication HTML Exercise   Phrase \u0026ldquo;Technical Affordance\u0026rdquo;     Significance and Signification  What matters about the web? How does the web create and change meaning?   Significance: what is its importance? Signification: how does the web introduce or trransform meaning?    What matters about the web?  Web has had enormous effects  economic political cultural but I want to talk about discursive does the web change what kinds of conversations we can have?  for the better, or for the worse?    \u0026ldquo;peculiar :technical affordances\u0026rdquo; of this technological system  tech systems make some things possible \u0026amp; other things impossible. Or, at lease: some thing easy and other things very difficult. ex: chainsaw vs. jigsaw. Table saw vs. Band saw. Pencil vs. pen.       Part I: The Public Sphere  Authenticity in a media age  Figure 1: Jürgen Habermas   Mid-century anxiety Appearance of new media (radio, TV, new kinds of magazine) Are these \u0026ldquo;degraded\u0026rdquo;? Do the media make us stupider? Less critical? More pliable?   Reasons to worry     maybe there are material conditions that make this sort of evil possible? perhaps the media of communication have a role?   The Public Sphere  A portion of the public sphere comes into being in every conversation in which private individuals assemble to form a public body.  \u0026#x2013; J. Habermas    Habermas wants us to believe in the reality of the \u0026ldquo;public sphere\u0026rdquo;, as a discursive body composed of conversations that have a certain form   Jürgen Habermas (b. 1929)  pre-eminent German public intellectual of 1960\u0026rsquo;s and 1970\u0026rsquo;s role of Holocaust/Fascism in all his thinking inheritance from the Frankfurt School search for \u0026ldquo;authentic\u0026rdquo; forms of communication   Concept of the Public Sphere  By \u0026ldquo;the public sphere\u0026rdquo; we mean\u0026#x2026; a realm of our social life in which something approaching public opinion can be formed\u0026#x2026; Citizens behave as a public body when they confer in an unrestricted fashion \u0026#x2013; that is, with the guarantee of freedom of assembly and association and the freedom to express and publish their opinions \u0026#x2013; about matters of general interest. (Habermas 1964, p.49[p.2])   Unpacking:  \u0026ldquo;something approaching public opinion\u0026rdquo;: suggests that \u0026ldquo;public opinion\u0026rdquo; has a technical meaning Conferring in an unrestricted fashion: the public sphere requires a certain kind of freedom Matters of general interest: we\u0026rsquo;re not talking about breakfast, jeans, or libstick.      Public and Private     Public Private     open to all restricted   accessible for money closed even if you can pay   state-related non-state, civil society   political non-political   official non-official   common special   impersonal personal   national or popular group, class, or locale   international/universal particular/finite   in view of others concealed   outside the home domestic   circulated in print/electronic media circulated orally/in manuscript   known widely known only to a few   acknowledged/explicit tacit/implicit     many definitions not all of them part of Habermas\u0026rsquo;s terminology      Concept of the Public Sphere  Strukturwandlung der Öffentlichkeit (1962)  Arena ruled by rational argument Freedom of expression prevails (\u0026#x2026;an unrestricted fashion) Conversations concern common interests (e.g. ?) both ideal and historical arises first in 18th Century flourishes and then withers in 19th at a nadir in 20th; can it be revived?   Habermas\u0026rsquo;s Habilitation and first important book. but 55 years old!!     Before Bourgeois Society  There is no \u0026ldquo;Public Sphere\u0026rdquo; Instead there are \u0026ldquo;Public Individuals\u0026rdquo; with certain powers  and Church authorities, empowered to speak on moral matters  Opposed to these are \u0026ldquo;private persons\u0026rdquo;   Begin the historical story w/ the classic trnasition to a bourgeois/capitalist society around 1800.  before this point, not public sphere, just public individuals, who are distinct from \u0026rsquo;private persons\u0026ldquo;    Private and Public Persons  A private person has no right to pass public and perhaps even disapproving judgement on the actions, procedures, laws, regulations, and ordinances of sovereigns and courts\u0026#x2026;. or to publish in print pertinent reports that he manages to obtain. For a private person is not at all capable of making such judgment, because he lacks complete knowledge of circumstances and motives.  \u0026#x2013; Frederick \u0026rsquo;the Great\u0026rsquo; of Prussia, 1784   \u0026ldquo;Private\u0026rdquo; and \u0026ldquo;Public\u0026rdquo; distinguish types of person, not types of activity.     18th Century Origins  How do we get from a monarchy in which only \u0026rsquo;public persons\u0026rsquo; have license to speak on \u0026rsquo;public matters\u0026rsquo;, to a \u0026rsquo;public sphere\u0026rsquo; which is opened more widely?  Rise of newspapers/journals. Intrusion of private commentary on \u0026rsquo;public\u0026rsquo; matters  a new kind of media  rise of salons \u0026amp; coffee houses.  a new kind of sociality.    Salons and Coffee Houses      Salons and Coffee Houses  Salons as the heart of intellectual activity in c. 18  \u0026rsquo;monopoly on first publication\u0026rsquo; mixing of classes freedom from patronage  Coffee Houses a similar space  But no restrictions on topics of discourse matters of politics as frequent a topic as art  an ideal of common humanity esp. in coffee houses  opinions judged by reason alone  no intrusion of \u0026rsquo;distinction\u0026rsquo; or finance  [ but note: imperfection of this vision ]    one of the longstanding critiques of Habermas is the actual restrictiveness of coffee houses in real life. Who\u0026rsquo;s excluded? make a list: women, the truly poor, non-Europeans, the uneducated (to some extent),   Circulation  Communication across broad spaces \u0026amp; differences needs something more than conversation need a way get ideas to large numbers  news sheets \u0026rarr; newspapers letters \u0026rarr; journals    Markets  Through newspapers \u0026amp; journals conversation becomes a commodity Therefore it loses its exclusivity so, in the beginning, commodification is a good thing   This process of ccommodification, and its trasformation from a positive, welcome fore in to a troubling, destructive one is central to H but is not just his idea.     The State vs. Society  This is all happening in a pre-democratic era (mostly) \u0026rsquo;The People\u0026rsquo; are a problem for the state growth of \u0026rsquo;the social\u0026rsquo; a threat to sovereignty \u0026rsquo;public sphere\u0026rsquo; precarious and subject to dissolution   The Structure of the Public Sphere      Private Realm Public Sphere Sphere of Public Authority     Civil Society (Commodity Exchange, social labour) Political Public Sphere State   Conjugal Family Literary/Philosophical Public Sphere Court     the public sphere sits between Private Life and Authority, striving for independence from both it mediates between them and draws its legitimacy from its use of reason note that it presupposes an emergent realm of \u0026ldquo;privacy\u0026rdquo; \u0026#x2013; and so, it is grounded in that notion, like all liberal philosophical constructs     From Debate to Consumption  Public Sphere in effect undoes itself success of media dissolves the reciprocal creation \u0026amp; communication of ideas  instead we just consume reason begins to vanish  Massive growth of media in c.20  radio, television, film  The Public Sphere: A Hollow Shell?  Where is its legitimacy?      Reception  extremely influential with some questions about both the historical and the philosophical elements of the story.   Counterpublics  \u0026#x2026;some publics are defined by their tension with a larger public\u0026#x2026; Discussion with such a public is understood to contravene the rules obtaining in the world at large\u0026#x2026; This kind of public is, in effect, a counterpublic: it maintains at some level\u0026#x2026; an awareness of its subordinate status. \u0026#x2013; M. Warner (2002)   One or Many?  Habermas sees Public Sphere as necessarily unitary But discourse carves out separate spaces  that may correlate with social divides \u0026#x2026; and where the addressee (\u0026ldquo;stranger\u0026rdquo;) is presumed to share a common subordination with the speaker  (\u0026ldquo;Given the fact that almost anyone can contribute to public discourse, the multiplicity of perspectives makes it even more difficult to define public opinion. Any designation of public opinion then becomes arbitrary\u0026rdquo;)   Disinterested or embodied?  for Habermas separation of individual from both \u0026ldquo;accidental\u0026rdquo; circumstances and official capacities is paramount Warner: This is fictive  and anyway undesirable  because some kinds of \u0026ldquo;argument\u0026rdquo; are fundamentally corporeal this doesn\u0026rsquo;t make them less legitimate does it?     Reading or Acting  Habermas: the actions of a legitimate public sphere are actions of reading (scrutinize, judge, decide) Warner: in a counterpublic, there may be other sorts of actions (prance, diss, act up, fantasize, mourn)     How this matters for History  If there are many \u0026ldquo;publics\u0026rdquo;, then working to carve out a particular space for discourse can have salutary effects Modes of address and standards of comportment can differ across \u0026rsquo;publics\u0026rsquo; May even be possible to craft a \u0026rsquo;public\u0026rsquo; around our work.  though \u0026ldquo; it follows that the public exists only as long as the text is being engaged with\u0026rdquo;    Enter the Internet  Habermas\u0026rsquo; theory revolves around a technology and a social institution  enabled by print, threatened by TV can the Internet undo this dissolution? If so, how? if not, is it the apotheosis of that dissolution?    Digital History and the Public Sphere  Does the Internet provide a space for authentic public conversatoin? What are effects of the medium on how we pursue knowledge and truth?  state and corporate pressures algorithmic actors (!)   Technical Affordances of the web  instantaneous distribution distributed production machine-readable text algorithmic sorting   All of these are present in every web-based communication. But realms of the web have distinct affordances of their own: Reddit \u0026ne; twitter \u0026ne; facebook \u0026ne; The New York Times   Group Work  Groups of ~3 Pro- and Anti- 3 strongest arguments for/against Internet as an \u0026ldquo;authentic\u0026rdquo; public sphere     Machine-readable Text  On the web, text is \u0026ldquo;Marked up\u0026rdquo; \u0026amp;lt;html\u0026amp;gt; \u0026amp;lt;head\u0026amp;gt; \u0026amp;lt;meta name=\"keywords\" content=\"HTML,CSS,XML,JavaScript\"\u0026amp;gt; \u0026amp;lt;title\u0026amp;gt;HTML Example\u0026amp;lt;/title\u0026amp;gt; \u0026amp;lt;/head\u0026amp;gt; \u0026amp;lt;body\u0026amp;gt; \u0026amp;lt;h1\u0026amp;gt;This is the heading\u0026amp;lt;/h1\u0026amp;gt; \u0026amp;lt;p\u0026amp;gt; This is a paragraph. It can contain \u0026amp;lt;i\u0026amp;gt;further markup\u0026amp;lt;/i\u0026amp;gt; and also \u0026amp;lt;a href=\"http:/some.where.com\"\u0026amp;gt;more complex content\u0026amp;lt;/a\u0026amp;gt;. \u0026amp;lt;/p\u0026amp;gt; \u0026amp;lt;aside\u0026amp;gt; Sometimes you will see \u0026amp;lt;i\u0026amp;gt;semantic\u0026amp;lt;/i\u0026amp;gt; tags, like \"aside\", \"header\", \"footer\", \"article\", or \"section\". \u0026amp;lt;/aside\u0026amp;gt; \u0026amp;lt;/body\u0026amp;gt; \u0026amp;lt;/html\u0026amp;gt;   .CodeMirror { font-size: 2em; }   window.klipse_settings = { selector_eval_html: \".klipse\" };   '   Machine-readable Text This is the heading  This is a paragraph. It can contain further markup and also more complex content.  Sometimes you'll see semantic tags, like \"aside\", \"header\", \"footer\", \"article\", or \"section\".   Consequences  Programs can scan this text, interpret it\u0026#x2026; then treat it as data which can be combined, analyzed, etc.  point of learning HTML is  Understand how to achieve a certain \u0026ldquo;look\u0026rdquo; Understand how a complex computer algorithm might treat it as \u0026ldquo;data\u0026rdquo;.   Tag Structure \u0026amp;lt;tag att1=\"value1\" att2=\"value2\"\u0026amp;gt;content\u0026amp;lt;/tag\u0026amp;gt; \u0026amp;lt;p class=\"normal\" align=\"right\"\u0026amp;gt;Paragraph Content\u0026amp;lt;/p\u0026amp;gt; \u0026amp;lt;a href=\"http://www.google.com\"\u0026amp;gt;Link to google\u0026amp;lt;/a\u0026amp;gt; \u0026amp;lt;img src=\"http://1.bp.blogspot.com/-CzqzzBV2tMk/TxBM3ar18MI/AAAAAAAAPm0/6faLPO9BM8w/s1600/i-can-has-cheezburger.jpg\" title=\"I can Haz Cheezburger?\" alt=\"greedy cat saying \u0026#39;I can haz cheezburger?\u0026#39;\" /\u0026amp;gt;   .CodeMirror { font-size: 2em; }   window.klipse_settings = { selector_eval_html: \".klipse\" };   '   tags:  tag identifier    A Few HTML tags you should know  \u0026lt;html\u0026gt;\u0026lt;/html\u0026gt;Opens/closes every page \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; and \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt;two main sections for metadata and display \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;basic paragraph unit \u0026lt;a href=\"http://link.address\"\u0026gt;\u0026lt;/a\u0026gt;The essential hyperlink tag that makes the web what it is \u0026lt;img src=\"http://file.location\" alt=\"text to display for non-visual browsers/viewers\"/\u0026gt;\u0026ldquo;self-closing\u0026rdquo; image display tag \u0026lt;blockquote\u0026gt;\u0026lt;/blockquote\u0026gt;semantic tag distinguishing quoted text \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;often-invisible tag that divides page into \u0026ldquo;divisions\u0026rdquo; \u0026lt;em\u0026gt;\u0026lt;/em\u0026gt; \u0026lt;strong\u0026gt;\u0026lt;/strong\u0026gt;, \u0026lt;i\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;b\u0026gt;\u0026lt;/b\u0026gt;emphasized and strong text \u0026lt;ol\u0026gt;, \u0026lt;ul\u0026gt;, \u0026lt;li\u0026gt;building \u0026ldquo;ordered\u0026rdquo; and \u0026ldquo;unordered\u0026rdquo; lists \u0026lt;table\u0026gt;, \u0026lt;tr\u0026gt;, \u0026lt;th\u0026gt;, \u0026lt;td\u0026gt;building tables (don\u0026rsquo;t overuse!)   Group Work 2: HTML, continued  Let\u0026rsquo;s continue our introduction to HTML via JSBin:  click here: http://jsbin.com/utinoz/27/edit?html,output You can also download the excercse at the Github Repository   Here you can see the all parts of the page in different panes. try to add:  images lists real links anything else you can think of   Try to keep it \u0026ldquo;real\u0026rdquo;, and work as teams, with one person driving, and the other person looking stuff up on another computer.   HTML to Markdown  Writing in HTML is distracting and time-consuming!  HTML for publication, but Markdown for writing  convenient shorthand for HTML which we will often use in class    Markdown cheatsheet  _emphasis and __strong__single \u0026ldquo;_\u0026rdquo; or \u0026ldquo;\u0026ldquo; surrounding words for ital, double for *bold, triple for bold ital \u0026gt; for blockquotesjust preface your paragraph with an angle bracket and one space to get a quote Separate paragraphs with an empty line headings start with one or more \u0026ldquo;#\u0026rdquo; horizontal lines with ----but be sure to keep one empty line above and below, or will be interpreted differently links with [Link Text](http://link.address) images with ![Alt Text](http://path.to.image)   Practice Markdown on this similar but subtly different page, or edit `index.md` in atom.        // Full list of configuration options available here: // https://github.com/hakimel/reveal.js#configuration Reveal.initialize({ controls: true, progress: true, history: true, center: false, slideNumber: 'c', rollingLinks: false, keyboard: true, overview: true, margin: 0.10, maxScale: 1.00, theme: Reveal.getQueryHash().theme, // available themes are in /css/theme transition: Reveal.getQueryHash().transition || 'default', // default/cube/page/concave/zoom/linear/fade/none transitionSpeed: 'default', multiplex: { secret: '', // null if client id: '', // id, obtained from socket.io server url: '' // Location of socket.io server }, // Optional libraries used to extend on reveal.js dependencies: [ {src: '../../vendor/reveal//plugin/klipse_reveal.js'}, { src: '../../vendor/reveal//lib/js/classList.js', condition: function() { return !document.body.classList; } }, { src: '../../vendor/reveal//plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '../../vendor/reveal//plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '../../vendor/reveal//plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '../../vendor/reveal//plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }] });    "
},
{
	"uri": "https://digitalhistory.github.io/dh-website/assignment/",
	"title": "Assignments",
	"tags": [],
	"description": "",
	"content": "  Assignment 00: Git and Github Assignment 01: HTML \u0026amp; CSS self-study Assignment 02: Javascript Basics Assignment 03: Spatial History Assignment 04: Oral History Assignment 05: Project Proposal Participation  "
},
{
	"uri": "https://digitalhistory.github.io/dh-website/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://digitalhistory.github.io/dh-website/slides/",
	"title": "Lecture Slides",
	"tags": [],
	"description": "",
	"content": "Here are the lecture slides:\n"
},
{
	"uri": "https://digitalhistory.github.io/dh-website/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://digitalhistory.github.io/dh-website/tools/",
	"title": "Tools and Tricks",
	"tags": [],
	"description": "",
	"content": "  Git Tips for Assignments Installing Node Dependencies Navigating at the Command Line Setup  "
}]